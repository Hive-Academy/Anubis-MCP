name: Build and Publish Docker Image

on:
  push:
    branches: [main, docker-release]
    tags: ['v*']
  pull_request:
    branches: [main, docker-release]
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: anubis
  DOCKER_HUB_USERNAME: hiveacademy

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Verify database template exists
        run: |
          if [ -f "prisma/data/workflow.db" ]; then
            echo "✅ Pre-seeded database found: $(ls -lh prisma/data/workflow.db)"
          else
            echo "⚠️ Pre-seeded database not found, will be created during Docker build"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Anubis
            org.opencontainers.image.description=🏺 Anubis - Intelligent Guidance for AI Workflows | MCP-compliant workflow intelligence system
            org.opencontainers.image.vendor=Hive Academy
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          echo "🧪 Testing Docker image functionality..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest --help

      - name: Run Docker Scout security scan
        if: github.event_name != 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          only-severities: critical,high
          exit-code: true

      - name: Update Docker Hub description
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          repository: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-sbom
          path: sbom.spdx.json

      - name: Comment PR with image details
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `## 🐳 Docker Build Results

            The Docker image has been built successfully for this PR!

            **Image Details:**
            - **Repository:** \`${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}\`
            - **Platforms:** linux/amd64, linux/arm64
            - **Build-time seeding:** ✅ Enabled (instant startup)
            - **Security:** Scanned with Docker Scout

            **Test the image locally:**
            \`\`\`bash
            # Pull the image (after merge)
            docker pull ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}

            # Run with STDIO (MCP default)
            docker run --rm -i -v mcp-workflow-data:/app/data ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}

            # Run with HTTP server
            docker run --rm -p 3000:3000 -e MCP_TRANSPORT_TYPE=SSE -v mcp-workflow-data:/app/data ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}
            \`\`\`

            **Claude Desktop MCP Configuration:**
            \`\`\`json
            {
              "mcpServers": {
                "anubis": {
                  "command": "docker",
                  "args": ["run", "--rm", "-i", "-v", "mcp-workflow-data:/app/data", "${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}"]
                }
              }
            }
            \`\`\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Deployment summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## 🚀 Docker Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry:** Docker Hub" >> $GITHUB_STEP_SUMMARY
          echo "- **Security:** Scanned ✅" >> $GITHUB_STEP_SUMMARY
          echo "- **SBOM:** Generated ✅" >> $GITHUB_STEP_SUMMARY
