/**
 * Universal Query Tool Description
 * Comprehensive documentation for the query_data MCP tool
 */

export const UNIVERSAL_QUERY_DESCRIPTION = `
Universal query tool with full Prisma filtering capabilities.

üéØ REPLACES 15+ INDIVIDUAL QUERY TOOLS:
‚Ä¢ get_task_context, list_tasks, search_tasks
‚Ä¢ get_research_report, get_code_review_report, get_completion_report  
‚Ä¢ task_dashboard, workflow_status, get_current_mode_for_task
‚Ä¢ get_implementation_plan, get_subtasks, get_delegation_history
‚Ä¢ And many more specialized query tools...

üöÄ POWERFUL FEATURES:
‚Ä¢ Advanced Prisma filtering (where, include, select, orderBy)
‚Ä¢ Pagination and sorting with cursor-based navigation
‚Ä¢ Aggregations and analytics (count, sum, avg, min, max)
‚Ä¢ Performance optimizations with caching and timeouts
‚Ä¢ Flexible response formatting (full, summary, minimal)
‚Ä¢ Relationship traversal with nested includes
‚Ä¢ Complex filtering with AND/OR logic and operators

üìä COMPLETE ENTITY REFERENCE (10 Core Entities):

üîπ TASK ENTITY - Main workflow tasks
   Fields: taskId, name, status, creationDate, completionDate, owner, currentMode, priority, dependencies, redelegationCount, gitBranch
   Relationships: taskDescription, implementationPlans[], subtasks[], delegationRecords[], researchReports[], codeReviews[], completionReports[], comments[], workflowTransitions[]

üîπ TASK DESCRIPTION ENTITY - Detailed specifications
   Fields: taskId, description, businessRequirements, technicalRequirements, acceptanceCriteria, createdAt, updatedAt
   Relationships: task (required)

üîπ IMPLEMENTATION PLAN ENTITY - Technical implementation plans
   Fields: id, taskId, overview, approach, technicalDecisions, filesToModify, createdAt, updatedAt, createdBy
   Relationships: task (required), subtasks[]

üîπ SUBTASK ENTITY - Granular work items
   Fields: id, taskId, planId, name, description, sequenceNumber, status, assignedTo, estimatedDuration, startedAt, completedAt, batchId, batchTitle
   Relationships: task (required), plan (required), delegationRecords[], comments[]

üîπ RESEARCH REPORT ENTITY - Research findings
   Fields: id, taskId, title, summary, findings, recommendations, references, createdAt, updatedAt
   Relationships: task (required)

üîπ CODE REVIEW REPORT ENTITY - Quality assessments
   Fields: id, taskId, status, summary, strengths, issues, acceptanceCriteriaVerification, manualTestingResults, requiredChanges, createdAt, updatedAt
   Relationships: task (required)

üîπ COMPLETION REPORT ENTITY - Task completion summaries
   Fields: id, taskId, summary, filesModified, delegationSummary, acceptanceCriteriaVerification, createdAt
   Relationships: task (required)

üîπ COMMENT ENTITY - Notes and communications
   Fields: id, taskId, subtaskId, mode, content, createdAt
   Relationships: task (required), subtask (optional)

üîπ DELEGATION RECORD ENTITY - Role transition tracking
   Fields: id, taskId, subtaskId, fromMode, toMode, delegationTimestamp, completionTimestamp, success, rejectionReason, redelegationCount
   Relationships: task (required), subtask (optional)

üîπ WORKFLOW TRANSITION ENTITY - State change tracking
   Fields: id, taskId, fromMode, toMode, transitionTimestamp, reason
   Relationships: task (required)

üìã PRACTICAL QUERY EXAMPLES:

üî∏ BASIC QUERIES:
‚Ä¢ All in-progress tasks:
  { entity: "task", where: { status: "in-progress" } }

‚Ä¢ Tasks by priority:
  { entity: "task", where: { priority: { in: ["High", "Critical"] } }, orderBy: { createdAt: "desc" } }

‚Ä¢ Recent tasks:
  { entity: "task", where: { creationDate: { gte: "2024-01-01T00:00:00Z" } }, orderBy: { creationDate: "desc" }, pagination: { take: 10 } }

üî∏ RELATIONSHIP QUERIES:
‚Ä¢ Task with full context:
  { 
    entity: "task", 
    where: { taskId: "TSK-001" }, 
    include: { 
      taskDescription: true, 
      implementationPlans: { 
        include: { subtasks: true } 
      }, 
      researchReports: true, 
      codeReviews: true 
    } 
  }

‚Ä¢ Implementation plan with subtasks:
  { 
    entity: "implementationPlan", 
    where: { taskId: "TSK-001" }, 
    include: { 
      subtasks: { 
        orderBy: { sequenceNumber: "asc" },
        where: { status: { not: "cancelled" } }
      } 
    } 
  }

‚Ä¢ Subtasks by batch:
  { 
    entity: "subtask", 
    where: { batchId: "B001" }, 
    include: { task: { select: { name: true, status: true } } },
    orderBy: { sequenceNumber: "asc" }
  }

üî∏ ADVANCED FILTERING:
‚Ä¢ Complex conditions:
  { 
    entity: "task", 
    where: { 
      AND: [
        { status: { in: ["in-progress", "needs-review"] } },
        { priority: { not: "Low" } },
        { creationDate: { gte: "2024-01-01T00:00:00Z" } }
      ]
    } 
  }

‚Ä¢ Relationship-based filtering:
  { 
    entity: "task", 
    where: { 
      implementationPlans: { 
        some: { 
          createdBy: "architect",
          subtasks: { some: { status: "in-progress" } }
        } 
      } 
    } 
  }

üî∏ AGGREGATION QUERIES:
‚Ä¢ Task status distribution:
  { entity: "task", aggregation: { count: true, groupBy: ["status"] } }

‚Ä¢ Priority breakdown with counts:
  { entity: "task", aggregation: { count: true, groupBy: ["priority", "status"] } }

‚Ä¢ Average redelegation count by role:
  { entity: "task", aggregation: { avg: { redelegationCount: true }, groupBy: ["currentMode"] } }

üî∏ PAGINATION EXAMPLES:
‚Ä¢ Offset-based (simple):
  { entity: "task", pagination: { skip: 20, take: 10 }, orderBy: { createdAt: "desc" } }

‚Ä¢ Cursor-based (efficient for large datasets):
  { entity: "task", pagination: { cursor: { taskId: "TSK-005" }, take: 10 }, orderBy: { createdAt: "desc" } }

üî∏ PERFORMANCE OPTIMIZATION:
‚Ä¢ Select specific fields only:
  { entity: "task", select: { taskId: true, name: true, status: true, priority: true } }

‚Ä¢ Minimal response format:
  { entity: "task", format: "minimal" }

‚Ä¢ Distinct values:
  { entity: "task", distinct: ["status", "priority"] }

üî∏ WORKFLOW-SPECIFIC QUERIES:
‚Ä¢ Current task assignments:
  { entity: "task", where: { currentMode: { not: null }, status: "in-progress" }, include: { taskDescription: { select: { description: true } } } }

‚Ä¢ Delegation history for task:
  { entity: "delegation", where: { taskId: "TSK-001" }, orderBy: { delegationTimestamp: "desc" }, include: { task: { select: { name: true } } } }

‚Ä¢ Recent workflow transitions:
  { entity: "workflowTransition", orderBy: { transitionTimestamp: "desc" }, pagination: { take: 20 }, include: { task: { select: { name: true } } } }

üî∏ REPORTING QUERIES:
‚Ä¢ Tasks completed this week:
  { entity: "task", where: { status: "completed", completionDate: { gte: "2024-01-15T00:00:00Z" } }, include: { completionReports: true } }

‚Ä¢ Code review status summary:
  { entity: "codeReviewReport", aggregation: { count: true, groupBy: ["status"] } }

‚Ä¢ Research reports by task:
  { entity: "researchReport", include: { task: { select: { name: true, status: true } } }, orderBy: { createdAt: "desc" } }

üí° PERFORMANCE TIPS:
‚Ä¢ Use select instead of include when you only need specific fields
‚Ä¢ Apply where conditions to minimize data transfer
‚Ä¢ Use pagination for large result sets (take ‚â§ 100 for optimal performance)
‚Ä¢ Prefer cursor-based pagination for datasets > 1000 records
‚Ä¢ Use aggregation queries for analytics instead of fetching all records
‚Ä¢ Cache frequently accessed data with appropriate TTL

‚ö†Ô∏è COMMON PATTERNS TO AVOID:
‚Ä¢ Don't fetch all records without pagination
‚Ä¢ Avoid deep nested includes without where conditions
‚Ä¢ Don't use select and include together (they're mutually exclusive)
‚Ä¢ Avoid complex aggregations on large datasets without proper indexing

üéØ RESPONSE FORMATS:
‚Ä¢ "full": Complete data with all requested fields and relationships (default)
‚Ä¢ "summary": Essential fields only with basic relationships
‚Ä¢ "minimal": IDs and names only for quick reference

This tool provides complete access to the workflow management system's data layer with enterprise-grade filtering, performance optimization, and relationship traversal capabilities.
`;
