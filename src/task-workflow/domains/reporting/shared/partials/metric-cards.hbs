<!-- Enhanced Metric Cards Component -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    {{#each metrics}}
        <div class="metric-card animate-on-scroll" style="animation-delay: {{multiply @index 0.1}}s">
            <!-- Icon and Value -->
            <div class="flex items-center justify-between mb-4">
                <div class="flex-1">
                    <div class="metric-value" id="metric-{{@index}}">
                        {{#if (eq type 'percentage')}}
                            {{value}}%
                        {{else if (eq type 'currency')}}
                            ${{formatNumber value}}
                        {{else if (eq type 'duration')}}
                            {{formatDuration value}}
                        {{else}}
                            {{formatNumber value}}
                        {{/if}}
                    </div>
                    <div class="metric-label">{{label}}</div>
                </div>
                
                <!-- Icon -->
                <div class="flex-shrink-0">
                    <div class="w-12 h-12 rounded-lg flex items-center justify-center {{iconBg}}">
                        <i class="{{icon}} {{iconColor}} text-xl"></i>
                    </div>
                </div>
            </div>
            
            <!-- Progress Bar (if applicable) -->
            {{#if showProgress}}
                <div class="mb-3">
                    <div class="flex items-center justify-between text-sm mb-1">
                        <span class="text-gray-600">Progress</span>
                        <span class="font-medium text-gray-900">{{value}}%</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                        <div 
                            class="h-2 rounded-full transition-all duration-1000 ease-out {{progressColor}}" 
                            style="width: 0%"
                            data-target-width="{{value}}%"
                        ></div>
                    </div>
                </div>
            {{/if}}
            
            <!-- Trend Indicator -->
            {{#if trend}}
                <div class="flex items-center justify-between text-sm">
                    <div class="flex items-center space-x-1">
                        {{#if (eq trend.direction 'up')}}
                            <i class="fas fa-arrow-up text-success-600"></i>
                            <span class="text-success-600 font-medium">+{{trend.value}}%</span>
                        {{else if (eq trend.direction 'down')}}
                            <i class="fas fa-arrow-down text-danger-600"></i>
                            <span class="text-danger-600 font-medium">-{{trend.value}}%</span>
                        {{else}}
                            <i class="fas fa-minus text-gray-400"></i>
                            <span class="text-gray-400 font-medium">{{trend.value}}%</span>
                        {{/if}}
                    </div>
                    <span class="text-gray-500">{{trend.period}}</span>
                </div>
            {{/if}}
            
            <!-- Additional Info -->
            {{#if subtitle}}
                <div class="mt-2 text-xs text-gray-500">
                    {{subtitle}}
                </div>
            {{/if}}
        </div>
    {{/each}}
</div>

<!-- Metric Cards JavaScript -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animate metric values on load
        animateMetricValues();
        
        // Animate progress bars
        animateProgressBars();
    });
    
    function animateMetricValues() {
        const metrics = document.querySelectorAll('[id^="metric-"]');
        
        metrics.forEach((metric, index) => {
            const finalValue = metric.textContent.trim();
            const numericValue = parseFloat(finalValue.replace(/[^\d.-]/g, ''));
            
            if (!isNaN(numericValue)) {
                // Start from 0 and animate to final value
                let currentValue = 0;
                const increment = numericValue / 30; // 30 frames for smooth animation
                const suffix = finalValue.replace(/[\d.-]/g, '');
                
                const timer = setInterval(() => {
                    currentValue += increment;
                    
                    if (currentValue >= numericValue) {
                        currentValue = numericValue;
                        clearInterval(timer);
                    }
                    
                    // Format the value based on type
                    let displayValue;
                    if (suffix.includes('%')) {
                        displayValue = Math.round(currentValue) + '%';
                    } else if (suffix.includes('$')) {
                        displayValue = '$' + WorkflowReports.formatNumber(Math.round(currentValue));
                    } else if (suffix.includes('h') || suffix.includes('m')) {
                        displayValue = WorkflowReports.formatDuration(Math.round(currentValue));
                    } else {
                        displayValue = WorkflowReports.formatNumber(Math.round(currentValue));
                    }
                    
                    metric.textContent = displayValue;
                }, 50);
                
                // Delay each metric animation slightly
                setTimeout(() => {
                    // Animation will start when this executes
                }, index * 100);
            }
        });
    }
    
    function animateProgressBars() {
        const progressBars = document.querySelectorAll('[data-target-width]');
        
        progressBars.forEach((bar, index) => {
            const targetWidth = bar.getAttribute('data-target-width');
            
            setTimeout(() => {
                bar.style.width = targetWidth;
            }, 500 + (index * 200)); // Stagger the animations
        });
    }
    
    // Helper function to create metric data structure
    window.createMetricData = function(label, value, type = 'number', options = {}) {
        return {
            label: label,
            value: value,
            type: type,
            icon: options.icon || 'fas fa-chart-bar',
            iconColor: options.iconColor || 'text-primary-600',
            iconBg: options.iconBg || 'bg-primary-100',
            showProgress: options.showProgress || false,
            progressColor: options.progressColor || 'bg-primary-600',
            trend: options.trend || null,
            subtitle: options.subtitle || null
        };
    };
    
    // Predefined metric configurations
    window.MetricConfigs = {
        totalTasks: {
            icon: 'fas fa-tasks',
            iconColor: 'text-blue-600',
            iconBg: 'bg-blue-100'
        },
        completedTasks: {
            icon: 'fas fa-check-circle',
            iconColor: 'text-success-600',
            iconBg: 'bg-success-100'
        },
        inProgressTasks: {
            icon: 'fas fa-clock',
            iconColor: 'text-warning-600',
            iconBg: 'bg-warning-100'
        },
        completionRate: {
            icon: 'fas fa-percentage',
            iconColor: 'text-purple-600',
            iconBg: 'bg-purple-100',
            showProgress: true,
            progressColor: 'bg-purple-600'
        },
        averageDuration: {
            icon: 'fas fa-stopwatch',
            iconColor: 'text-indigo-600',
            iconBg: 'bg-indigo-100'
        },
        totalDelegations: {
            icon: 'fas fa-exchange-alt',
            iconColor: 'text-orange-600',
            iconBg: 'bg-orange-100'
        },
        activeUsers: {
            icon: 'fas fa-users',
            iconColor: 'text-green-600',
            iconBg: 'bg-green-100'
        },
        criticalTasks: {
            icon: 'fas fa-exclamation-triangle',
            iconColor: 'text-red-600',
            iconBg: 'bg-red-100'
        }
    };
</script>

<!-- Helper Handlebars functions -->
<script>
    // Register Handlebars helpers for metric calculations
    if (typeof Handlebars !== 'undefined') {
        Handlebars.registerHelper('multiply', function(a, b) {
            return a * b;
        });
        
        Handlebars.registerHelper('formatNumber', function(num) {
            return WorkflowReports.formatNumber(num);
        });
        
        Handlebars.registerHelper('formatDuration', function(minutes) {
            return WorkflowReports.formatDuration(minutes);
        });
        
        Handlebars.registerHelper('eq', function(a, b) {
            return a === b;
        });
    }
</script> 