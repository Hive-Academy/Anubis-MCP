<%
// Template Variables
const title = "⚙️ Implementation Execution Analysis";
const subtitle = "Technical Implementation Deep Dive";
const headerIcon = "⚙️";
const reportType = "Implementation Execution";
const generatedAt = data.generatedAt || new Date();
const dateRange = data.dateRange;

// Additional Styles for Implementation Execution Report
const additionalStyles = `
    /* Implementation Execution Specific Styles */
    .execution-overview {
        background: linear-gradient(135deg, var(--primary-500) 0%, var(--info-500) 100%);
        border-radius: var(--radius-xl);
        padding: var(--spacing-2xl);
        margin-bottom: var(--spacing-xl);
        color: white;
        position: relative;
        overflow: hidden;
    }
    
    .execution-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--spacing-lg);
        margin-top: var(--spacing-xl);
    }
    
    .execution-stat {
        text-align: center;
        padding: var(--spacing-lg);
        background: rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-lg);
        backdrop-filter: blur(10px);
    }
    
    .execution-stat-value {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: var(--spacing-xs);
    }
    
    .execution-stat-label {
        font-size: 0.875rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .batch-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .batch-card {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        transition: all var(--transition-normal);
    }
    
    .batch-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-xl);
    }
    
    .batch-card.completed {
        border-color: var(--success-500);
        background: linear-gradient(135deg, var(--dark-surface) 0%, rgba(34, 197, 94, 0.05) 100%);
    }
    
    .batch-card.in-progress {
        border-color: var(--primary-500);
        background: linear-gradient(135deg, var(--dark-surface) 0%, rgba(59, 130, 246, 0.05) 100%);
    }
    
    .batch-card.pending {
        border-color: var(--dark-border);
        opacity: 0.7;
    }
    
    .batch-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: var(--spacing-lg);
        padding-bottom: var(--spacing-md);
        border-bottom: 2px solid var(--dark-border);
    }
    
    .batch-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--dark-text);
        margin: 0;
    }
    
    .batch-status {
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .batch-status.completed {
        background: var(--success-500);
        color: white;
    }
    
    .batch-status.in-progress {
        background: var(--primary-500);
        color: white;
    }
    
    .batch-status.pending {
        background: var(--dark-border);
        color: var(--dark-text-muted);
    }
    
    .batch-progress {
        margin: var(--spacing-md) 0;
    }
    
    .batch-progress-bar {
        width: 100%;
        height: 8px;
        background: var(--dark-border);
        border-radius: var(--radius-sm);
        overflow: hidden;
        margin: var(--spacing-sm) 0;
    }
    
    .batch-progress-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-500), var(--secondary-500));
        transition: width var(--transition-normal);
    }
    
    .batch-progress-fill.completed {
        background: linear-gradient(90deg, var(--success-500), var(--success-600));
    }
    
    .subtask-list {
        margin-top: var(--spacing-lg);
    }
    
    .subtask-item {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-md);
        padding: var(--spacing-md);
        border-radius: var(--radius-md);
        margin-bottom: var(--spacing-sm);
        background: var(--dark-background);
        border: 1px solid var(--dark-border);
        transition: all var(--transition-fast);
    }
    
    .subtask-item:hover {
        background: var(--dark-surface);
    }
    
    .subtask-item.completed {
        border-color: var(--success-500);
        background: rgba(34, 197, 94, 0.05);
    }
    
    .subtask-item.in-progress {
        border-color: var(--primary-500);
        background: rgba(59, 130, 246, 0.05);
    }
    
    .subtask-icon {
        font-size: 1.25rem;
        width: 30px;
        text-align: center;
        margin-top: var(--spacing-xs);
    }
    
    .subtask-content {
        flex: 1;
    }
    
    .subtask-title {
        font-weight: 600;
        color: var(--dark-text);
        margin-bottom: var(--spacing-xs);
    }
    
    .subtask-description {
        color: var(--dark-text-muted);
        font-size: 0.875rem;
        line-height: 1.5;
        margin-bottom: var(--spacing-sm);
    }
    
    .subtask-meta {
        display: flex;
        gap: var(--spacing-md);
        font-size: 0.75rem;
        color: var(--dark-text-muted);
    }
    
    .technical-metrics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: var(--spacing-lg);
        margin: var(--spacing-xl) 0;
    }
    
    .technical-metric {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-lg);
        padding: var(--spacing-lg);
        text-align: center;
        transition: all var(--transition-fast);
    }
    
    .technical-metric:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }
    
    .technical-metric-value {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: var(--spacing-xs);
        color: var(--primary-500);
    }
    
    .technical-metric-label {
        font-size: 0.875rem;
        color: var(--dark-text-muted);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: var(--spacing-xs);
    }
    
    .technical-metric-description {
        font-size: 0.75rem;
        color: var(--dark-text-muted);
        line-height: 1.4;
    }
    
    .code-quality-panel {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .quality-metrics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: var(--spacing-lg);
        margin: var(--spacing-lg) 0;
    }
    
    .quality-metric {
        text-align: center;
        padding: var(--spacing-md);
        background: var(--dark-background);
        border-radius: var(--radius-md);
        border: 1px solid var(--dark-border);
    }
    
    .quality-score {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: var(--spacing-xs);
    }
    
    .quality-score.excellent {
        color: var(--success-500);
    }
    
    .quality-score.good {
        color: var(--primary-500);
    }
    
    .quality-score.needs-improvement {
        color: var(--warning-500);
    }
    
    .quality-score.poor {
        color: var(--error-500);
    }
    
    .files-modified {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .file-item {
        display: flex;
        align-items: center;
        gap: var(--spacing-md);
        padding: var(--spacing-sm) var(--spacing-md);
        border-radius: var(--radius-md);
        margin-bottom: var(--spacing-sm);
        background: var(--dark-background);
        border: 1px solid var(--dark-border);
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 0.875rem;
    }
    
    .file-icon {
        color: var(--primary-500);
    }
    
    .file-path {
        flex: 1;
        color: var(--dark-text);
    }
    
    .file-changes {
        font-size: 0.75rem;
        color: var(--dark-text-muted);
    }
`;
%>

<%- include('base-layout', { 
    title, 
    subtitle, 
    headerIcon, 
    reportType, 
    generatedAt, 
    dateRange, 
    additionalStyles 
}) %>
<%- contentFor('body') %>
<div class="layout-main">
    <!-- Execution Overview -->
    <% 
    const task = data.task || {};
    const implementationPlan = data.implementationPlan || {};
    const batches = data.batches || [];
    const totalBatches = batches.length;
    const completedBatches = batches.filter(b => b.status === 'completed').length;
    const totalSubtasks = batches.reduce((sum, batch) => sum + (batch.subtasks?.length || 0), 0);
    const completedSubtasks = batches.reduce((sum, batch) => 
        sum + (batch.subtasks?.filter(st => st.status === 'completed').length || 0), 0);
    const overallProgress = totalSubtasks > 0 ? (completedSubtasks / totalSubtasks) * 100 : 0;
    %>
    
    <div class="execution-overview">
        <div class="executive-content">
            <h2 class="executive-title">⚙️ Implementation Execution Overview</h2>
            <p>Technical implementation analysis for <strong><%= task.name || 'Unknown Task' %></strong>. 
            Progress: <strong><%= completedSubtasks %>/<%= totalSubtasks %></strong> subtasks completed 
            across <strong><%= completedBatches %>/<%= totalBatches %></strong> batches.</p>
            
            <div class="execution-stats">
                <div class="execution-stat">
                    <div class="execution-stat-value"><%= overallProgress.toFixed(1) %>%</div>
                    <div class="execution-stat-label">Overall Progress</div>
                </div>
                <div class="execution-stat">
                    <div class="execution-stat-value"><%= totalBatches %></div>
                    <div class="execution-stat-label">Total Batches</div>
                </div>
                <div class="execution-stat">
                    <div class="execution-stat-value"><%= totalSubtasks %></div>
                    <div class="execution-stat-label">Total Subtasks</div>
                </div>
                <div class="execution-stat">
                    <div class="execution-stat-value"><%= completedSubtasks %></div>
                    <div class="execution-stat-label">Completed</div>
                </div>
                <% if (data.metrics?.estimatedCompletion) { %>
                <div class="execution-stat">
                    <div class="execution-stat-value"><%= data.metrics.estimatedCompletion %></div>
                    <div class="execution-stat-label">Est. Completion</div>
                </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Technical Metrics -->
    <div class="technical-metrics">
        <% 
        const codeQuality = data.metrics?.codeQuality || 85;
        const testCoverage = data.metrics?.testCoverage || 78;
        const complexity = data.metrics?.complexity || 'Medium';
        const performance = data.metrics?.performance || 92;
        %>
        
        <div class="technical-metric">
            <div class="technical-metric-value"><%= codeQuality %>%</div>
            <div class="technical-metric-label">Code Quality</div>
            <div class="technical-metric-description">
                Static analysis, linting, and code review scores
            </div>
        </div>
        
        <div class="technical-metric">
            <div class="technical-metric-value"><%= testCoverage %>%</div>
            <div class="technical-metric-label">Test Coverage</div>
            <div class="technical-metric-description">
                Unit, integration, and end-to-end test coverage
            </div>
        </div>
        
        <div class="technical-metric">
            <div class="technical-metric-value"><%= complexity %></div>
            <div class="technical-metric-label">Complexity</div>
            <div class="technical-metric-description">
                Cyclomatic complexity and maintainability index
            </div>
        </div>
        
        <div class="technical-metric">
            <div class="technical-metric-value"><%= performance %>%</div>
            <div class="technical-metric-label">Performance</div>
            <div class="technical-metric-description">
                Runtime performance and optimization metrics
            </div>
        </div>
    </div>

    <!-- Batch Implementation Progress -->
    <div class="analysis-panel">
        <div class="panel-header">
            <span class="panel-icon">📦</span>
            <h3 class="panel-title">Batch Implementation Progress</h3>
        </div>
        
        <div class="batch-grid">
            <% batches.forEach((batch, index) => { %>
                <% 
                const batchSubtasks = batch.subtasks || [];
                const batchCompleted = batchSubtasks.filter(st => st.status === 'completed').length;
                const batchTotal = batchSubtasks.length;
                const batchProgress = batchTotal > 0 ? (batchCompleted / batchTotal) * 100 : 0;
                %>
                
                <div class="batch-card <%= batch.status || 'pending' %>">
                    <div class="batch-header">
                        <h4 class="batch-title"><%= batch.title || `Batch ${index + 1}` %></h4>
                        <span class="batch-status <%= batch.status || 'pending' %>">
                            <%= (batch.status || 'pending').replace('-', ' ') %>
                        </span>
                    </div>
                    
                    <div class="batch-progress">
                        <div class="batch-progress-bar">
                            <div class="batch-progress-fill <%= batch.status || 'pending' %>" 
                                 style="width: <%= batchProgress %>%"></div>
                        </div>
                        <p><%= batchCompleted %>/<%= batchTotal %> subtasks completed (<%= batchProgress.toFixed(1) %>%)</p>
                    </div>
                    
                    <% if (batch.description) { %>
                        <p class="batch-description"><%= batch.description %></p>
                    <% } %>
                    
                    <% if (batchSubtasks.length > 0) { %>
                        <div class="subtask-list">
                            <% batchSubtasks.forEach(subtask => { %>
                                <div class="subtask-item <%= subtask.status || 'pending' %>">
                                    <div class="subtask-icon">
                                        <% if (subtask.status === 'completed') { %>✅
                                        <% } else if (subtask.status === 'in-progress') { %>🔄
                                        <% } else { %>⏳<% } %>
                                    </div>
                                    <div class="subtask-content">
                                        <div class="subtask-title"><%= subtask.name %></div>
                                        <% if (subtask.description) { %>
                                            <div class="subtask-description"><%= subtask.description %></div>
                                        <% } %>
                                        <div class="subtask-meta">
                                            <span>Status: <%= (subtask.status || 'pending').replace('-', ' ') %></span>
                                            <% if (subtask.assignedTo) { %>
                                                <span>• Assigned: <%= subtask.assignedTo %></span>
                                            <% } %>
                                            <% if (subtask.estimatedDuration) { %>
                                                <span>• Duration: <%= subtask.estimatedDuration %></span>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    <% } %>
                </div>
            <% }); %>
        </div>
    </div>

    <!-- Code Quality Analysis -->
    <div class="code-quality-panel">
        <div class="panel-header">
            <span class="panel-icon">🔍</span>
            <h3 class="panel-title">Code Quality Analysis</h3>
        </div>
        
        <div class="quality-metrics">
            <% 
            const qualityMetrics = data.qualityMetrics || {
                maintainability: 85,
                reliability: 90,
                security: 88,
                testability: 82,
                reusability: 87
            };
            
            function getQualityClass(score) {
                if (score >= 90) return 'excellent';
                if (score >= 80) return 'good';
                if (score >= 70) return 'needs-improvement';
                return 'poor';
            }
            %>
            
            <div class="quality-metric">
                <div class="quality-score <%= getQualityClass(qualityMetrics.maintainability) %>">
                    <%= qualityMetrics.maintainability %>%
                </div>
                <div class="quality-label">Maintainability</div>
            </div>
            
            <div class="quality-metric">
                <div class="quality-score <%= getQualityClass(qualityMetrics.reliability) %>">
                    <%= qualityMetrics.reliability %>%
                </div>
                <div class="quality-label">Reliability</div>
            </div>
            
            <div class="quality-metric">
                <div class="quality-score <%= getQualityClass(qualityMetrics.security) %>">
                    <%= qualityMetrics.security %>%
                </div>
                <div class="quality-label">Security</div>
            </div>
            
            <div class="quality-metric">
                <div class="quality-score <%= getQualityClass(qualityMetrics.testability) %>">
                    <%= qualityMetrics.testability %>%
                </div>
                <div class="quality-label">Testability</div>
            </div>
            
            <div class="quality-metric">
                <div class="quality-score <%= getQualityClass(qualityMetrics.reusability) %>">
                    <%= qualityMetrics.reusability %>%
                </div>
                <div class="quality-label">Reusability</div>
            </div>
        </div>
        
        <% if (data.qualityInsights && data.qualityInsights.length > 0) { %>
            <div class="quality-insights">
                <h4>Quality Insights</h4>
                <ul>
                    <% data.qualityInsights.forEach(insight => { %>
                        <li><%= insight %></li>
                    <% }); %>
                </ul>
            </div>
        <% } %>
    </div>

    <!-- Files Modified -->
    <% if (data.filesModified && data.filesModified.length > 0) { %>
    <div class="files-modified">
        <div class="panel-header">
            <span class="panel-icon">📁</span>
            <h3 class="panel-title">Files Modified</h3>
        </div>
        
        <div class="file-list">
            <% data.filesModified.forEach(file => { %>
                <div class="file-item">
                    <span class="file-icon">📄</span>
                    <span class="file-path"><%= file.path || file %></span>
                    <% if (file.changes) { %>
                        <span class="file-changes"><%= file.changes %></span>
                    <% } %>
                </div>
            <% }); %>
        </div>
    </div>
    <% } %>

    <!-- Implementation Insights -->
    <% if (data.implementationInsights && data.implementationInsights.length > 0) { %>
    <div class="analysis-panel">
        <div class="panel-header">
            <span class="panel-icon">💡</span>
            <h3 class="panel-title">Implementation Insights</h3>
        </div>
        <div class="insights">
            <ul>
                <% data.implementationInsights.forEach(insight => { %>
                    <li><%= insight %></li>
                <% }); %>
            </ul>
        </div>
    </div>
    <% } %>

    <!-- Technical Recommendations -->
    <% if (data.technicalRecommendations && data.technicalRecommendations.length > 0) { %>
    <div class="analysis-panel">
        <div class="panel-header">
            <span class="panel-icon">🔧</span>
            <h3 class="panel-title">Technical Recommendations</h3>
        </div>
        <div class="recommendations">
            <ul>
                <% data.technicalRecommendations.forEach(recommendation => { %>
                    <li><%= recommendation %></li>
                <% }); %>
            </ul>
        </div>
    </div>
    <% } %>
</div>
<%- contentFor('scripts') %>
<script>
    // Add any implementation-specific JavaScript here
    console.log('Implementation Execution Report loaded');
</script>