<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Workflow Analytics Report</title>
    
    <!-- Alpine.js -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    
    <style>
        .fade-in { animation: fadeIn 0.5s ease-in; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        .section-card { @apply bg-white rounded-xl shadow-lg p-6 mb-6; }
        .metric-card { @apply bg-gradient-to-br from-white to-gray-50 rounded-lg p-4 border border-gray-200; }
        .chart-container { @apply bg-white rounded-lg p-4 border border-gray-200; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div x-data="workflowAnalyticsApp()" x-init="loadData()" class="container mx-auto px-4 py-8">
        
        <!-- Header -->
        <div class="section-card">
            <div class="flex items-center justify-between mb-4">
                <h1 class="text-3xl font-bold text-gray-900">
                    <i class="fas fa-chart-line text-blue-600 mr-3"></i>
                    Workflow Analytics Report
                </h1>
                <div class="text-sm text-gray-500">
                    Generated: {{metadata.generatedAt}}
                </div>
            </div>
            
            <!-- Summary Stats -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div class="metric-card text-center">
                    <div class="text-3xl font-bold text-blue-600" x-text="data.summary.totalTasks"></div>
                    <div class="text-sm text-gray-600">Total Tasks</div>
                </div>
                <div class="metric-card text-center">
                    <div class="text-3xl font-bold text-green-600" x-text="data.summary.completedTasks"></div>
                    <div class="text-sm text-gray-600">Completed Tasks</div>
                </div>
                <div class="metric-card text-center">
                    <div class="text-3xl font-bold text-purple-600" x-text="data.summary.totalDelegations"></div>
                    <div class="text-sm text-gray-600">Total Delegations</div>
                </div>
                <div class="metric-card text-center">
                    <div class="text-3xl font-bold text-orange-600" x-text="data.summary.averageCompletionTime + 'h'"></div>
                    <div class="text-sm text-gray-600">Avg Completion Time</div>
                </div>
            </div>
        </div>

        <!-- Task Status Distribution -->
        <div class="section-card">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">
                <i class="fas fa-chart-pie text-indigo-600 mr-2"></i>
                Task Status Distribution
            </h3>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="chart-container">
                    <canvas id="statusChart" width="400" height="200"></canvas>
                </div>
                <div class="space-y-3">
                    <template x-for="statusItem in data.statusDistribution || []" :key="statusItem.status">
                        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="w-4 h-4 rounded-full" :style="'background-color: ' + statusItem.color"></div>
                                <span class="font-medium" x-text="statusItem.status"></span>
                            </div>
                            <div class="text-right">
                                <div class="font-bold" x-text="statusItem.count"></div>
                                <div class="text-sm text-gray-600" x-text="statusItem.percentage + '%'"></div>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        </div>

        <!-- Priority Distribution -->
        <div class="section-card">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">
                <i class="fas fa-exclamation-circle text-red-600 mr-2"></i>
                Priority Distribution
            </h3>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="chart-container">
                    <canvas id="priorityChart" width="400" height="200"></canvas>
                </div>
                <div class="space-y-3">
                    <template x-for="priorityItem in data.priorityDistribution || []" :key="priorityItem.priority">
                        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div class="flex items-center space-x-3">
                                <div class="w-4 h-4 rounded-full" :style="'background-color: ' + priorityItem.color"></div>
                                <span class="font-medium" x-text="priorityItem.priority"></span>
                            </div>
                            <div class="text-right">
                                <div class="font-bold" x-text="priorityItem.count"></div>
                                <div class="text-sm text-gray-600" x-text="priorityItem.percentage + '%'"></div>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        </div>

        <!-- Role Performance -->
        <div class="section-card">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">
                <i class="fas fa-users text-green-600 mr-2"></i>
                Role Performance
            </h3>
            <div class="chart-container mb-6">
                <canvas id="rolePerformanceChart" width="400" height="200"></canvas>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <template x-for="role in data.roleMetrics || []" :key="role.role">
                    <div class="metric-card">
                        <div class="flex items-center justify-between mb-3">
                            <h4 class="font-semibold text-gray-800" x-text="role.role"></h4>
                            <i class="fas fa-user-tie text-gray-500"></i>
                        </div>
                        <div class="space-y-2">
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Tasks Handled:</span>
                                <span class="font-medium" x-text="role.tasksHandled"></span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Avg Duration:</span>
                                <span class="font-medium" x-text="role.averageDuration + 'h'"></span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Success Rate:</span>
                                <span class="font-medium"
                                      :class="role.successRate > 80 ? 'text-green-600' : 'text-yellow-600'"
                                      x-text="role.successRate + '%'"></span>
                            </div>
                            <div class="flex justify-between text-sm">
                                <span class="text-gray-600">Efficiency:</span>
                                <span class="font-medium"
                                      :class="role.efficiency > 90 ? 'text-green-600' : 'text-orange-600'"
                                      x-text="role.efficiency + '%'"></span>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>

        <!-- Delegation Flow Analysis -->
        <div x-show="data.delegationFlow" class="section-card">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">
                <i class="fas fa-exchange-alt text-purple-600 mr-2"></i>
                Delegation Flow Analysis
            </h3>
            <div class="chart-container mb-6">
                <canvas id="delegationFlowChart" width="400" height="300"></canvas>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h4 class="font-medium text-gray-700 mb-3">Most Common Flows</h4>
                    <div class="space-y-2">
                        <template x-for="flowItem in data.delegationFlow?.commonFlows || []" :key="flowItem.flow">
                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                <span class="text-sm font-medium" x-text="flowItem.flow"></span>
                                <span class="text-sm text-gray-600" x-text="flowItem.count + ' times'"></span>
                            </div>
                        </template>
                    </div>
                </div>
                <div>
                    <h4 class="font-medium text-gray-700 mb-3">Delegation Metrics</h4>
                    <div class="space-y-3">
                        <div class="flex justify-between p-3 bg-blue-50 rounded-lg">
                            <span class="text-sm font-medium">Average Handoffs:</span>
                            <span class="text-sm font-bold text-blue-600" x-text="data.delegationFlow?.averageHandoffs"></span>
                        </div>
                        <div class="flex justify-between p-3 bg-green-50 rounded-lg">
                            <span class="text-sm font-medium">Direct Completions:</span>
                            <span class="text-sm font-bold text-green-600" x-text="data.delegationFlow?.directCompletions + '%'"></span>
                        </div>
                        <div class="flex justify-between p-3 bg-yellow-50 rounded-lg">
                            <span class="text-sm font-medium">Escalations:</span>
                            <span class="text-sm font-bold text-yellow-600" x-text="data.delegationFlow?.escalationRate + '%'"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Performance Trends -->
        <div x-show="data.performanceTrends" class="section-card">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">
                <i class="fas fa-trending-up text-blue-600 mr-2"></i>
                Performance Trends
            </h3>
            <div class="chart-container">
                <canvas id="trendsChart" width="400" height="200"></canvas>
            </div>
        </div>

        <!-- Task Analysis -->
        <div x-show="data.tasks?.length > 0" class="section-card">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">
                <i class="fas fa-list text-gray-600 mr-2"></i>
                Recent Tasks Analysis
            </h3>
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Owner</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Delegations</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        <template x-for="task in data.tasks || []" :key="task.id">
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900" x-text="task.name"></div>
                                    <div x-show="task.taskSlug" class="text-xs text-gray-500" x-text="task.taskSlug"></div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="px-2 py-1 rounded-full text-xs font-medium"
                                          :class="{
                                            'bg-green-100 text-green-800': task.status === 'completed',
                                            'bg-blue-100 text-blue-800': task.status === 'in-progress',
                                            'bg-gray-100 text-gray-800': task.status === 'not-started',
                                            'bg-yellow-100 text-yellow-800': task.status === 'needs-review'
                                          }"
                                          x-text="task.status">
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" x-text="task.priority"></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" x-text="task.owner"></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" x-text="task.duration + 'h'"></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" x-text="task.delegationCount"></td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>
        </div>

    </div>

    <!-- Safely embed JSON data -->
    <script type="application/json" id="workflow-analytics-data">
        {{{jsonData}}}
    </script>

    <script>
        function workflowAnalyticsApp() {
            return {
                data: {},
                
                loadData() {
                    try {
                        const dataScript = document.getElementById('workflow-analytics-data');
                        if (dataScript) {
                            this.data = JSON.parse(dataScript.textContent);
                        }
                    } catch (error) {
                        console.error('Failed to load workflow analytics data:', error);
                    }
                    
                    this.$nextTick(() => {
                        this.initCharts();
                    });
                },
                
                initCharts() {
                    this.createStatusChart();
                    this.createPriorityChart();
                    this.createRolePerformanceChart();
                    if (this.data.delegationFlow) {
                        this.createDelegationFlowChart();
                    }
                    if (this.data.performanceTrends) {
                        this.createTrendsChart();
                    }
                },
                
                createStatusChart() {
                    const ctx = document.getElementById('statusChart');
                    if (!ctx || !this.data.statusDistribution) return;
                    
                    new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            labels: this.data.statusDistribution.map(item => item.status),
                            datasets: [{
                                data: this.data.statusDistribution.map(item => item.count),
                                backgroundColor: this.data.statusDistribution.map(item => item.color)
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false }
                            }
                        }
                    });
                },
                
                createPriorityChart() {
                    const ctx = document.getElementById('priorityChart');
                    if (!ctx || !this.data.priorityDistribution) return;
                    
                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: this.data.priorityDistribution.map(item => item.priority),
                            datasets: [{
                                data: this.data.priorityDistribution.map(item => item.count),
                                backgroundColor: this.data.priorityDistribution.map(item => item.color)
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false }
                            },
                            scales: {
                                y: { beginAtZero: true }
                            }
                        }
                    });
                },
                
                createRolePerformanceChart() {
                    const ctx = document.getElementById('rolePerformanceChart');
                    if (!ctx || !this.data.roleMetrics) return;
                    
                    new Chart(ctx, {
                        type: 'radar',
                        data: {
                            labels: ['Tasks Handled', 'Success Rate', 'Efficiency', 'Avg Duration'],
                            datasets: this.data.roleMetrics.map((role, index) => ({
                                label: role.role,
                                data: [
                                    role.tasksHandled,
                                    role.successRate,
                                    role.efficiency,
                                    100 - (role.averageDuration * 10) // Invert duration for radar
                                ],
                                borderColor: `hsl(${index * 60}, 70%, 50%)`,
                                backgroundColor: `hsla(${index * 60}, 70%, 50%, 0.2)`
                            }))
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                r: {
                                    beginAtZero: true,
                                    max: 100
                                }
                            }
                        }
                    });
                },
                
                createDelegationFlowChart() {
                    const ctx = document.getElementById('delegationFlowChart');
                    if (!ctx) return;
                    
                    // Create a sankey-style visualization using Chart.js
                    // This is a simplified version - for a real sankey, you'd use a specialized library
                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: this.data.delegationFlow.commonFlows.map(item => item.flow),
                            datasets: [{
                                label: 'Flow Count',
                                data: this.data.delegationFlow.commonFlows.map(item => item.count),
                                backgroundColor: 'rgba(147, 51, 234, 0.7)'
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: { display: false }
                            },
                            scales: {
                                y: { beginAtZero: true }
                            }
                        }
                    });
                },
                
                createTrendsChart() {
                    const ctx = document.getElementById('trendsChart');
                    if (!ctx) return;
                    
                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: this.data.performanceTrends.labels,
                            datasets: [{
                                label: 'Completion Rate',
                                data: this.data.performanceTrends.completionRate,
                                borderColor: 'rgb(59, 130, 246)',
                                tension: 0.1
                            }, {
                                label: 'Efficiency',
                                data: this.data.performanceTrends.efficiency,
                                borderColor: 'rgb(16, 185, 129)',
                                tension: 0.1
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: { beginAtZero: true, max: 100 }
                            }
                        }
                    });
                }
            }
        }
    </script>
</body>
</html> 