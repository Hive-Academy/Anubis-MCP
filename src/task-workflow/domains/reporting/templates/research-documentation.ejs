<%
// Template Variables
const title = "📚 Research & Documentation Analysis";
const subtitle = "Knowledge Discovery & Documentation Quality";
const headerIcon = "📚";
const reportType = "Research Documentation";
const generatedAt = data.generatedAt || new Date();
const dateRange = data.dateRange;

// Additional Styles for Research Documentation Report
const additionalStyles = `
    /* Research Documentation Specific Styles */
    .research-overview {
        background: linear-gradient(135deg, var(--info-500) 0%, var(--primary-500) 100%);
        border-radius: var(--radius-xl);
        padding: var(--spacing-2xl);
        margin-bottom: var(--spacing-xl);
        color: white;
        position: relative;
        overflow: hidden;
    }
    
    .research-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: var(--spacing-lg);
        margin-top: var(--spacing-lg);
    }
    
    .research-stat {
        text-align: center;
        background: rgba(255, 255, 255, 0.1);
        border-radius: var(--radius-lg);
        padding: var(--spacing-lg);
        backdrop-filter: blur(10px);
    }
    
    .research-stat-value {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: var(--spacing-xs);
    }
    
    .research-stat-label {
        font-size: 0.875rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .research-quality {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: var(--spacing-lg);
        margin: var(--spacing-xl) 0;
    }
    
    .quality-metric {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-lg);
        padding: var(--spacing-lg);
        text-align: center;
        position: relative;
        overflow: hidden;
    }
    
    .quality-metric::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--primary-500);
    }
    
    .quality-metric.excellent::before {
        background: var(--success-500);
    }
    
    .quality-metric.good::before {
        background: var(--primary-500);
    }
    
    .quality-metric.needs-improvement::before {
        background: var(--warning-500);
    }
    
    .quality-metric.poor::before {
        background: var(--error-500);
    }
    
    .quality-score {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: var(--spacing-xs);
    }
    
    .quality-score.excellent {
        color: var(--success-500);
    }
    
    .quality-score.good {
        color: var(--primary-500);
    }
    
    .quality-score.needs-improvement {
        color: var(--warning-500);
    }
    
    .quality-score.poor {
        color: var(--error-500);
    }
    
    .quality-label {
        font-size: 0.875rem;
        color: var(--dark-text-muted);
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-bottom: var(--spacing-xs);
    }
    
    .quality-description {
        font-size: 0.75rem;
        color: var(--dark-text-muted);
        line-height: 1.4;
    }
    
    .research-findings {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .finding-item {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-md);
        padding: var(--spacing-lg);
        border-radius: var(--radius-md);
        margin-bottom: var(--spacing-md);
        background: var(--dark-background);
        border: 1px solid var(--dark-border);
        transition: all var(--transition-fast);
    }
    
    .finding-item:hover {
        background: var(--dark-surface);
        transform: translateY(-1px);
    }
    
    .finding-icon {
        font-size: 1.5rem;
        width: 40px;
        text-align: center;
        margin-top: var(--spacing-xs);
    }
    
    .finding-content {
        flex: 1;
    }
    
    .finding-title {
        font-weight: 600;
        color: var(--dark-text);
        margin-bottom: var(--spacing-xs);
    }
    
    .finding-description {
        color: var(--dark-text-muted);
        line-height: 1.5;
        margin-bottom: var(--spacing-sm);
    }
    
    .finding-source {
        font-size: 0.875rem;
        color: var(--dark-text-muted);
        background: var(--dark-surface);
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        border-left: 3px solid var(--info-500);
    }
    
    .documentation-analysis {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .doc-category {
        background: var(--dark-background);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-lg);
        padding: var(--spacing-lg);
        margin-bottom: var(--spacing-lg);
    }
    
    .doc-category-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: var(--spacing-md);
        padding-bottom: var(--spacing-md);
        border-bottom: 2px solid var(--dark-border);
    }
    
    .doc-category-title {
        display: flex;
        align-items: center;
        gap: var(--spacing-md);
        font-weight: 600;
        color: var(--dark-text);
    }
    
    .doc-category-icon {
        font-size: 1.5rem;
    }
    
    .doc-category-score {
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        font-size: 0.875rem;
        font-weight: 600;
    }
    
    .doc-category-score.excellent {
        background: var(--success-500);
        color: white;
    }
    
    .doc-category-score.good {
        background: var(--primary-500);
        color: white;
    }
    
    .doc-category-score.needs-improvement {
        background: var(--warning-500);
        color: white;
    }
    
    .doc-category-score.poor {
        background: var(--error-500);
        color: white;
    }
    
    .doc-items {
        display: grid;
        gap: var(--spacing-sm);
    }
    
    .doc-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: var(--spacing-sm);
        border-radius: var(--radius-sm);
        background: var(--dark-surface);
    }
    
    .doc-item-name {
        color: var(--dark-text);
        font-weight: 500;
    }
    
    .doc-item-status {
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .doc-item-status.complete {
        background: var(--success-500);
        color: white;
    }
    
    .doc-item-status.partial {
        background: var(--warning-500);
        color: white;
    }
    
    .doc-item-status.missing {
        background: var(--error-500);
        color: white;
    }
    
    .doc-item-status.outdated {
        background: var(--dark-border);
        color: var(--dark-text-muted);
    }
    
    .knowledge-gaps {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .gap-item {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-md);
        padding: var(--spacing-md);
        border-radius: var(--radius-md);
        margin-bottom: var(--spacing-md);
        background: var(--dark-background);
        border: 1px solid var(--dark-border);
    }
    
    .gap-priority {
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        min-width: 80px;
        text-align: center;
    }
    
    .gap-priority.critical {
        background: var(--error-500);
        color: white;
    }
    
    .gap-priority.high {
        background: var(--warning-500);
        color: white;
    }
    
    .gap-priority.medium {
        background: var(--info-500);
        color: white;
    }
    
    .gap-priority.low {
        background: var(--dark-border);
        color: var(--dark-text-muted);
    }
    
    .gap-content {
        flex: 1;
    }
    
    .gap-title {
        font-weight: 600;
        color: var(--dark-text);
        margin-bottom: var(--spacing-xs);
    }
    
    .gap-description {
        color: var(--dark-text-muted);
        line-height: 1.5;
        margin-bottom: var(--spacing-sm);
    }
    
    .gap-impact {
        font-size: 0.875rem;
        color: var(--dark-text-muted);
        background: var(--dark-surface);
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        border-left: 3px solid var(--warning-500);
    }
    
    .recommendations {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .recommendation-item {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-md);
        padding: var(--spacing-md);
        border-radius: var(--radius-md);
        margin-bottom: var(--spacing-md);
        background: var(--dark-background);
        border: 1px solid var(--dark-border);
    }
    
    .recommendation-type {
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        min-width: 100px;
        text-align: center;
    }
    
    .recommendation-type.research {
        background: var(--info-500);
        color: white;
    }
    
    .recommendation-type.documentation {
        background: var(--primary-500);
        color: white;
    }
    
    .recommendation-type.process {
        background: var(--warning-500);
        color: white;
    }
    
    .recommendation-type.tooling {
        background: var(--success-500);
        color: white;
    }
    
    .recommendation-content {
        flex: 1;
        color: var(--dark-text);
        line-height: 1.5;
    }
    
    .sources-references {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .source-item {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-md);
        padding: var(--spacing-md);
        border-radius: var(--radius-md);
        margin-bottom: var(--spacing-md);
        background: var(--dark-background);
        border: 1px solid var(--dark-border);
        transition: all var(--transition-fast);
    }
    
    .source-item:hover {
        background: var(--dark-surface);
    }
    
    .source-type {
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        min-width: 80px;
        text-align: center;
    }
    
    .source-type.web {
        background: var(--info-500);
        color: white;
    }
    
    .source-type.documentation {
        background: var(--primary-500);
        color: white;
    }
    
    .source-type.code {
        background: var(--success-500);
        color: white;
    }
    
    .source-type.expert {
        background: var(--warning-500);
        color: white;
    }
    
    .source-content {
        flex: 1;
    }
    
    .source-title {
        font-weight: 600;
        color: var(--dark-text);
        margin-bottom: var(--spacing-xs);
    }
    
    .source-description {
        color: var(--dark-text-muted);
        line-height: 1.5;
        margin-bottom: var(--spacing-sm);
    }
    
    .source-url {
        font-size: 0.875rem;
        color: var(--info-500);
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        word-break: break-all;
    }
`;
%>

<%- include('base-layout', { 
    title, 
    subtitle, 
    headerIcon, 
    reportType, 
    generatedAt, 
    dateRange, 
    additionalStyles 
}) %>
<%- contentFor('body') %>
<div class="layout-main">
    <!-- Research Overview -->
    <% 
    const task = data.task || {};
    const researchReport = data.researchReport || {};
    const researchStats = data.researchStats || {
        sourcesAnalyzed: 15,
        findingsDocumented: 8,
        recommendationsMade: 5,
        hoursSpent: 12
    };
    %>
    
    <div class="research-overview">
        <div class="overview-content">
            <h2>Research & Documentation Analysis</h2>
            <p>Comprehensive analysis of research quality, documentation completeness, and knowledge management effectiveness for task implementation.</p>
        </div>
        
        <div class="research-stats">
            <div class="research-stat">
                <div class="research-stat-value"><%= researchStats.sourcesAnalyzed %></div>
                <div class="research-stat-label">Sources Analyzed</div>
            </div>
            <div class="research-stat">
                <div class="research-stat-value"><%= researchStats.findingsDocumented %></div>
                <div class="research-stat-label">Findings Documented</div>
            </div>
            <div class="research-stat">
                <div class="research-stat-value"><%= researchStats.recommendationsMade %></div>
                <div class="research-stat-label">Recommendations</div>
            </div>
            <div class="research-stat">
                <div class="research-stat-value"><%= researchStats.hoursSpent %></div>
                <div class="research-stat-label">Hours Invested</div>
            </div>
        </div>
    </div>

    <!-- Research Quality Metrics -->
    <div class="research-quality">
        <% 
        const qualityMetrics = data.qualityMetrics || {
            researchDepth: { score: 85, label: 'Research Depth' },
            sourceReliability: { score: 92, label: 'Source Reliability' },
            documentationQuality: { score: 78, label: 'Documentation Quality' },
            knowledgeTransfer: { score: 83, label: 'Knowledge Transfer' },
            findingsClarity: { score: 88, label: 'Findings Clarity' },
            actionableInsights: { score: 90, label: 'Actionable Insights' }
        };
        
        function getQualityClass(score) {
            if (score >= 90) return 'excellent';
            if (score >= 80) return 'good';
            if (score >= 70) return 'needs-improvement';
            return 'poor';
        }
        
        function getQualityDescription(metric, score) {
            const descriptions = {
                researchDepth: 'Thoroughness and comprehensiveness of research conducted',
                sourceReliability: 'Quality and credibility of information sources used',
                documentationQuality: 'Clarity, structure, and completeness of documentation',
                knowledgeTransfer: 'Effectiveness of knowledge sharing and communication',
                findingsClarity: 'Clarity and understandability of research findings',
                actionableInsights: 'Practical value and applicability of insights generated'
            };
            return descriptions[metric] || 'Quality assessment metric';
        }
        %>
        
        <% Object.entries(qualityMetrics).forEach(([metric, data]) => { %>
            <div class="quality-metric <%= getQualityClass(data.score) %>">
                <div class="quality-score <%= getQualityClass(data.score) %>"><%= data.score %>%</div>
                <div class="quality-label"><%= data.label %></div>
                <div class="quality-description">
                    <%= getQualityDescription(metric, data.score) %>
                </div>
            </div>
        <% }); %>
    </div>

    <!-- Research Findings -->
    <div class="research-findings">
        <div class="panel-header">
            <span class="panel-icon">🔍</span>
            <h3 class="panel-title">Key Research Findings</h3>
        </div>
        
        <% 
        const findings = data.findings || [
            {
                icon: '💡',
                title: 'Technology Stack Optimization',
                description: 'Analysis revealed that React Query provides superior state management capabilities compared to current Redux implementation, with 40% less boilerplate code.',
                source: 'Official React Query documentation and performance benchmarks'
            },
            {
                icon: '🔧',
                title: 'Architecture Pattern Recommendation',
                description: 'Microservices architecture with API Gateway pattern recommended for scalability, based on current system load patterns and future growth projections.',
                source: 'AWS Well-Architected Framework and system performance analysis'
            },
            {
                icon: '📊',
                title: 'Performance Optimization Opportunities',
                description: 'Database query optimization and caching strategy implementation could improve response times by up to 60% based on profiling results.',
                source: 'Performance profiling tools and database analysis'
            },
            {
                icon: '🛡️',
                title: 'Security Best Practices',
                description: 'Implementation of OAuth 2.0 with PKCE and JWT token rotation recommended to enhance security posture and meet compliance requirements.',
                source: 'OWASP Security Guidelines and industry security standards'
            },
            {
                icon: '🎯',
                title: 'User Experience Insights',
                description: 'User research indicates 85% preference for progressive disclosure in complex forms, supporting proposed UI/UX design direction.',
                source: 'User interviews and usability testing results'
            }
        ];
        %>
        
        <% findings.forEach(finding => { %>
            <div class="finding-item">
                <div class="finding-icon"><%= finding.icon %></div>
                <div class="finding-content">
                    <div class="finding-title"><%= finding.title %></div>
                    <div class="finding-description"><%= finding.description %></div>
                    <div class="finding-source">
                        <strong>Source:</strong> <%= finding.source %>
                    </div>
                </div>
            </div>
        <% }); %>
    </div>

    <!-- Documentation Analysis -->
    <div class="documentation-analysis">
        <div class="panel-header">
            <span class="panel-icon">📋</span>
            <h3 class="panel-title">Documentation Analysis</h3>
        </div>
        
        <% 
        const docCategories = data.docCategories || [
            {
                title: 'Technical Documentation',
                icon: '⚙️',
                score: 85,
                items: [
                    { name: 'API Documentation', status: 'complete' },
                    { name: 'Architecture Diagrams', status: 'complete' },
                    { name: 'Database Schema', status: 'partial' },
                    { name: 'Deployment Guide', status: 'complete' },
                    { name: 'Configuration Reference', status: 'outdated' }
                ]
            },
            {
                title: 'User Documentation',
                icon: '👤',
                score: 72,
                items: [
                    { name: 'User Manual', status: 'partial' },
                    { name: 'Getting Started Guide', status: 'complete' },
                    { name: 'FAQ Section', status: 'missing' },
                    { name: 'Video Tutorials', status: 'missing' },
                    { name: 'Troubleshooting Guide', status: 'partial' }
                ]
            },
            {
                title: 'Developer Documentation',
                icon: '💻',
                score: 90,
                items: [
                    { name: 'Code Style Guide', status: 'complete' },
                    { name: 'Contributing Guidelines', status: 'complete' },
                    { name: 'Testing Documentation', status: 'complete' },
                    { name: 'Code Examples', status: 'complete' },
                    { name: 'Development Setup', status: 'complete' }
                ]
            },
            {
                title: 'Process Documentation',
                icon: '📋',
                score: 68,
                items: [
                    { name: 'Workflow Documentation', status: 'partial' },
                    { name: 'Release Process', status: 'complete' },
                    { name: 'Incident Response', status: 'missing' },
                    { name: 'Change Management', status: 'outdated' },
                    { name: 'Quality Assurance', status: 'partial' }
                ]
            }
        ];
        
        function getScoreClass(score) {
            if (score >= 90) return 'excellent';
            if (score >= 80) return 'good';
            if (score >= 70) return 'needs-improvement';
            return 'poor';
        }
        %>
        
        <% docCategories.forEach(category => { %>
            <div class="doc-category">
                <div class="doc-category-header">
                    <div class="doc-category-title">
                        <span class="doc-category-icon"><%= category.icon %></span>
                        <span><%= category.title %></span>
                    </div>
                    <div class="doc-category-score <%= getScoreClass(category.score) %>">
                        <%= category.score %>%
                    </div>
                </div>
                
                <div class="doc-items">
                    <% category.items.forEach(item => { %>
                        <div class="doc-item">
                            <div class="doc-item-name"><%= item.name %></div>
                            <div class="doc-item-status <%= item.status %>"><%= item.status %></div>
                        </div>
                    <% }); %>
                </div>
            </div>
        <% }); %>
    </div>

    <!-- Knowledge Gaps -->
    <div class="knowledge-gaps">
        <div class="panel-header">
            <span class="panel-icon">🔍</span>
            <h3 class="panel-title">Identified Knowledge Gaps</h3>
        </div>
        
        <% 
        const knowledgeGaps = data.knowledgeGaps || [
            {
                priority: 'critical',
                title: 'Scalability Architecture Patterns',
                description: 'Limited understanding of microservices communication patterns and distributed system design principles for high-scale applications.',
                impact: 'Could lead to architectural decisions that don\'t scale beyond current user base'
            },
            {
                priority: 'high',
                title: 'Advanced Security Implementations',
                description: 'Gap in knowledge of advanced authentication flows, zero-trust security models, and threat modeling methodologies.',
                impact: 'Potential security vulnerabilities in authentication and authorization systems'
            },
            {
                priority: 'medium',
                title: 'Performance Optimization Techniques',
                description: 'Insufficient knowledge of advanced caching strategies, database optimization, and frontend performance monitoring.',
                impact: 'Suboptimal performance characteristics and user experience degradation'
            },
            {
                priority: 'medium',
                title: 'Modern Testing Strategies',
                description: 'Limited experience with advanced testing patterns like contract testing, chaos engineering, and property-based testing.',
                impact: 'Reduced confidence in system reliability and potential production issues'
            },
            {
                priority: 'low',
                title: 'DevOps and Infrastructure',
                description: 'Basic understanding of containerization, orchestration, and infrastructure as code principles.',
                impact: 'Manual deployment processes and potential infrastructure inconsistencies'
            }
        ];
        %>
        
        <% knowledgeGaps.forEach(gap => { %>
            <div class="gap-item">
                <div class="gap-priority <%= gap.priority %>"><%= gap.priority %></div>
                <div class="gap-content">
                    <div class="gap-title"><%= gap.title %></div>
                    <div class="gap-description"><%= gap.description %></div>
                    <div class="gap-impact">
                        <strong>Impact:</strong> <%= gap.impact %>
                    </div>
                </div>
            </div>
        <% }); %>
    </div>

    <!-- Recommendations -->
    <div class="recommendations">
        <div class="panel-header">
            <span class="panel-icon">💡</span>
            <h3 class="panel-title">Research & Documentation Recommendations</h3>
        </div>
        
        <% 
        const recommendations = data.recommendations || [
            {
                type: 'research',
                text: 'Conduct deep-dive research into microservices architecture patterns, focusing on service mesh technologies and distributed tracing for improved system observability.'
            },
            {
                type: 'documentation',
                text: 'Create comprehensive API documentation using OpenAPI 3.0 specification with interactive examples and code samples for better developer experience.'
            },
            {
                type: 'process',
                text: 'Implement knowledge sharing sessions and technical documentation reviews as part of the development workflow to ensure continuous knowledge transfer.'
            },
            {
                type: 'tooling',
                text: 'Adopt documentation-as-code approach using tools like GitBook or Notion for collaborative documentation that stays synchronized with codebase changes.'
            },
            {
                type: 'research',
                text: 'Establish research methodology framework with standardized templates for technology evaluation, proof-of-concept documentation, and decision records.'
            },
            {
                type: 'documentation',
                text: 'Develop interactive tutorials and guided walkthroughs for complex features to improve user onboarding and reduce support overhead.'
            }
        ];
        %>
        
        <% recommendations.forEach(recommendation => { %>
            <div class="recommendation-item">
                <div class="recommendation-type <%= recommendation.type %>">
                    <%= recommendation.type %>
                </div>
                <div class="recommendation-content">
                    <%= recommendation.text %>
                </div>
            </div>
        <% }); %>
    </div>

    <!-- Sources & References -->
    <div class="sources-references">
        <div class="panel-header">
            <span class="panel-icon">📚</span>
            <h3 class="panel-title">Sources & References</h3>
        </div>
        
        <% 
        const sources = data.sources || [
            {
                type: 'web',
                title: 'React Query Official Documentation',
                description: 'Comprehensive guide to React Query features, best practices, and performance optimization techniques.',
                url: 'https://tanstack.com/query/latest'
            },
            {
                type: 'documentation',
                title: 'AWS Well-Architected Framework',
                description: 'Best practices for building secure, high-performing, resilient, and efficient infrastructure for applications.',
                url: 'https://aws.amazon.com/architecture/well-architected/'
            },
            {
                type: 'web',
                title: 'OWASP Security Guidelines',
                description: 'Industry-standard security practices and vulnerability prevention strategies for web applications.',
                url: 'https://owasp.org/www-project-top-ten/'
            },
            {
                type: 'code',
                title: 'Internal Codebase Analysis',
                description: 'Analysis of existing code patterns, architecture decisions, and performance characteristics.',
                url: 'Internal repository analysis'
            },
            {
                type: 'expert',
                title: 'Technical Architecture Review',
                description: 'Consultation with senior architects on scalability patterns and technology selection criteria.',
                url: 'Internal expert consultation'
            },
            {
                type: 'web',
                title: 'Performance Monitoring Best Practices',
                description: 'Industry standards for application performance monitoring and optimization strategies.',
                url: 'https://web.dev/performance/'
            }
        ];
        %>
        
        <% sources.forEach(source => { %>
            <div class="source-item">
                <div class="source-type <%= source.type %>"><%= source.type %></div>
                <div class="source-content">
                    <div class="source-title"><%= source.title %></div>
                    <div class="source-description"><%= source.description %></div>
                    <div class="source-url"><%= source.url %></div>
                </div>
            </div>
        <% }); %>
    </div>

    <!-- Research Summary -->
    <% if (researchReport.summary || researchReport.recommendations) { %>
    <div class="analysis-panel">
        <div class="panel-header">
            <span class="panel-icon">📋</span>
            <h3 class="panel-title">Research Summary</h3>
        </div>
        
        <% if (researchReport.summary) { %>
            <div class="summary-section">
                <h4>📊 Executive Summary</h4>
                <p><%= researchReport.summary %></p>
            </div>
        <% } %>
        
        <% if (researchReport.recommendations) { %>
            <div class="summary-section">
                <h4>🎯 Key Recommendations</h4>
                <p><%= researchReport.recommendations %></p>
            </div>
        <% } %>
        
        <% if (researchReport.findings) { %>
            <div class="summary-section">
                <h4>🔍 Detailed Findings</h4>
                <p><%= researchReport.findings %></p>
            </div>
        <% } %>
    </div>
    <% } %>
</div>
<%- contentFor('scripts') %>
<script>
    // Add any research documentation specific JavaScript here
    console.log('Research Documentation Report loaded');
</script>