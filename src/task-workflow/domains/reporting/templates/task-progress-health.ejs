<%
// Template Variables
const title = "📈 Task Progress & Health Analysis";
const subtitle = "Individual Task Performance Deep Dive";
const headerIcon = "📈";
const reportType = "Task Progress Health";
const generatedAt = data.generatedAt || new Date();
const dateRange = data.dateRange;

// Additional Styles for Task Progress Health Report
const additionalStyles = `
    /* Task Progress Health Specific Styles */
    .health-overview {
        background: linear-gradient(135deg, var(--success-500) 0%, var(--primary-500) 100%);
        border-radius: var(--radius-xl);
        padding: var(--spacing-2xl);
        margin-bottom: var(--spacing-xl);
        color: white;
        position: relative;
        overflow: hidden;
    }
    
    .health-overview.warning {
        background: linear-gradient(135deg, var(--warning-500) 0%, var(--warning-600) 100%);
    }
    
    .health-overview.critical {
        background: linear-gradient(135deg, var(--error-500) 0%, var(--error-600) 100%);
    }
    
    .health-score {
        display: flex;
        align-items: center;
        gap: var(--spacing-lg);
        margin-bottom: var(--spacing-lg);
    }
    
    .health-score-value {
        font-size: 4rem;
        font-weight: 700;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }
    
    .health-score-details {
        flex: 1;
    }
    
    .health-score-label {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: var(--spacing-xs);
    }
    
    .health-score-description {
        opacity: 0.9;
        line-height: 1.5;
    }
    
    .progress-timeline {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .timeline-header {
        display: flex;
        align-items: center;
        gap: var(--spacing-md);
        margin-bottom: var(--spacing-lg);
        padding-bottom: var(--spacing-md);
        border-bottom: 2px solid var(--dark-border);
    }
    
    .timeline-item {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-lg);
        padding: var(--spacing-lg);
        border-left: 3px solid var(--dark-border);
        margin-left: var(--spacing-lg);
        position: relative;
    }
    
    .timeline-item.completed {
        border-left-color: var(--success-500);
    }
    
    .timeline-item.in-progress {
        border-left-color: var(--primary-500);
    }
    
    .timeline-item.pending {
        border-left-color: var(--dark-border);
    }
    
    .timeline-item::before {
        content: '';
        position: absolute;
        left: -8px;
        top: var(--spacing-lg);
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: var(--dark-border);
    }
    
    .timeline-item.completed::before {
        background: var(--success-500);
    }
    
    .timeline-item.in-progress::before {
        background: var(--primary-500);
    }
    
    .timeline-icon {
        font-size: 1.5rem;
        width: 40px;
        text-align: center;
    }
    
    .timeline-content {
        flex: 1;
    }
    
    .timeline-title {
        font-weight: 600;
        color: var(--dark-text);
        margin-bottom: var(--spacing-xs);
    }
    
    .timeline-description {
        color: var(--dark-text-muted);
        line-height: 1.5;
        margin-bottom: var(--spacing-sm);
    }
    
    .timeline-meta {
        display: flex;
        gap: var(--spacing-md);
        font-size: 0.875rem;
        color: var(--dark-text-muted);
    }
    
    .health-metrics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: var(--spacing-lg);
        margin: var(--spacing-xl) 0;
    }
    
    .health-metric {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-lg);
        padding: var(--spacing-lg);
        text-align: center;
        transition: all var(--transition-fast);
    }
    
    .health-metric:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }
    
    .health-metric-value {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: var(--spacing-xs);
    }
    
    .health-metric-value.good {
        color: var(--success-500);
    }
    
    .health-metric-value.warning {
        color: var(--warning-500);
    }
    
    .health-metric-value.critical {
        color: var(--error-500);
    }
    
    .health-metric-label {
        font-size: 0.875rem;
        color: var(--dark-text-muted);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .health-metric-description {
        font-size: 0.75rem;
        color: var(--dark-text-muted);
        margin-top: var(--spacing-xs);
        line-height: 1.4;
    }
    
    .bottleneck-analysis {
        background: var(--dark-surface);
        border: 1px solid var(--dark-border);
        border-radius: var(--radius-xl);
        padding: var(--spacing-xl);
        margin: var(--spacing-xl) 0;
    }
    
    .bottleneck-item {
        display: flex;
        align-items: flex-start;
        gap: var(--spacing-md);
        padding: var(--spacing-md);
        border-radius: var(--radius-md);
        margin-bottom: var(--spacing-md);
        background: var(--dark-background);
        border: 1px solid var(--dark-border);
    }
    
    .bottleneck-severity {
        padding: var(--spacing-xs) var(--spacing-sm);
        border-radius: var(--radius-sm);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }
    
    .bottleneck-severity.high {
        background: var(--error-500);
        color: white;
    }
    
    .bottleneck-severity.medium {
        background: var(--warning-500);
        color: white;
    }
    
    .bottleneck-severity.low {
        background: var(--info-500);
        color: white;
    }
    
    .progress-bar {
        width: 100%;
        height: 8px;
        background: var(--dark-border);
        border-radius: var(--radius-sm);
        overflow: hidden;
        margin: var(--spacing-sm) 0;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-500), var(--secondary-500));
        transition: width var(--transition-normal);
    }
    
    .progress-fill.warning {
        background: linear-gradient(90deg, var(--warning-500), var(--warning-600));
    }
    
    .progress-fill.critical {
        background: linear-gradient(90deg, var(--error-500), var(--error-600));
    }
`;
%>

<%- include('base-layout', { 
    title, 
    subtitle, 
    headerIcon, 
    reportType, 
    generatedAt, 
    dateRange, 
    additionalStyles 
}) %>
<%- contentFor('body') %>
<div class="layout-main">
    <!-- Health Overview -->
    <% 
    const task = data.task || {};
    const healthScore = data.healthScore || 85;
    const healthStatus = healthScore >= 80 ? 'good' : healthScore >= 60 ? 'warning' : 'critical';
    const healthClass = healthScore >= 80 ? '' : healthScore >= 60 ? 'warning' : 'critical';
    %>
    
    <div class="health-overview <%= healthClass %>">
        <div class="health-score">
            <div class="health-score-value"><%= healthScore %></div>
            <div class="health-score-details">
                <div class="health-score-label">Overall Health Score</div>
                <div class="health-score-description">
                    <% if (healthStatus === 'good') { %>
                        Task is progressing well with no major concerns. All metrics are within acceptable ranges.
                    <% } else if (healthStatus === 'warning') { %>
                        Task shows some warning signs that require attention. Monitor closely and address issues promptly.
                    <% } else { %>
                        Task has critical issues that need immediate attention. Intervention required to prevent failure.
                    <% } %>
                </div>
            </div>
        </div>
        
        <div class="health-summary">
            <strong>Task:</strong> <%= task.name || 'Unknown Task' %> | 
            <strong>Status:</strong> <%= task.status || 'Unknown' %> | 
            <strong>Current Role:</strong> <%= task.currentMode || 'Unassigned' %>
            <% if (task.priority) { %>
                | <strong>Priority:</strong> <%= task.priority %>
            <% } %>
        </div>
    </div>

    <!-- Health Metrics -->
    <div class="health-metrics">
        <% 
        const progressMetric = data.metrics?.progress || 75;
        const velocityMetric = data.metrics?.velocity || 80;
        const qualityMetric = data.metrics?.quality || 90;
        const blockerMetric = data.metrics?.blockers || 5;
        %>
        
        <div class="health-metric">
            <div class="health-metric-value <%= progressMetric >= 70 ? 'good' : progressMetric >= 40 ? 'warning' : 'critical' %>">
                <%= progressMetric %>%
            </div>
            <div class="health-metric-label">Progress Completion</div>
            <div class="health-metric-description">
                Percentage of planned work completed based on subtasks and milestones
            </div>
        </div>
        
        <div class="health-metric">
            <div class="health-metric-value <%= velocityMetric >= 80 ? 'good' : velocityMetric >= 60 ? 'warning' : 'critical' %>">
                <%= velocityMetric %>%
            </div>
            <div class="health-metric-label">Velocity Score</div>
            <div class="health-metric-description">
                Rate of progress compared to planned timeline and estimates
            </div>
        </div>
        
        <div class="health-metric">
            <div class="health-metric-value <%= qualityMetric >= 85 ? 'good' : qualityMetric >= 70 ? 'warning' : 'critical' %>">
                <%= qualityMetric %>%
            </div>
            <div class="health-metric-label">Quality Score</div>
            <div class="health-metric-description">
                Code review results, test coverage, and acceptance criteria satisfaction
            </div>
        </div>
        
        <div class="health-metric">
            <div class="health-metric-value <%= blockerMetric <= 10 ? 'good' : blockerMetric <= 25 ? 'warning' : 'critical' %>">
                <%= blockerMetric %>%
            </div>
            <div class="health-metric-label">Blocker Impact</div>
            <div class="health-metric-description">
                Percentage of time affected by blockers, dependencies, or issues
            </div>
        </div>
    </div>

    <!-- Progress Timeline -->
    <div class="progress-timeline">
        <div class="timeline-header">
            <span class="panel-icon">⏱️</span>
            <h3 class="panel-title">Progress Timeline</h3>
        </div>
        
        <% 
        const timeline = data.timeline || [
            { phase: 'Task Created', status: 'completed', icon: '📝', description: 'Task initialized with requirements', timestamp: task.creationDate },
            { phase: 'Research Phase', status: 'completed', icon: '🔬', description: 'Research and analysis completed', timestamp: null },
            { phase: 'Architecture Phase', status: 'completed', icon: '🏛️', description: 'Implementation plan created', timestamp: null },
            { phase: 'Development Phase', status: 'in-progress', icon: '👨‍💻', description: 'Code implementation in progress', timestamp: null },
            { phase: 'Code Review', status: 'pending', icon: '🔍', description: 'Quality assurance and testing', timestamp: null },
            { phase: 'Completion', status: 'pending', icon: '✅', description: 'Final verification and delivery', timestamp: null }
        ];
        %>
        
        <% timeline.forEach(item => { %>
            <div class="timeline-item <%= item.status %>">
                <div class="timeline-icon"><%= item.icon %></div>
                <div class="timeline-content">
                    <div class="timeline-title"><%= item.phase %></div>
                    <div class="timeline-description"><%= item.description %></div>
                    <div class="timeline-meta">
                        <span>Status: <%= item.status.charAt(0).toUpperCase() + item.status.slice(1) %></span>
                        <% if (item.timestamp) { %>
                            <span>• <%= new Date(item.timestamp).toLocaleDateString() %></span>
                        <% } %>
                    </div>
                </div>
            </div>
        <% }); %>
    </div>

    <!-- Bottleneck Analysis -->
    <% if (data.bottlenecks && data.bottlenecks.length > 0) { %>
    <div class="bottleneck-analysis">
        <div class="timeline-header">
            <span class="panel-icon">🚧</span>
            <h3 class="panel-title">Bottleneck Analysis</h3>
        </div>
        
        <% data.bottlenecks.forEach(bottleneck => { %>
            <div class="bottleneck-item">
                <div class="bottleneck-severity <%= bottleneck.severity %>"><%= bottleneck.severity %></div>
                <div class="timeline-content">
                    <div class="timeline-title"><%= bottleneck.title %></div>
                    <div class="timeline-description"><%= bottleneck.description %></div>
                    <% if (bottleneck.impact) { %>
                        <div class="timeline-meta">
                            <span>Impact: <%= bottleneck.impact %></span>
                            <% if (bottleneck.estimatedDelay) { %>
                                <span>• Estimated Delay: <%= bottleneck.estimatedDelay %></span>
                            <% } %>
                        </div>
                    <% } %>
                </div>
            </div>
        <% }); %>
    </div>
    <% } %>

    <!-- Detailed Progress Breakdown -->
    <div class="analysis-panel">
        <div class="panel-header">
            <span class="panel-icon">📊</span>
            <h3 class="panel-title">Detailed Progress Breakdown</h3>
        </div>
        
        <% if (data.subtasks && data.subtasks.length > 0) { %>
            <% 
            const completedSubtasks = data.subtasks.filter(st => st.status === 'completed').length;
            const totalSubtasks = data.subtasks.length;
            const progressPercentage = (completedSubtasks / totalSubtasks) * 100;
            %>
            
            <div class="progress-summary">
                <h4>Subtask Progress: <%= completedSubtasks %>/<%= totalSubtasks %> completed</h4>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: <%= progressPercentage %>%"></div>
                </div>
                <p><%= progressPercentage.toFixed(1) %>% of planned work completed</p>
            </div>
            
            <div class="subtask-list">
                <% data.subtasks.forEach((subtask, index) => { %>
                    <div class="timeline-item <%= subtask.status %>">
                        <div class="timeline-icon">
                            <% if (subtask.status === 'completed') { %>✅
                            <% } else if (subtask.status === 'in-progress') { %>🔄
                            <% } else { %>⏳<% } %>
                        </div>
                        <div class="timeline-content">
                            <div class="timeline-title"><%= subtask.name %></div>
                            <div class="timeline-description"><%= subtask.description || 'No description available' %></div>
                            <div class="timeline-meta">
                                <span>Status: <%= subtask.status.charAt(0).toUpperCase() + subtask.status.slice(1) %></span>
                                <% if (subtask.assignedTo) { %>
                                    <span>• Assigned: <%= subtask.assignedTo %></span>
                                <% } %>
                                <% if (subtask.estimatedDuration) { %>
                                    <span>• Duration: <%= subtask.estimatedDuration %></span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } else { %>
            <p>No subtasks available for analysis.</p>
        <% } %>
    </div>

    <!-- Recommendations -->
    <% if (data.recommendations && data.recommendations.length > 0) { %>
    <div class="analysis-panel">
        <div class="panel-header">
            <span class="panel-icon">💡</span>
            <h3 class="panel-title">Health Improvement Recommendations</h3>
        </div>
        <div class="recommendations">
            <ul>
                <% data.recommendations.forEach(recommendation => { %>
                    <li><%= recommendation %></li>
                <% }); %>
            </ul>
        </div>
    </div>
    <% } %>
</div>
<%- contentFor('scripts') %>
<script>
    // Add any task-specific JavaScript here
    console.log('Task Progress Health Report loaded');
</script>