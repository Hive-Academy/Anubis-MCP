{{#> base-layout title="Interactive Dashboard" reportType="Dashboard"}}

<!-- Dashboard Content -->
<div class="space-y-8">
    
    <!-- Key Metrics -->
    {{> metric-cards metrics=summary.metrics}}
    
    <!-- Charts Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Status Distribution Chart -->
        <div class="card animate-on-scroll">
            <div class="card-header">
                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                    <i class="fas fa-chart-pie text-primary-600 mr-2"></i>
                    Task Status Distribution
                </h3>
                <p class="text-sm text-gray-600 mt-1">Current status breakdown of all tasks</p>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="statusChart"></canvas>
                </div>
                <!-- Status Legend -->
                <div class="mt-4 grid grid-cols-2 gap-2 text-sm">
                    {{#each charts.statusDistribution.labels}}
                        <div class="flex items-center space-x-2">
                            <div class="w-3 h-3 rounded-full" style="background-color: {{lookup ../charts.statusDistribution.colors @index}}"></div>
                            <span class="text-gray-700">{{this}}</span>
                            <span class="font-medium text-gray-900">({{lookup ../charts.statusDistribution.data @index}})</span>
                        </div>
                    {{/each}}
                </div>
            </div>
        </div>
        
        <!-- Priority Distribution Chart -->
        <div class="card animate-on-scroll">
            <div class="card-header">
                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                    <i class="fas fa-exclamation-triangle text-warning-600 mr-2"></i>
                    Priority Distribution
                </h3>
                <p class="text-sm text-gray-600 mt-1">Task priority levels across the system</p>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="priorityChart"></canvas>
                </div>
                <!-- Priority Summary -->
                <div class="mt-4 space-y-2">
                    {{#each charts.priorityDistribution.labels}}
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <span class="priority-badge priority-{{toLowerCase this}}">{{this}}</span>
                            </div>
                            <span class="font-medium text-gray-900">{{lookup ../charts.priorityDistribution.data @index}} tasks</span>
                        </div>
                    {{/each}}
                </div>
            </div>
        </div>
        
        <!-- Completion Trends Chart -->
        <div class="card animate-on-scroll">
            <div class="card-header">
                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                    <i class="fas fa-chart-line text-success-600 mr-2"></i>
                    Completion Trends
                </h3>
                <p class="text-sm text-gray-600 mt-1">Task completion over time</p>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="trendsChart"></canvas>
                </div>
                <!-- Trend Summary -->
                <div class="mt-4 flex items-center justify-between text-sm">
                    <div class="flex items-center space-x-4">
                        <div class="flex items-center space-x-1">
                            <div class="w-3 h-3 bg-success-500 rounded-full"></div>
                            <span class="text-gray-600">Completed</span>
                        </div>
                        <div class="flex items-center space-x-1">
                            <div class="w-3 h-3 bg-primary-500 rounded-full"></div>
                            <span class="text-gray-600">In Progress</span>
                        </div>
                    </div>
                    <div class="text-right">
                        <div class="font-medium text-gray-900">{{summary.completionRate}}% completion rate</div>
                        <div class="text-gray-500">Last 30 days</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Role Performance Chart -->
        <div class="card animate-on-scroll">
            <div class="card-header">
                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                    <i class="fas fa-users text-indigo-600 mr-2"></i>
                    Role Performance
                </h3>
                <p class="text-sm text-gray-600 mt-1">Efficiency scores by role</p>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="roleChart"></canvas>
                </div>
                <!-- Role Performance Summary -->
                <div class="mt-4 space-y-2">
                    {{#each charts.rolePerformance.labels}}
                        <div class="flex items-center justify-between">
                            <span class="role-badge">{{this}}</span>
                            <div class="flex items-center space-x-2">
                                <div class="w-16 bg-gray-200 rounded-full h-2">
                                    <div 
                                        class="bg-indigo-600 h-2 rounded-full transition-all duration-1000" 
                                        style="width: {{lookup ../charts.rolePerformance.data @index}}%"
                                    ></div>
                                </div>
                                <span class="font-medium text-gray-900 w-8 text-right">{{lookup ../charts.rolePerformance.data @index}}</span>
                            </div>
                        </div>
                    {{/each}}
                </div>
            </div>
        </div>
    </div>
    
    <!-- Tasks Table -->
    {{> data-table 
        tableId="tasks-table"
        title="Recent Tasks"
        description="Overview of all tasks with current status and progress"
        searchable=true
        searchPlaceholder="tasks"
        columns=taskTable.columns
        data=taskTable.data
        emptyMessage="No tasks found matching your criteria"
    }}
    
    <!-- Delegation Flow Table -->
    {{> data-table 
        tableId="delegations-table"
        title="Recent Delegations"
        description="Latest workflow transitions and role handoffs"
        searchable=true
        searchPlaceholder="delegations"
        columns=delegationTable.columns
        data=delegationTable.data
        emptyMessage="No delegation records found"
    }}
    
    <!-- Quick Actions Panel -->
    <div class="card animate-on-scroll">
        <div class="card-header">
            <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                <i class="fas fa-bolt text-yellow-600 mr-2"></i>
                Quick Actions
            </h3>
            <p class="text-sm text-gray-600 mt-1">Common MCP commands and operations</p>
        </div>
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <!-- Create New Task -->
                <button onclick="copyMcpCommand('create-task')" class="btn-secondary text-left p-4 h-auto">
                    <div class="flex items-start space-x-3">
                        <div class="w-10 h-10 bg-primary-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-plus text-primary-600"></i>
                        </div>
                        <div>
                            <div class="font-medium text-gray-900">Create Task</div>
                            <div class="text-sm text-gray-500">Start new workflow task</div>
                        </div>
                    </div>
                </button>
                
                <!-- Query Tasks -->
                <button onclick="copyMcpCommand('query-tasks')" class="btn-secondary text-left p-4 h-auto">
                    <div class="flex items-start space-x-3">
                        <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-search text-blue-600"></i>
                        </div>
                        <div>
                            <div class="font-medium text-gray-900">Query Tasks</div>
                            <div class="text-sm text-gray-500">List and filter tasks</div>
                        </div>
                    </div>
                </button>
                
                <!-- Generate Report -->
                <button onclick="copyMcpCommand('generate-report')" class="btn-secondary text-left p-4 h-auto">
                    <div class="flex items-start space-x-3">
                        <div class="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-chart-bar text-green-600"></i>
                        </div>
                        <div>
                            <div class="font-medium text-gray-900">Generate Report</div>
                            <div class="text-sm text-gray-500">Create workflow report</div>
                        </div>
                    </div>
                </button>
                
                <!-- Workflow Status -->
                <button onclick="copyMcpCommand('workflow-status')" class="btn-secondary text-left p-4 h-auto">
                    <div class="flex items-start space-x-3">
                        <div class="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-project-diagram text-purple-600"></i>
                        </div>
                        <div>
                            <div class="font-medium text-gray-900">Workflow Status</div>
                            <div class="text-sm text-gray-500">Check delegation flow</div>
                        </div>
                    </div>
                </button>
                
                <!-- Batch Operations -->
                <button onclick="copyMcpCommand('batch-operations')" class="btn-secondary text-left p-4 h-auto">
                    <div class="flex items-start space-x-3">
                        <div class="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-layer-group text-orange-600"></i>
                        </div>
                        <div>
                            <div class="font-medium text-gray-900">Batch Operations</div>
                            <div class="text-sm text-gray-500">Manage subtask batches</div>
                        </div>
                    </div>
                </button>
                
                <!-- System Health -->
                <button onclick="copyMcpCommand('system-health')" class="btn-secondary text-left p-4 h-auto">
                    <div class="flex items-start space-x-3">
                        <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                            <i class="fas fa-heartbeat text-red-600"></i>
                        </div>
                        <div>
                            <div class="font-medium text-gray-900">System Health</div>
                            <div class="text-sm text-gray-500">Check system status</div>
                        </div>
                    </div>
                </button>
            </div>
        </div>
    </div>
    
</div>

<!-- Embed Chart Data -->
<script type="application/json" id="dashboard-data">
{{{json this}}}
</script>

<!-- Dashboard JavaScript -->
<script>
    // Dashboard state and functionality
    let dashboardData = {};
    let charts = {};
    
    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', function() {
        loadDashboardData();
        initializeCharts();
        startAutoRefresh();
    });
    
    function loadDashboardData() {
        try {
            const dataScript = document.getElementById('dashboard-data');
            if (dataScript) {
                dashboardData = JSON.parse(dataScript.textContent);
                console.log('Dashboard data loaded:', dashboardData);
            }
        } catch (error) {
            console.error('Failed to load dashboard data:', error);
            dashboardData = getDefaultData();
        }
    }
    
    function getDefaultData() {
        return {
            charts: {
                statusDistribution: {
                    labels: ['Completed', 'In Progress', 'Not Started'],
                    data: [0, 0, 0],
                    colors: ['#22c55e', '#3b82f6', '#6b7280']
                },
                priorityDistribution: {
                    labels: ['Critical', 'High', 'Medium', 'Low'],
                    data: [0, 0, 0, 0]
                },
                completionTrends: {
                    labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
                    data: [0, 0, 0, 0]
                },
                rolePerformance: {
                    labels: ['Boomerang', 'Researcher', 'Architect', 'Developer', 'Code Review'],
                    data: [0, 0, 0, 0, 0]
                }
            }
        };
    }
    
    function initializeCharts() {
        const chartData = dashboardData.charts || getDefaultData().charts;
        
        // Status Distribution Chart
        const statusCtx = document.getElementById('statusChart');
        if (statusCtx) {
            charts.statusChart = new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: chartData.statusDistribution.labels,
                    datasets: [{
                        data: chartData.statusDistribution.data,
                        backgroundColor: [
                            '#22c55e', // completed - green
                            '#3b82f6', // in-progress - blue
                            '#f59e0b', // needs-review - yellow
                            '#ef4444', // needs-changes - red
                            '#6b7280', // not-started - gray
                            '#f97316', // paused - orange
                            '#dc2626'  // cancelled - dark red
                        ],
                        borderWidth: 3,
                        borderColor: '#ffffff',
                        hoverBorderWidth: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false // We have custom legend
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: '#374151',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = total > 0 ? Math.round((context.parsed / total) * 100) : 0;
                                    return `${context.label}: ${context.parsed} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    animation: {
                        animateRotate: true,
                        duration: 1000
                    }
                }
            });
        }
        
        // Priority Distribution Chart
        const priorityCtx = document.getElementById('priorityChart');
        if (priorityCtx) {
            charts.priorityChart = new Chart(priorityCtx, {
                type: 'bar',
                data: {
                    labels: chartData.priorityDistribution.labels,
                    datasets: [{
                        label: 'Tasks',
                        data: chartData.priorityDistribution.data,
                        backgroundColor: [
                            '#dc2626', // Critical - red
                            '#f97316', // High - orange
                            '#f59e0b', // Medium - yellow
                            '#22c55e'  // Low - green
                        ],
                        borderRadius: 6,
                        borderSkipped: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                color: '#6b7280'
                            },
                            grid: {
                                color: '#e5e7eb'
                            }
                        },
                        x: {
                            ticks: {
                                color: '#6b7280'
                            },
                            grid: {
                                display: false
                            }
                        }
                    },
                    animation: {
                        duration: 1000,
                        easing: 'easeOutQuart'
                    }
                }
            });
        }
        
        // Completion Trends Chart
        const trendsCtx = document.getElementById('trendsChart');
        if (trendsCtx) {
            charts.trendsChart = new Chart(trendsCtx, {
                type: 'line',
                data: {
                    labels: chartData.completionTrends.labels,
                    datasets: [{
                        label: 'Completed Tasks',
                        data: chartData.completionTrends.data,
                        borderColor: '#22c55e',
                        backgroundColor: 'rgba(34, 197, 94, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#22c55e',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                color: '#6b7280'
                            },
                            grid: {
                                color: '#e5e7eb'
                            }
                        },
                        x: {
                            ticks: {
                                color: '#6b7280'
                            },
                            grid: {
                                display: false
                            }
                        }
                    },
                    animation: {
                        duration: 1500,
                        easing: 'easeOutQuart'
                    }
                }
            });
        }
        
        // Role Performance Chart
        const roleCtx = document.getElementById('roleChart');
        if (roleCtx) {
            charts.roleChart = new Chart(roleCtx, {
                type: 'radar',
                data: {
                    labels: chartData.rolePerformance.labels,
                    datasets: [{
                        label: 'Efficiency Score',
                        data: chartData.rolePerformance.data,
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderWidth: 3,
                        pointBackgroundColor: '#3b82f6',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff'
                        }
                    },
                    scales: {
                        r: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                stepSize: 20,
                                color: '#6b7280'
                            },
                            grid: {
                                color: '#e5e7eb'
                            },
                            angleLines: {
                                color: '#e5e7eb'
                            }
                        }
                    },
                    animation: {
                        duration: 1200,
                        easing: 'easeOutQuart'
                    }
                }
            });
        }
    }
    
    function startAutoRefresh() {
        // Auto-refresh every 5 minutes
        setInterval(() => {
            refreshDashboard();
        }, 5 * 60 * 1000);
    }
    
    function refreshDashboard() {
        console.log('Dashboard refreshed at:', new Date().toLocaleTimeString());
        showToast('Dashboard data refreshed', 'success');
        
        // In a real implementation, this would fetch fresh data and update charts
        // For now, we'll just show the notification
    }
    
    // MCP Command Templates
    const mcpCommands = {
        'create-task': `task_operations({
  operation: "create",
  taskData: {
    name: "Your Task Name",
    priority: "High",
    status: "not-started"
  },
  description: {
    description: "Task description",
    businessRequirements: "Business requirements",
    acceptanceCriteria: ["Criteria 1", "Criteria 2"]
  }
})`,
        'query-tasks': `task_operations({
  operation: "list",
  status: "in-progress",
  priority: "High"
})`,
        'generate-report': `generate_workflow_report({
  reportType: "interactive-dashboard",
  outputFormat: "html"
})`,
        'workflow-status': `query_workflow_status({
  queryType: "current_assignments",
  currentRole: "senior-developer"
})`,
        'batch-operations': `batch_subtask_operations({
  operation: "get_batch_summary",
  taskId: "TSK-001",
  batchId: "B001"
})`,
        'system-health': `report_system_health({
  checkBrowser: false
})`
    };
    
    // Copy MCP command to clipboard
    window.copyMcpCommand = function(commandType) {
        const command = mcpCommands[commandType];
        if (command) {
            navigator.clipboard.writeText(command).then(() => {
                showToast(`${commandType.replace('-', ' ')} command copied to clipboard!`, 'success');
            }).catch(() => {
                showToast('Failed to copy command', 'error');
            });
        }
    };
    
    // Helper function for lowercase conversion
    if (typeof Handlebars !== 'undefined') {
        Handlebars.registerHelper('toLowerCase', function(str) {
            return str ? str.toLowerCase() : '';
        });
    }
</script>

{{/base-layout}}