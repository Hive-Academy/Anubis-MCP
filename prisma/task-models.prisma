// ===== CORE TASK MANAGEMENT MODELS =====
// Core models for task lifecycle management

model Task {
  id                Int       @id @default(autoincrement())
  name              String
  slug              String?   @unique // Human-readable slug for task identification
  status            String    @default("not-started")
  completionDate    DateTime?
  owner             String    @default("boomerang")
  currentMode       String    @default("boomerang")
  priority          String    @default("Medium")
  dependencies      Json      @default("[]")
  redelegationCount Int       @default(0)
  gitBranch         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  taskDescription   TaskDescription?
  subtasks          Subtask[]
  delegationRecords DelegationRecord[]
  researchReports   ResearchReport[]
  codeReviews       CodeReview[]
  completionReports CompletionReport[]

  workflowTransitions WorkflowTransition[]
  codebaseAnalysis    CodebaseAnalysis?
  workflowExecutions  WorkflowExecution[]
  // @@map("tasks")

  @@index([status])
  @@index([owner])
  @@index([currentMode])
  @@index([priority])
  @@index([slug])
}

model TaskDescription {
  id                    Int      @id @default(autoincrement())
  taskId                Int      @unique
  description           String
  businessRequirements  String
  technicalRequirements String
  acceptanceCriteria    Json // JSON array of acceptance criteria
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])

  // @@map("task_descriptions")
}

model Subtask {
  id             Int      @id @default(autoincrement())
  taskId         Int
  name           String
  description    String
  sequenceNumber Int
  status         String   @default("not-started")
  batchId        String? // For grouping related subtasks
  batchTitle     String? // Human-readable batch title
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // CORE ESSENTIALS: Only the most critical fields for workflow execution

  // Implementation guidance - consolidated into single field
  implementationApproach String? // Detailed approach and technical specifications

  // Quality validation
  acceptanceCriteria Json? // Acceptance criteria for validation

  // Dependencies (used by dependency system)
  dependencies Json? // Dependencies on other subtasks

  // Completion tracking
  completionEvidence Json? // Evidence of completion for quality validation

  task              Task                @relation(fields: [taskId], references: [id])
  dependencies_from SubtaskDependency[] @relation("DependentSubtask")
  dependencies_to   SubtaskDependency[] @relation("RequiredSubtask")
  // @@map("subtasks")

  @@index([taskId])
  @@index([status])
  @@index([batchId])
  @@index([sequenceNumber])
}

model SubtaskDependency {
  id                 Int    @id @default(autoincrement())
  dependentSubtaskId Int // The subtask that depends on another
  requiredSubtaskId  Int // The subtask that must be completed first
  dependencyType     String @default("sequential") // sequential, parallel, conditional

  dependentSubtask Subtask @relation("DependentSubtask", fields: [dependentSubtaskId], references: [id])
  requiredSubtask  Subtask @relation("RequiredSubtask", fields: [requiredSubtaskId], references: [id])
  // @@map("subtask_dependencies")

  @@unique([dependentSubtaskId, requiredSubtaskId])
  @@index([dependentSubtaskId])
  @@index([requiredSubtaskId])
}

model DelegationRecord {
  id                  Int      @id @default(autoincrement())
  taskId              Int
  fromMode            String
  toMode              String
  delegationTimestamp DateTime @default(now())
  message             String?

  task Task @relation(fields: [taskId], references: [id])
  // @@map("delegation_records")

  @@index([taskId])
  @@index([fromMode])
  @@index([toMode])
}

model ResearchReport {
  id              Int      @id @default(autoincrement())
  taskId          Int
  title           String
  summary         String
  findings        String
  recommendations String
  references      Json // JSON array of references
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])

  // @@map("research_reports")
}

model CodeReview {
  id                             Int      @id @default(autoincrement())
  taskId                         Int
  status                         String // APPROVED, APPROVED_WITH_RESERVATIONS, NEEDS_CHANGES
  summary                        String
  strengths                      String
  issues                         String
  acceptanceCriteriaVerification Json
  manualTestingResults           String
  requiredChanges                String?
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])

  // @@map("code_reviews")
}

model CompletionReport {
  id                             Int      @id @default(autoincrement())
  taskId                         Int
  summary                        String
  filesModified                  Json // JSON array of files modified
  delegationSummary              String
  acceptanceCriteriaVerification Json
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])

  // @@map("completion_reports")
}

model WorkflowTransition {
  id                  Int      @id @default(autoincrement())
  taskId              Int
  fromMode            String
  toMode              String
  transitionTimestamp DateTime @default(now())
  reason              String?
  updatedAt           DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])

  // @@map("workflow_transitions")
}

// CodebaseAnalysis model for storing structured codebase analysis results
// Critical for maintaining consistency across roles and preventing re-analysis
model CodebaseAnalysis {
  id     Int @id @default(autoincrement())
  taskId Int @unique

  // Analysis Content - JSON fields for structured data
  architectureFindings  Json // Current patterns, tech stack, file structure, dependencies
  problemsIdentified    Json // Issues found, root causes, impact assessment, technical debt
  implementationContext Json // Existing patterns, coding standards, quality guidelines
  qualityAssessment     Json // Code quality metrics, testing coverage, documentation state

  // Additional Context
  filesCovered    Json // Array of files analyzed with their roles and importance
  technologyStack Json // Detailed tech stack with versions and usage patterns

  // Metadata
  analyzedAt      DateTime @default(now())
  updatedAt       DateTime @updatedAt
  analyzedBy      String // Role that performed the analysis (boomerang, architect, etc.)
  analysisVersion String   @default("1.0") // For tracking analysis evolution

  task Task @relation(fields: [taskId], references: [id])
  // @@map("codebase_analysis")

  @@index([taskId])
  @@index([analyzedBy])
}
