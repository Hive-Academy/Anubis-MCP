// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Model definitions based on 00-mcp-data-base-schema.md

model Task {
  taskId            String    @id // Corresponds to task_id TEXT PRIMARY KEY
  name              String
  status            String // 'Not Started', 'In Progress', 'In Review', 'Completed'
  creationDate      DateTime  @default(now())
  completionDate    DateTime?
  owner             String?
  currentMode       String?
  priority          String?   // 'Low', 'Medium', 'High', 'Critical'
  dependencies      Json?     // JSON array of task_ids
  redelegationCount Int       @default(0)
  gitBranch         String?

  taskDescription   TaskDescription?
  implementationPlans ImplementationPlan[]
  subtasks          Subtask[]
  delegationRecords DelegationRecord[]
  researchReports   ResearchReport[]
  codeReviews       CodeReview[]
  completionReports CompletionReport[]
  commits           Commit[]
  comments          Comment[]
  workflowTransitions WorkflowTransition[]

  @@index([status])
  @@index([currentMode])
  // @@map("tasks") // If table name in DB should be 'tasks'
}

model TaskDescription {
  taskId                 String    @id
  description            String
  businessRequirements   String
  technicalRequirements  String
  acceptanceCriteria     Json      // JSON array of acceptance criteria
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  task                   Task      @relation(fields: [taskId], references: [taskId])

  // @@fulltext([description, businessRequirements, technicalRequirements]) // Prisma's representation of FTS - Removed due to connector incompatibility
  // @@map("task_descriptions")
}

model ImplementationPlan {
  id                  Int       @id @default(autoincrement())
  taskId              String
  overview            String
  approach            String
  technicalDecisions  String
  filesToModify       Json      // JSON array of files to modify
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdBy           String

  task                Task      @relation(fields: [taskId], references: [taskId])
  subtasks            Subtask[]

  // @@map("implementation_plans")
}

model Subtask {
  id                  Int       @id @default(autoincrement())
  taskId              String
  planId              Int
  name                String
  description         String
  sequenceNumber      Int
  status              String
  assignedTo          String?
  estimatedDuration   String?
  startedAt           DateTime?
  completedAt         DateTime?

  task                Task                @relation(fields: [taskId], references: [taskId])
  plan                ImplementationPlan  @relation(fields: [planId], references: [id])
  delegationRecords   DelegationRecord[]
  commits             Commit[]
  comments            Comment[]
  
  @@index([taskId])
  @@index([status])
  // @@map("subtasks")
}

model DelegationRecord {
  id                    Int       @id @default(autoincrement())
  taskId                String
  subtaskId             Int?
  fromMode              String
  toMode                String
  delegationTimestamp   DateTime  @default(now())
  completionTimestamp   DateTime?
  success               Boolean?
  rejectionReason       String?
  redelegationCount     Int       @default(0)

  task                  Task      @relation(fields: [taskId], references: [taskId])
  subtask               Subtask?  @relation(fields: [subtaskId], references: [id])

  @@index([taskId])
  @@index([fromMode, toMode])
  // @@map("delegation_records")
}

model ResearchReport {
  id              Int       @id @default(autoincrement())
  taskId          String
  title           String
  summary         String
  findings        String
  recommendations String
  references      Json      // JSON array of references
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  task            Task      @relation(fields: [taskId], references: [taskId])

  // @@map("research_reports")
}

model CodeReview {
  id                                Int       @id @default(autoincrement())
  taskId                            String
  status                            String    // 'APPROVED', 'APPROVED WITH RESERVATIONS', 'NEEDS CHANGES'
  summary                           String
  strengths                         String
  issues                            String
  acceptanceCriteriaVerification    Json
  manualTestingResults              String
  requiredChanges                   String?
  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime  @updatedAt

  task                              Task      @relation(fields: [taskId], references: [taskId])

  // @@map("code_reviews")
}

model CompletionReport {
  id                                Int       @id @default(autoincrement())
  taskId                            String
  summary                           String
  filesModified                     Json      // JSON array of files modified
  delegationSummary                 String
  acceptanceCriteriaVerification    Json
  createdAt                         DateTime  @default(now())

  task                              Task      @relation(fields: [taskId], references: [taskId])

  // @@map("completion_reports")
}

model MemoryBank {
  id            Int       @id @default(autoincrement())
  fileType      String    // 'ProjectOverview', 'TechnicalArchitecture', 'DeveloperGuide'
  section       String
  content       String
  lineStart     Int?
  lineEnd       Int?
  lastUpdated   DateTime  @updatedAt

  @@index([fileType])
  @@index([section])
  // @@fulltext([content]) // Prisma's representation of FTS - Removed due to connector incompatibility
  // @@map("memory_bank")
}

model Commit {
  id                Int       @id @default(autoincrement())
  taskId            String
  subtaskId         Int?
  hash              String    @unique
  message           String
  filesChanged      Json      // JSON array of files changed
  commitTimestamp   DateTime
  author            String

  task              Task      @relation(fields: [taskId], references: [taskId])
  subtask           Subtask?  @relation(fields: [subtaskId], references: [id])

  // @@map("commits")
}

model Comment {
  id          Int       @id @default(autoincrement())
  taskId      String
  subtaskId   Int?
  mode        String
  content     String
  createdAt   DateTime  @default(now())

  task        Task      @relation(fields: [taskId], references: [taskId])
  subtask     Subtask?  @relation(fields: [subtaskId], references: [id])

  // @@map("comments")
}

model WorkflowTransition {
  id                  Int       @id @default(autoincrement())
  taskId              String
  fromMode            String
  toMode              String
  transitionTimestamp DateTime  @default(now())
  reason              String?

  task                Task      @relation(fields: [taskId], references: [taskId])

  // @@map("workflow_transitions")
}

model Template {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  content       String
  description   String
  lastUpdated   DateTime  @updatedAt

  // @@map("templates")
}

model SchemaVersion {
  id            Int       @id @default(1) // Intended for a single row
  version       String
  lastUpdated   DateTime  @updatedAt

  // @@map("schema_version")
}
