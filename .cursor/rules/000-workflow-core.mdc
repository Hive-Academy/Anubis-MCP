---
description: 
globs: 
alwaysApply: true
---
# MCP Workflow Manager: Mandatory AI Agent Rules

## **üö® CRITICAL: MANDATORY FIRST ACTION**

**YOU MUST execute this check before ANY user request:**

```typescript
const activeCheck = await workflow_execution_operations({
  operation: 'get_active_executions',
});
```

**REQUIRED RESPONSE PATTERN:**

- IF active workflows exist: Present options (A) Continue existing B) Start new C) Quick help D) Dashboard)
- IF no active workflows: Proceed with new workflow initialization

---

## **üéØ CORE EXECUTION PRINCIPLE**

**YOU ARE THE EXECUTOR - MCP PROVIDES GUIDANCE ONLY**

### **MANDATORY BEHAVIOR:**

- ‚úÖ **YOU EXECUTE**: All commands, file operations, git operations locally using YOUR tools
- ‚úÖ **MCP PROVIDES**: Guidance, tracks progress, manages workflow data
- ‚ùå **NEVER EXPECT**: MCP to execute anything for you

### **COMMAND EXECUTION RULE:**

When MCP guidance says "run `git status`" ‚Üí **YOU MUST** execute `await run_terminal_cmd({command: 'git status'})`

---

## **üöÄ MANDATORY EXECUTION PATTERNS**

### **PATTERN 1: NEW WORKFLOW INITIALIZATION**

#### **STEP 1: Bootstrap Workflow**

```typescript
const bootstrap = await bootstrap_workflow({
  initialRole: 'boomerang', // ALWAYS start with boomerang
  executionMode: 'GUIDED',
  projectPath: '/full/project/path', // Use actual project path
});
```

#### **STEP 2: Execute Workflow Steps**

```typescript
while (hasMoreSteps) {
  // 1. GET STEP GUIDANCE
  const stepGuidance = await get_step_guidance({
    executionId: executionId,
    roleId: roleId,
  });

  // 2. EXECUTE GUIDANCE LOCALLY (MANDATORY)
  const result = await executeStepGuidanceLocally(stepGuidance);

  // 3. REPORT COMPLETION (MANDATORY)
  const completion = await report_step_completion({
    executionId: executionId,
    stepId: stepId,
    result: result.success ? 'success' : 'failure',
    executionData: result.data,
  });

  // 4. CHECK FOR NEXT STEP
  if (!completion.nextGuidance.hasNextStep) break;
}
```

#### **STEP 3: Handle Role Transitions**

```typescript
// When no more steps in current role:
const transitions = await get_role_transitions({
  fromRoleName: currentRole,
  taskId: taskId,
  roleId: roleId,
});

const validation = await validate_transition({
  transitionId: selectedTransitionId,
  taskId: taskId,
  roleId: roleId,
});

if (validation.isValid) {
  await execute_transition({
    transitionId: selectedTransitionId,
    taskId: taskId,
    roleId: roleId,
  });
}
```

---

## **üìã STEP EXECUTION REQUIREMENTS**

### **FOR EVERY STEP YOU MUST:**

1. **READ** step guidance completely (behavioralContext, approachGuidance, qualityChecklist)
2. **EXECUTE** all guidance commands locally using YOUR available tools
3. **VALIDATE** results against the qualityChecklist requirements
4. **REPORT** completion with comprehensive execution data
5. **HANDLE** role transitions when steps complete

### **QUALITY CHECKLIST COMPLIANCE**

**YOU MUST verify EVERY item in the qualityChecklist before reporting step completion.**

**Example for Task Creation step:**

- ‚úÖ "Task created with comprehensive description and requirements" ‚Üí VERIFY task exists with complete data
- ‚úÖ "CRITICAL: executionId included in TaskOperations.create call" ‚Üí VERIFY executionId was provided
- ‚úÖ "Task successfully linked to current workflow execution" ‚Üí VERIFY linkage exists

**FAILURE TO FOLLOW QUALITY CHECKLIST = STEP FAILURE**

---

## **üîß MANDATORY TOOL USAGE**

### **Workflow Management**

- `bootstrap_workflow` - Initialize new workflow
- `get_step_guidance` - Get current step instructions
- `report_step_completion` - Report step results (MANDATORY after each step)
- `execute_mcp_operation` - Execute MCP operations with proper parameters

### **Role Transitions**

- `get_role_transitions` - Get available transitions
- `validate_transition` - Validate transition requirements
- `execute_transition` - Perform role transition

### **State Management**

- `workflow_execution_operations` - Query/update execution state

---

## **‚ö†Ô∏è CRITICAL REQUIREMENTS**

### **TASK CREATION REQUIREMENTS**

When creating tasks, YOU MUST:

- Include `executionId` parameter (MANDATORY)
- Provide comprehensive `description` object
- Include structured `codebaseAnalysis` data
- Verify task creation success before proceeding

### **STEP GUIDANCE COMPLIANCE**

- Follow `approachGuidance` step-by-step instructions exactly
- Execute ALL commands listed in guidance locally
- Meet ALL `qualityChecklist` requirements
- Report accurate `executionData` with evidence

### **ERROR HANDLING**

- Maximum 3 retry attempts per operation
- Report failures with detailed error information
- NEVER proceed if critical steps fail (e.g., git operations)

---

## **‚ùå PROHIBITED ACTIONS**

**YOU MUST NOT:**

- Skip quality checklist validation
- Expect MCP to execute commands for you
- Proceed without reporting step completion
- Ignore step guidance instructions
- Create tasks without executionId
- Continue after critical failures

---

## **‚úÖ REQUIRED ACTIONS**

**YOU MUST:**

- Execute ALL commands locally using your tools
- Follow step guidance instructions precisely
- Validate against quality checklists
- Report step completion with execution data
- Include executionId in all task operations
- Handle role transitions properly
- Stop workflow on critical failures

---

## **üîß TROUBLESHOOTING RESPONSES**

**WHEN encountering these issues, RESPOND as follows:**

- **"No step guidance"** ‚Üí Call `get_step_guidance` with correct parameters
- **"Command failed"** ‚Üí Retry up to 3 times, then report failure
- **"Quality check failed"** ‚Üí Fix issues and re-validate before proceeding
- **"Role transition needed"** ‚Üí Use transition pattern above
- **"ExecutionId missing"** ‚Üí Update execution context with proper linking

---

**REMEMBER: You are the executor. MCP provides guidance. Follow guidance exactly, execute locally, validate thoroughly, report accurately.**
