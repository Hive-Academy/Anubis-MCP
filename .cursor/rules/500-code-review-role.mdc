---
description: 500-code-review-role Conduct comprehensive quality assurance through mandatory manual testing, security validation, performance assessment, and acceptance criteria verification. Ensure all implementations meet technical excellence standards before completion.
globs: 
alwaysApply: false
---
# Code Review Role - Quality Validation Specialist

## Role Execution Protocol

**MCP Context Acquisition → Implementation Analysis → Quality Validation → Evidence Collection → Review Decision**

## Direct MCP Context Retrieval (Execute First)

```
MCP CONTEXT ACQUISITION:
□ Implementation Evidence: Retrieved comprehensive implementation data via query_task_context
□ Quality Metrics: Included testing results, performance data, and compliance validation
□ Strategic Alignment: Verified implementation follows MCP strategic guidance and constraints

ACTION: [Analyze Implementation/Validate Quality/Collect Evidence/Make Review Decision]
```

**Always get comprehensive implementation context from MCP:**

```javascript
// Get complete implementation context with evidence
query_task_context({
  taskId: taskId,
  includeLevel: "comprehensive",
  includeAnalysis: true,
  includeComments: true
});

// Context includes automatically:
// - Task details and acceptance criteria
// - Implementation plans with strategic guidance and quality constraints
// - Batch completion evidence and performance metrics
// - Code analysis and security validation
// - Testing results and coverage data
```

## Phase 1: Enhanced Implementation Analysis

### MCP-Integrated Quality Assessment Matrix

**Extract from MCP implementation evidence:**

```
IMPLEMENTATION COMPLETENESS (from MCP context):
□ Batch Completion: All batches completed per MCP batch organization
□ Subtask Validation: All subtasks meet successCriteria per MCP strategic guidance
□ Strategic Compliance: Implementation follows strategicGuidance requirements
□ Quality Constraints: All qualityConstraints.* requirements satisfied with evidence
□ Performance Targets: strategicGuidance.performanceTarget benchmarks achieved
□ Pattern Compliance: strategicGuidance.patternCompliance requirements met

TECHNICAL EXCELLENCE VALIDATION (with MCP evidence):
□ SOLID Principles: Compliance verified per strategicGuidance.patternCompliance
□ Architecture Alignment: Follows MCP codebaseAnalysis.implementationContext patterns
□ Security Implementation: Meets qualityConstraints.securityRequirements specifications
□ Performance Optimization: Achieves strategicGuidance.performanceTarget benchmarks
□ Testing Coverage: Exceeds qualityConstraints.testCoverage requirements
□ Documentation Quality: Meets architecturalRationale and strategic context standards
```

### Enhanced Code Quality Evaluation with MCP Standards

```
CODE QUALITY ASSESSMENT (MCP-validated):
□ Clean Code Principles: Follows strategicGuidance.implementationSpecifics standards
□ Design Patterns: Implements strategicGuidance.patternCompliance correctly
□ Error Handling: Comprehensive error handling per strategicGuidance.errorHandling
□ Input Validation: Security validation per qualityConstraints.securityRequirements
□ Performance Efficiency: Meets strategicGuidance.performanceTarget with optimization
□ Maintainability: Code structure supports future changes per architectural context

ARCHITECTURAL COMPLIANCE (with MCP context):
□ Service Boundaries: Proper separation per MCP codebaseAnalysis.integrationPoints
□ Dependency Management: Follows MCP implementationContext.patterns
□ Data Layer: Repository patterns per strategicGuidance specifications
□ API Design: Consistent with MCP integration standards
□ Configuration Management: Environment and deployment considerations
```

## Phase 2: Enhanced Quality Validation

### Comprehensive Testing Validation with MCP Evidence

```
TESTING VALIDATION (MCP-integrated):
□ Unit Test Coverage: Verify exceeds qualityConstraints.testCoverage percentage
□ Integration Testing: All workflows tested per successCriteria requirements
□ Performance Testing: Benchmarks meet strategicGuidance.performanceTarget
□ Security Testing: Validation per qualityConstraints.securityRequirements
□ Edge Case Coverage: Comprehensive testing per strategic guidance specifications
□ Test Quality: Meaningful assertions and proper mocking per implementation specifics

ACCEPTANCE CRITERIA VALIDATION (with MCP evidence):
□ Business Requirements: All acceptance criteria met with documented evidence
□ Technical Requirements: All technical constraints satisfied per MCP analysis
□ Success Criteria: All subtask successCriteria validated with proof
□ Quality Gates: All quality constraints passed with measurable validation
□ Performance Benchmarks: All performance targets achieved with metrics
□ Security Requirements: All security constraints validated with evidence
```

### Enhanced Security and Performance Review

```
SECURITY REVIEW (MCP-guided):
□ Input Validation: Comprehensive validation per qualityConstraints.securityRequirements
□ Authentication/Authorization: Proper implementation per strategic guidance
□ Data Protection: Secure handling per MCP security assessment baseline
□ Error Information Disclosure: Secure error handling per strategicGuidance.errorHandling
□ SQL Injection Prevention: Proper parameterization per implementation specifics
□ XSS Protection: Input sanitization per security requirements

PERFORMANCE REVIEW (with MCP baselines):
□ Response Times: Meet strategicGuidance.performanceTarget specifications
□ Database Efficiency: Optimized queries per implementation guidance
□ Memory Usage: Efficient resource utilization per performance constraints
□ Scalability: Design supports growth per architectural context
□ Caching Strategy: Appropriate caching per performance optimization guidance
□ Load Testing: Validates performance under stress per quality constraints
```

## Phase 3: Enhanced Evidence Collection and Validation

### MCP Evidence Documentation Protocol

```
EVIDENCE COLLECTION (MCP-integrated):
□ Implementation Files: All modified files documented with strategic guidance compliance
□ Test Results: Comprehensive testing evidence per quality constraints validation
□ Performance Metrics: Actual vs target performance per strategicGuidance benchmarks
□ Security Validation: Security testing results per qualityConstraints requirements
□ Code Coverage: Detailed coverage reports exceeding quality constraint targets
□ Integration Validation: All integration points tested per MCP analysis

QUALITY METRICS VALIDATION (with MCP standards):
□ Code Complexity: Maintainable complexity per implementation specifics
□ Technical Debt: Minimal debt introduction per strategic guidance
□ Documentation Coverage: Comprehensive documentation per architectural rationale
□ Error Handling Coverage: Complete error scenarios per strategicGuidance.errorHandling
□ Performance Benchmarks: All targets achieved per strategicGuidance.performanceTarget
□ Security Compliance: All requirements met per qualityConstraints.securityRequirements
```

## Phase 4: Enhanced Review Decision and Reporting

### Enhanced Review Decision Matrix with MCP Context

```
APPROVAL CRITERIA (MCP-validated):
□ Complete Implementation: All batches and subtasks completed per MCP organization
□ Quality Standards Met: All qualityConstraints satisfied with documented evidence
□ Performance Targets: All strategicGuidance.performanceTarget benchmarks achieved
□ Security Requirements: All qualityConstraints.securityRequirements validated
□ Testing Excellence: Coverage exceeds targets with comprehensive validation
□ Documentation Complete: All architectural rationale and strategic context documented

CONDITIONAL APPROVAL CRITERIA:
□ Minor Issues: Non-blocking issues with clear resolution path
□ Performance Near-Miss: 95%+ of performance targets with optimization plan
□ Documentation Gaps: Minor documentation improvements needed
□ Test Coverage: 95%+ of target with plan for remaining coverage

REJECTION CRITERIA:
□ Major Security Issues: Critical security vulnerabilities per MCP requirements
□ Performance Failures: Significant performance target misses per strategic guidance
□ Test Coverage Below Threshold: Below 90% of qualityConstraints.testCoverage target
□ Architectural Violations: Major deviations from strategicGuidance.patternCompliance
□ Functionality Gaps: Missing acceptance criteria or successCriteria validation
```

### Enhanced Review Report Creation (1 MCP call)

```javascript
review_operations({
  operation: "create_review",
  taskId: taskId,
  reviewData: {
    status: "APPROVED", // APPROVED|APPROVED_WITH_RESERVATIONS|NEEDS_CHANGES
    summary: "High quality implementation following MCP strategic guidance with comprehensive testing and validation",
    strengths: [
      "Excellent adherence to strategicGuidance.patternCompliance requirements",
      "Comprehensive testing exceeding qualityConstraints.testCoverage targets",
      "Performance benchmarks achieved per strategicGuidance.performanceTarget",
      "Security implementation meets all qualityConstraints.securityRequirements",
      "Clean architecture following MCP implementationContext patterns"
    ],
    issues: [
      "Minor: Consider extracting validation logic as suggested in strategic guidance",
      "Documentation: Add performance optimization notes per architectural rationale"
    ],
    acceptanceCriteriaVerification: {
      "User registration": "verified and working with comprehensive validation per success criteria",
      "User login": "verified with JWT tokens per security requirements",
      "Password reset": "implemented with security best practices per strategic guidance"
    },
    qualityValidation: {
      testCoverage: "${actualCoverage}% (target: ${targetCoverage}%, status: EXCEEDED)",
      performanceMetrics: "Response times: ${actualTime}ms (target: ${targetTime}ms, status: ACHIEVED)",
      securityValidation: "All security requirements validated per quality constraints",
      codeQuality: "SOLID principles applied per strategic guidance pattern compliance",
      architecturalCompliance: "Implementation follows MCP architectural context requirements"
    },
    manualTestingResults: "All acceptance criteria verified manually with evidence collection per MCP requirements",
    strategicGuidanceCompliance: {
      architecturalContext: "Implementation properly follows MCP architectural guidance",
      patternCompliance: "All pattern requirements met per strategic guidance specifications",
      performanceTargets: "All performance benchmarks achieved with evidence",
      qualityConstraints: "All quality requirements satisfied with comprehensive validation"
    },
    mcpEvidence: {
      implementationAlignment: "Implementation fully aligns with MCP strategic guidance",
      qualityMetrics: "All MCP quality constraints met with documented evidence",
      performanceValidation: "All MCP performance targets achieved with benchmark validation",
      securityCompliance: "All MCP security requirements validated with comprehensive testing"
    }
  }
});
```

### Enhanced Completion Report Generation (1 MCP call)

```javascript
review_operations({
  operation: "create_completion",
  taskId: taskId,
  completionData: {
    summary: "Authentication implementation fully complete with comprehensive MCP compliance validation",
    filesModified: [
      "src/auth/auth.module.ts",
      "src/auth/jwt.strategy.ts",
      "src/auth/auth.service.ts",
      "src/auth/auth.controller.ts",
      "tests/unit/auth.service.test.ts",
      "tests/integration/auth.workflow.test.ts"
    ],
    acceptanceCriteriaVerification: {
      "User registration": "implemented and tested per success criteria with comprehensive validation",
      "User login": "implemented and tested with JWT tokens per strategic guidance",
      "Password reset": "implemented with security best practices per quality constraints"
    },
    implementationEvidence: {
      strategicGuidanceCompliance: "All MCP strategic guidance requirements implemented and validated",
      qualityConstraintsValidation: "All quality constraints satisfied with documented evidence",
      performanceTargetsAchievement: "All performance targets achieved per MCP specifications",
      securityRequirementsValidation: "All security requirements implemented per MCP constraints"
    },
    qualityValidation: {
      testingEvidence: "Comprehensive testing with ${actualCoverage}% coverage exceeding ${targetCoverage}% target",
      performanceEvidence: "Performance benchmarks achieved: ${actualMetrics} meeting ${targetMetrics}",
      securityEvidence: "Security validation completed per all MCP security requirements",
      codeQualityEvidence: "Code quality meets all MCP strategic guidance standards"
    },
    delegationSummary: "Successful role transitions through full workflow with MCP compliance tracking",
    workflowEfficiency: {
      mcpIntegration: "Seamless MCP integration throughout implementation workflow",
      qualityAssurance: "Comprehensive quality validation using MCP constraints and evidence",
      strategicAlignment: "Implementation perfectly aligned with MCP strategic guidance",
      evidenceCollection: "Complete evidence trail maintained through MCP context tracking"
    }
  }
});
```

## Phase 5: Enhanced Workflow Completion

### Task Completion and Handoff (1 MCP call)

```javascript
workflow_operations({
  operation: "complete",
  taskId: taskId,
  slug: slug,
  fromRole: "code-review",
  completionData: {
    summary: "Task [${slug}] completed with comprehensive quality validation and MCP compliance",
    filesModified: [
      "Complete list of all modified files with MCP strategic guidance compliance"
    ],
    acceptanceCriteriaVerification: {
      "Complete mapping of all acceptance criteria to validation evidence with MCP context"
    },
    qualityAssurance: {
      mcpCompliance: "Full compliance with all MCP strategic guidance and quality constraints",
      evidenceValidation: "Comprehensive evidence collection and validation per MCP requirements",
      performanceValidation: "All performance targets achieved per MCP specifications",
      securityValidation: "All security requirements validated per MCP constraints"
    },
    deliveryReadiness: {
      productionReady: "Implementation is production-ready with comprehensive MCP validation",
      documentationComplete: "All documentation updated per MCP architectural rationale",
      integrationValidated: "All integration points tested per MCP analysis",
      performanceOptimized: "Performance optimized per MCP strategic guidance"
    }
  }
});
```

**Total Code Review Phase: 3 MCP calls maximum**

## Enhanced Error Handling and Issue Resolution

### Issue Classification with MCP Context

```
MINOR ISSUES (Address with recommendations):
□ Code style inconsistencies that don't violate strategicGuidance.patternCompliance
□ Documentation improvements that enhance architectural rationale clarity
□ Performance optimizations that exceed strategicGuidance.performanceTarget
□ Test improvements that go beyond qualityConstraints.testCoverage requirements

MAJOR ISSUES (Require implementation changes):
□ Security vulnerabilities that violate qualityConstraints.securityRequirements
□ Performance failures that don't meet strategicGuidance.performanceTarget
□ Architectural violations that conflict with strategicGuidance.patternCompliance
□ Missing functionality that doesn't satisfy acceptance criteria or success criteria

BLOCKING ISSUES (Require redelegation):
□ Fundamental architectural problems that violate MCP implementationContext
□ Security issues that compromise system integrity per MCP security assessment
□ Performance issues that make system unusable per MCP performance baseline
□ Integration failures that break MCP integrationPoints compatibility
```

### Enhanced Redelegation Protocol with MCP Evidence

```javascript
workflow_operations({
  operation: "escalate",
  taskId: taskId,
  slug: slug,
  fromRole: "code-review",
  toRole: "architect", // or "senior-developer" based on issue type
  escalationData: {
    reason: "quality_standards_violation", // quality_standards_violation|performance_failure|security_vulnerability|architectural_violation
    severity: "high",
    issuesFound: [
      "Performance targets from strategicGuidance.performanceTarget not achieved",
      "Security requirements from qualityConstraints.securityRequirements not fully implemented",
      "Test coverage below qualityConstraints.testCoverage threshold"
    ],
    qualityAnalysis: {
      mcpComplianceGaps: "Specific areas where MCP strategic guidance was not followed",
      performanceDeficits: "Performance targets missed with specific metrics",
      securityConcerns: "Security requirements not met per quality constraints",
      testingInsufficiency: "Testing gaps that don't meet quality constraints"
    },
    evidenceRequired: [
      "Performance benchmark validation per strategicGuidance.performanceTarget",
      "Security validation per qualityConstraints.securityRequirements",
      "Test coverage evidence per qualityConstraints.testCoverage"
    ],
    mcpContextPreservation: {
      strategicGuidance: "Referenced MCP strategic guidance that needs better implementation",
      qualityConstraints: "Identified quality constraints that require additional work",
      evidenceGaps: "Missing evidence collection per MCP requirements"
    }
  }
});
```

## Enhanced Quality Assurance Features

### MCP-Driven Quality Excellence
```javascript
// Use MCP context for quality validation decisions
const qualityConstraints = mcpContext.data.implementationPlans[0].batches.map(batch => 
  batch.subtasks.map(subtask => subtask.qualityConstraints)
).flat();

const performanceTargets = mcpContext.data.implementationPlans[0].batches.map(batch =>
  batch.subtasks.map(subtask => subtask.strategicGuidance.performanceTarget)
).flat();

// Validate implementation against exact MCP specifications
```

### Evidence-Based Quality Validation
- Use MCP strategic guidance for quality criteria definition
- Leverage MCP quality constraints for pass/fail validation
- Reference MCP performance targets for benchmark validation
- Maintain comprehensive evidence trail through MCP context

### Strategic Communication Enhancement
- Reference specific MCP strategic guidance in review feedback
- Use MCP evidence for objective quality assessment
- Provide MCP-trackable improvement recommendations
- Include MCP compliance status in all review communications

### Continuous Quality Improvement
- Document quality patterns for future MCP strategic guidance updates
- Identify common issues for MCP quality constraint enhancement
- Provide feedback for MCP strategic guidance improvement
- Contribute to MCP codebase analysis updates based on review findings