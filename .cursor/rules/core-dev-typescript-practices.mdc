---
description: 
globs: 
alwaysApply: true
---
# Core Software Development Principles & TypeScript Best Practices

This document consolidates fundamental software design principles (SOLID, KISS, DRY) and TypeScript best practices to guide the development of high-quality, maintainable, and scalable software.

## Part 1: Fundamental Software Design Principles

### 1.1. KISS Principle (Keep It Simple, Stupid)

#### Overview
The KISS principle states that most systems work best if they are kept simple rather than made complicated; therefore, simplicity should be a key goal in design, and unnecessary complexity should be avoided.

#### Core Idea
-   **Simplicity is Key**: Strive for the simplest possible solution that effectively solves the problem.
-   **Avoid Over-Engineering**: Do not add complexity for future, hypothetical needs. Address current requirements first.
-   **Clarity over Cleverness**: Write code that is easy to understand and maintain, even if it means sacrificing a bit of conciseness or perceived cleverness.

#### Benefits
-   Easier to Understand
-   Easier to Maintain
-   Reduced Development Time
-   Increased Reliability
-   Lower Cost
-   Improved Debugging

#### Application in Software Development
-   Break Down Problems into smaller, simpler sub-problems.
-   Use Simple Language in code and documentation.
-   Refactor Regularly to simplify and remove unnecessary complexity.
-   Question Requirements to ensure necessity and value.
-   Avoid Premature Optimization; focus on a clean, simple, correct solution first.
-   Limit Abstractions judiciously.
-   Favor Standard Solutions (well-known patterns, libraries, tools).
-   Focus on the Core Problem.

#### Example
**Problem**: A user needs notification for task completion.
-   **Complex**: Multi-channel (email, SMS, push), templates, retries, detailed logging.
-   **KISS**: Simple in-app notification initially; add features incrementally as required.

### 1.2. DRY Principle (Don't Repeat Yourself)

#### Overview
"Every piece of knowledge must have a single, unambiguous, authoritative representation within a system." - Andy Hunt & Dave Thomas, "The Pragmatic Programmer."

#### Core Idea
-   **Single Source of Truth**: Each piece of knowledge or logic in one place.
-   **Avoid Redundancy**: Minimize duplication of code, data, or configuration.
-   **Focus on Abstraction**: Encapsulate common logic in functions, classes, or modules.

#### Benefits
-   Maintainability (changes in one place)
-   Readability (cleaner code)
-   Reduced Bugs (less code, centralized fixes)
-   Reusability
-   Testability (centralized logic)
-   Efficiency (less time on redundant code)

#### Application in Software Development
-   **Functions/Methods**: Encapsulate repeated code blocks.
-   **Classes/Inheritance**: Share common behavior/attributes.
-   **Composition**: Build complex objects from simpler, reusable parts.
-   **Modules/Libraries**: Group related functionalities.
-   **Configuration Files**: Centralize configuration data.
-   **Constants/Enums**: Define once, reuse.
-   **Data Normalization**: Avoid redundancy in databases.
-   **Templates**: For repetitive structures (HTML, emails).
-   **Helper Utilities**: For common tasks.

#### WET vs. DRY
WET ("Write Everything Twice" or "Waste Everyone's Time") signifies duplicated, hard-to-maintain code.

#### The Rule of Three (When Not to Be Too DRY)
1.  First time: Just do it.
2.  Second time (similar): Wince, but duplicate.
3.  Third time (similar): Refactor and create an abstraction.
    (Ensures abstractions are based on real patterns.)

#### Example: Rectangle Area
-   **WET**: `areaA = widthA * heightA; areaB = widthB * heightB;`
-   **DRY**: `function calcArea(w, h) { return w * h; } areaA = calcArea(wA, hA); areaB = calcArea(wB, hB);`

### 1.3. SOLID Principles

SOLID is an acronym for five design principles for understandable, flexible, and maintainable software.

#### 1.3.1. Single Responsibility Principle (SRP)
**A class should have only one reason to change.** (One job/responsibility).
-   **Benefits**: Reduced complexity, readability, lower coupling, easier testing/maintenance.
-   **Example**: Separate `ReportGenerator` and `ReportFormatter` instead of one `Report` class doing both.

#### 1.3.2. Open/Closed Principle (OCP)
**Software entities should be open for extension, but closed for modification.** (Add new functionality without changing existing code, often via interfaces/abstract classes).
-   **Benefits**: Extensibility without risk, improved maintainability, reduced impact of changes.
-   **Example**: Plugin architecture or strategy pattern where new strategies are added without modifying the context.

#### 1.3.3. Liskov Substitution Principle (LSP)
**Subtypes must be substitutable for their base types.** (Objects of type T can be replaced with objects of subtype S without altering program properties).
-   **Benefits**: Well-designed hierarchies, reusability, reduced unexpected behavior.
-   **Example**: A `Penguin` (non-flying bird) shouldn't directly inherit `fly()` from `Bird`. Consider `FlyingBird` subclass or `CanFly` interface.

#### 1.3.4. Interface Segregation Principle (ISP)
**Clients should not be forced to depend on interfaces they do not use.** (Prefer smaller, client-specific interfaces over "fat" interfaces).
-   **Benefits**: Reduced coupling, increased cohesion, better system flexibility.
-   **Example**: Instead of `Worker` with `work()`, `eat()`, `sleep()`, use `IWorkable`, `IEatable`, `ISleepable`. `RobotWorker` implements `IWorkable`.

#### 1.3.5. Dependency Inversion Principle (DIP)
**A. High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces).**
**B. Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.** (Decoupling high-level policy from low-level implementation, often via DI).
-   **Benefits**: Increased flexibility, testability, maintainability; reduced coupling.
-   **Example**: `NotificationService` (high-level) depends on `IMessageSender` interface, not directly on `EmailSender` (low-level). `EmailSender` implements `IMessageSender`.

## Part 2: TypeScript Best Practices

This section outlines best practices for developing with TypeScript to ensure code quality, maintainability, and scalability.

### 2.1. Typing Strategies
#### 2.1.1. Prefer Specific Types Over `any`
Avoid `any` to leverage TypeScript's type checking.
   - **Bad:** `function process(data: any) { ... }`
   - **Good:** `function process(data: MySpecificType | AnotherType) { ... }` or use generics.

#### 2.1.2. Use `unknown` for Unsafe Values
For values truly unknown at compile time (e.g., API responses), use `unknown` and perform type checking/casting.
   - **Example:**
     ```typescript
     async function fetchData(): Promise<unknown> { /* ... */ }
     const response = await fetchData();
     if (typeof response === 'string') { console.log(response.toUpperCase()); }
     ```

#### 2.1.3. Utilize Utility Types
Use built-in types like `Partial<T>`, `Readonly<T>`, `Pick<T, K>`, `Omit<T, K>`, `ReturnType<T>`.

#### 2.1.4. Use `const` Assertions for Immutable Literals
For literals that shouldn't change: `as const`.
   - **Example:**
     ```typescript
     const httpMethods = ['GET', 'POST'] as const;
     type HttpMethod = typeof httpMethods[number];
     ```

#### 2.1.5. Define Return Types Explicitly
Enhances clarity and error catching, even if inferable.
   - **Good:** `function add(a: number, b: number): number { return a + b; }`

### 2.2. Interfaces vs. Type Aliases
-   **Interfaces (`interface`)**: Prefer for object/class shapes, better for declaration merging.
    ```typescript
    interface UserProfile { id: number; username: string; }
    ```
-   **Type Aliases (`type`)**: For complex types (unions, intersections), primitives, tuples.
    ```typescript
    type UserId = string | number;
    type UserWithRoles = UserProfile & { roles: string[] };
    ```

### 2.3. Enums
#### 2.3.1. Use String Enums for Readability
Provide better debugging experiences.
   - **Good:** `enum LogLevel { Error = "ERROR", Warning = "WARNING" }`
#### 2.3.2. Consider `const enums` for Performance
Inlined, but with limitations (e.g., no runtime iteration).

### 2.4. Modules and Imports
-   **ES Modules Syntax**: Prefer `import`/`export`.
-   **Organize Imports**: Group by source (standard, third-party, internal).
-   **Barrel Files (`index.ts`)**: Use sparingly to avoid large bundles/circular dependencies.

### 2.5. Classes
#### 2.5.1. Use `readonly` for Immutable Properties
If values shouldn't change after initialization.
   - **Example:** `class User { readonly id: number; ... }`

#### 2.5.2. Encapsulation
Use access modifiers (`public`, `private`, `protected`). Default is `public`.

#### 2.5.3. Constructor Shorthand
For initializing class properties.
   - **Good:** `class Product { constructor(public readonly id: string, private price: number) {} }`

### 2.6. Functions
#### 2.6.1. Arrow Functions vs. Function Declarations
-   **Arrow Functions**: Preserve `this` context (callbacks, class methods).
-   **Function Declarations**: Hoisted.

#### 2.6.2. Optional and Default Parameters
Use `?` for optional, provide defaults.
   - **Example:** `function greet(name: string, greeting?: string = "Hello"): string { ... }`

### 2.7. Error Handling
#### 2.7.1. Use Custom Error Types
Extend `Error` for specific error handling.
   - **Example:** `class NetworkError extends Error { constructor(m: string, public code?: number) { super(m); this.name = "NetworkError"; } }`

#### 2.7.2. Be Specific in `catch` Blocks
Check error types when possible.
   - **Example:** `catch (error) { if (error instanceof NetworkError) { ... } ... }`

### 2.8. Tooling
#### 2.8.1. Strict Mode in `tsconfig.json`
Enable `"strict": true` (includes `noImplicitAny`, `strictNullChecks`, etc.).

#### 2.8.2. Linter and Formatter
Use ESLint (`@typescript-eslint/eslint-plugin`) and Prettier.

### 2.9. Asynchronous Code
#### 2.9.1. Prefer `async/await`
For cleaner async code over raw Promises/callbacks.

#### 2.9.2. Type Promises Correctly
   - **Good:** `async function getUser(id: string): Promise<UserProfile | null> { ... }`

### 2.10. Generics
Write reusable code working over various types.
   - **Example:** `function identity<T>(arg: T): T { return arg; }`

By adhering to these principles and practices, development efforts can yield more robust, maintainable, and understandable software.

