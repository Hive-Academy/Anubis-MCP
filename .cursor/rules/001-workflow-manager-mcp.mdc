---
description: 
globs: 
alwaysApply: true
---
# Workflow Manager MCP: Key Patterns and Examples

This guide provides essential patterns and examples for common operations with the Workflow Manager MCP server. Use alongside the schema definitions for efficient operations.

## Query Patterns

### Basic Entity Query
```json
{
  "entity": "task",
  "where": { "status": "in-progress" }
}
```

### Query with Related Data
```json
{
  "entity": "task",
  "where": { "taskId": "TSK-123" },
  "include": {
    "taskDescription": true,
    "subtasks": true
  }
}
```

### Filtered Related Data
```json
{
  "entity": "implementationPlan",
  "where": { "taskId": "TSK-123" },
  "include": {
    "subtasks": {
      "where": { "status": "not-started" },
      "orderBy": { "sequenceNumber": "asc" }
    }
  }
}
```

## Mutation Patterns

### Create Task with Description
```json
// Create task
{
  "operation": "create",
  "entity": "task",
  "data": {
    "taskId": "TSK-123",
    "name": "Implement Authentication",
    "status": "not-started"
  }
}

// Then add description
{
  "operation": "create",
  "entity": "taskDescription",
  "data": {
    "taskId": "TSK-123",
    "description": "Implement JWT authentication",
    "businessRequirements": "Users need secure login",
    "technicalRequirements": "Use JWT with secure storage",
    "acceptanceCriteria": ["User registration", "User login"]
  }
}
```

### Create Implementation Plan with Subtasks (Critical Pattern)
```json
// 1. Create implementation plan
{
  "operation": "create",
  "entity": "implementationPlan",
  "data": {
    "taskId": "TSK-123",
    "overview": "Authentication implementation",
    "approach": "Using JWT tokens",
    "technicalDecisions": "Using jsonwebtoken library",
    "filesToModify": ["src/auth/*"],
    "createdBy": "architect"
  }
}

// 2. Create subtasks batch (ALWAYS use createMany)
{
  "operation": "createMany",
  "entity": "subtask",
  "data": [
    {
      "taskId": "TSK-123",
      "planId": 5,  // MUST be a number
      "name": "Setup Authentication Module",
      "description": "Create module structure",
      "sequenceNumber": 1,  // MUST be a number
      "status": "not-started",
      "batchId": "AUTH-BATCH"
    },
    {
      "taskId": "TSK-123",
      "planId": 5,
      "name": "Implement JWT Strategy",
      "description": "JWT implementation",
      "sequenceNumber": 2,
      "status": "not-started",
      "batchId": "AUTH-BATCH"
    }
  ]
}
```

### Batch Status Update
```json
{
  "operation": "updateMany",
  "entity": "subtask",
  "where": { 
    "batchId": "AUTH-BATCH",
    "taskId": "TSK-123"
  },
  "data": { 
    "status": "completed"
  }
}
```

## Workflow Operation Patterns

### Task Delegation
```json
{
  "operation": "delegate",
  "taskId": "TSK-123",
  "fromRole": "architect",
  "toRole": "senior-developer",
  "message": "Implementation plan ready. Please implement."
}
```

### Task Completion
```json
{
  "operation": "complete",
  "taskId": "TSK-123",
  "fromRole": "senior-developer",
  "completionData": {
    "summary": "Authentication implementation complete",
    "filesModified": ["src/auth/*"],
    "acceptanceCriteriaVerification": {
      "User registration": "implemented",
      "User login": "implemented"
    }
  }
}
```

### Issue Escalation
```json
{
  "operation": "escalate",
  "taskId": "TSK-123",
  "fromRole": "senior-developer",
  "toRole": "architect",
  "rejectionData": {
    "reason": "Technical blocker: Library compatibility issue",
    "severity": "high",
    "blockers": ["Dependency conflict"]
  }
}
```

## Critical Type Requirements

### Numbers vs Strings
- `planId` must be a number: `"planId": 5` (not `"planId": "5"`)
- `sequenceNumber` must be a number: `"sequenceNumber": 1` (not `"sequenceNumber": "1"`)
- `subtaskId` must be a number: `"subtaskId": 3` (not `"subtaskId": "3"`)

### Arrays vs Objects
- For `createMany`, data must be an array: `"data": [{ ... }, { ... }]`
- For JSON fields, use arrays or objects as appropriate:
  - `"acceptanceCriteria": ["Criterion 1", "Criterion 2"]`
  - `"technologyStack": { "framework": "NestJS" }`

## Common Workflow Sequence

1. Create task → Add task description
2. Delegate to researcher → Create research report → Delegate back
3. Delegate to architect → Create implementation plan → Create subtasks
4. Delegate to developer → Update subtask status → Complete implementation
5. Delegate to code review → Create code review → Delegate back
6. Complete task

## Common Status and Role Values

### Status Values
- Task/Subtask: "not-started", "in-progress", "needs-review", "completed", "needs-changes"
- Code Review: "APPROVED", "APPROVED_WITH_RESERVATIONS", "NEEDS_CHANGES"

### Role Values
- "boomerang", "researcher", "architect", "senior-developer", "code-review"