{
  "serviceOrchestrationProtocols": {
    "description": "Internal service orchestration protocols for architectural operations replacing direct MCP calls",
    "coreOrchestrator": "CoreServiceOrchestrator",
    "supportedServices": {
      "TaskOperations": {
        "service": "TaskOperationsService",
        "operations": ["get", "update", "list"],
        "description": "Task context acquisition and architectural updates",
        "usageContext": "Architectural context acquisition, design decisions storage, progress updates"
      },
      "PlanningOperations": {
        "service": "PlanningOperationsService",
        "operations": [
          "create_plan",
          "update_plan",
          "get_plan",
          "create_subtasks",
          "update_batch",
          "get_batch"
        ],
        "description": "Implementation planning and strategic batch management",
        "usageContext": "Implementation plan creation, strategic batch design, subtask organization"
      },
      "WorkflowOperations": {
        "service": "WorkflowOperationsService",
        "operations": ["delegate", "escalate", "complete"],
        "description": "Workflow coordination and role delegation",
        "usageContext": "Architectural delegation to senior developer, escalation to boomerang, workflow transitions"
      },
      "ReviewOperations": {
        "service": "ReviewOperationsService",
        "operations": ["create_review", "update_review", "get_review"],
        "description": "Quality review and architectural validation",
        "usageContext": "Architectural quality validation, design review, SOLID principles verification"
      },
      "ResearchOperations": {
        "service": "ResearchOperationsService",
        "operations": ["get_research", "add_comment", "get_comments"],
        "description": "Research findings integration and knowledge management",
        "usageContext": "Research findings integration, architectural decision documentation, knowledge capture"
      }
    },
    "orchestrationPatterns": {
      "contextAcquisition": {
        "pattern": "TaskOperations.get → ResearchOperations.get_research → PlanningOperations.get_plan",
        "description": "Comprehensive context acquisition including task, research, and existing planning",
        "services": [
          "TaskOperations",
          "ResearchOperations",
          "PlanningOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "architecturalAnalysis": {
        "pattern": "TaskOperations.get → ResearchOperations.get_research → ReviewOperations.create_review",
        "description": "Analyze architectural context with research integration and quality validation",
        "services": [
          "TaskOperations",
          "ResearchOperations",
          "ReviewOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "implementationPlanning": {
        "pattern": "PlanningOperations.create_plan → PlanningOperations.create_subtasks → TaskOperations.update",
        "description": "Create comprehensive implementation plan with strategic batches",
        "services": ["PlanningOperations", "TaskOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      },
      "qualityGateDefinition": {
        "pattern": "ReviewOperations.create_review → PlanningOperations.update_plan → TaskOperations.update",
        "description": "Define quality gates and update implementation plan with validation criteria",
        "services": [
          "ReviewOperations",
          "PlanningOperations",
          "TaskOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "architecturalDelegation": {
        "pattern": "TaskOperations.update → ResearchOperations.add_comment → WorkflowOperations.delegate",
        "description": "Document architectural decisions and delegate to senior developer",
        "services": [
          "TaskOperations",
          "ResearchOperations",
          "WorkflowOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      },
      "escalationHandling": {
        "pattern": "ResearchOperations.add_comment → ReviewOperations.create_review → WorkflowOperations.escalate",
        "description": "Document architectural blockage and escalate to boomerang",
        "services": [
          "ResearchOperations",
          "ReviewOperations",
          "WorkflowOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      }
    },
    "actionTypeMapping": {
      "MCP_CALL": {
        "executor": "StepActionExecutor.executeServiceCall",
        "orchestrator": "CoreServiceOrchestrator.executeServiceCall",
        "validation": "CoreServiceOrchestrator.validateServiceCall",
        "errorHandling": "ServiceCallResult with success/error status"
      },
      "PATTERN_ANALYSIS": {
        "executor": "StepActionExecutor.executePatternAnalysis",
        "description": "Execute architectural pattern analysis with MCP context integration",
        "errorHandling": "ActionExecutionResult with pattern analysis results"
      },
      "SOLUTION_DESIGN": {
        "executor": "StepActionExecutor.executeSolutionDesign",
        "description": "Execute solution design with SOLID principles validation",
        "errorHandling": "ActionExecutionResult with design decisions and rationale"
      },
      "SOLID_VALIDATION": {
        "executor": "StepActionExecutor.executeSolidValidation",
        "description": "Validate SOLID principles compliance in architectural design",
        "errorHandling": "ActionExecutionResult with compliance assessment"
      },
      "BATCH_DESIGN": {
        "executor": "StepActionExecutor.executeBatchDesign",
        "description": "Execute strategic batch design with 3-8 subtasks per batch",
        "errorHandling": "ActionExecutionResult with batch organization and guidance"
      },
      "QUALITY_GATE_DEFINITION": {
        "executor": "StepActionExecutor.executeQualityGateDefinition",
        "description": "Define comprehensive quality gates with measurable criteria",
        "errorHandling": "ActionExecutionResult with quality gate specifications"
      },
      "ARCHITECTURAL_DOCUMENTATION": {
        "executor": "StepActionExecutor.executeArchitecturalDocumentation",
        "description": "Document architectural decisions with evidence-based rationale",
        "errorHandling": "ActionExecutionResult with documentation results"
      },
      "INTEGRATION_STRATEGY": {
        "executor": "StepActionExecutor.executeIntegrationStrategy",
        "description": "Define integration strategy with existing architectural patterns",
        "errorHandling": "ActionExecutionResult with integration approach"
      },
      "PERFORMANCE_TARGET_DEFINITION": {
        "executor": "StepActionExecutor.executePerformanceTargetDefinition",
        "description": "Define performance targets based on MCP baseline metrics",
        "errorHandling": "ActionExecutionResult with performance specifications"
      },
      "DELEGATION_PREPARATION": {
        "executor": "StepActionExecutor.executeDelegationPreparation",
        "description": "Prepare comprehensive delegation context for role transitions",
        "errorHandling": "ActionExecutionResult with delegation context"
      },
      "COMMAND": {
        "executor": "StepActionExecutor.executeCommand",
        "description": "Shell command execution for architectural tools",
        "errorHandling": "ActionExecutionResult with command results"
      },
      "VALIDATION": {
        "executor": "StepActionExecutor.executeValidation",
        "description": "Validation logic execution for architectural quality",
        "errorHandling": "ActionExecutionResult with validation results"
      },
      "REMINDER": {
        "executor": "StepActionExecutor.executeReminder",
        "description": "Architectural milestone reminders and notifications",
        "errorHandling": "Always successful"
      }
    },
    "serviceCallProtocol": {
      "validation": {
        "step1": "CoreServiceOrchestrator.validateServiceCall(serviceName, operation, parameters)",
        "step2": "Validate architectural-specific parameters and design requirements",
        "step3": "Ensure SOLID principles compliance and quality standards",
        "step4": "Return validation result with architectural-specific checks"
      },
      "execution": {
        "step1": "CoreServiceOrchestrator.executeServiceCall(serviceName, operation, parameters)",
        "step2": "Delegate to appropriate architectural service through delegateServiceCall()",
        "step3": "Handle architectural-specific response processing and design validation",
        "step4": "Return ServiceCallResult with architectural metrics and quality assessment"
      },
      "errorHandling": {
        "serviceNotFound": "Return error with architectural service availability message",
        "operationFailed": "Return ServiceCallResult with architectural-specific error details",
        "validationFailed": "Return architectural validation error before execution",
        "solidComplianceFailed": "Handle SOLID principles compliance validation failures",
        "qualityGateFailed": "Handle quality gate validation failures",
        "timeout": "Handle architectural service call timeouts with partial results"
      }
    },
    "qualityStandards": {
      "architecturalValidation": [
        "All architectural decisions must follow SOLID principles",
        "Design patterns must be compatible with existing MCP architectural context",
        "Quality gates must be measurable and enforceable",
        "Performance targets must be based on established baseline metrics"
      ],
      "serviceCallValidation": [
        "All service calls must include architectural context and design requirements",
        "Parameters must include SOLID principles compliance requirements",
        "Error handling must preserve architectural decisions and design rationale",
        "Service responses must be validated for architectural quality standards"
      ],
      "orchestrationPrinciples": [
        "Use CoreServiceOrchestrator for all architectural service coordination",
        "Implement comprehensive error handling with architectural context preservation",
        "Maintain architectural quality metrics and design decision tracking",
        "Ensure proper context preservation across architectural service calls"
      ],
      "designStandards": [
        "SOLID principles compliance required for all design decisions",
        "Architectural patterns must enhance rather than conflict with existing systems",
        "Quality gates must include measurable validation criteria",
        "Performance targets must be realistic and based on established baselines"
      ],
      "errorRecovery": [
        "Implement graceful degradation for architectural service failures",
        "Preserve architectural decisions and design rationale for recovery",
        "Provide meaningful error messages with architectural continuation guidance",
        "Support retry mechanisms for transient architectural service failures"
      ]
    },
    "architecturalSpecificProtocols": {
      "solidPrinciplesValidation": {
        "singleResponsibility": "Validate each class/service has one reason to change",
        "openClosed": "Ensure extensibility through inheritance/composition, not modification",
        "liskovSubstitution": "Verify derived classes are substitutable for base classes",
        "interfaceSegregation": "Confirm clients depend only on interfaces they use",
        "dependencyInversion": "Validate dependence on abstractions, not concretions"
      },
      "qualityGateDefinition": {
        "codeQuality": "Define SOLID compliance, test coverage, and documentation standards",
        "performance": "Establish response times, query efficiency, and resource usage targets",
        "security": "Specify input validation, authentication, and authorization requirements",
        "integration": "Define API contracts, error handling, and monitoring standards"
      },
      "batchDesignPrinciples": {
        "optimalSize": "Design batches with 3-8 subtasks for optimal management",
        "dependencyTracking": "Organize batches based on implementation dependencies",
        "strategicGuidance": "Provide comprehensive guidance for each subtask",
        "qualityConstraints": "Establish measurable quality constraints and success criteria"
      },
      "implementationPlanning": {
        "foundationFirst": "Infrastructure and core components in first batch",
        "businessLogicSecond": "Domain implementation and business rules in second batch",
        "integrationThird": "APIs and external services in third batch",
        "qualityAssuranceFourth": "Testing and documentation in final batch"
      },
      "delegationPreparation": {
        "architecturalContext": "Document all architectural decisions with rationale",
        "strategicGuidance": "Provide comprehensive implementation guidance",
        "qualityRequirements": "Communicate quality standards and validation criteria",
        "supportAvailability": "Establish ongoing architectural support availability"
      }
    }
  }
}
