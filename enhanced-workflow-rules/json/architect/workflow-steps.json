{
  "workflowSteps": [
    {
      "name": "iterative_planning_and_subtask_creation",
      "displayName": "Iterative Planning and Subtask Creation with Context Preservation",
      "description": "Create implementation plan and subtasks iteratively in one step to maintain context and ensure alignment with actual task requirements",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "35-45 minutes",
      "stepType": "ITERATIVE_ACTION",
      "behavioralContext": {
        "approach": "Iterative planning with immediate subtask creation to preserve context and ensure task alignment",
        "principles": [
          "MANDATORY: Get comprehensive task context first (TaskOperations.get)",
          "MANDATORY: Create or update implementation plan based on actual task requirements",
          "MANDATORY: Immediately create subtasks while context is fresh",
          "MANDATORY: Validate subtasks align with actual task goals (not generic validation)",
          "MANDATORY: Focus on ACTUAL WORK needed, not meta-analysis tasks",
          "NEVER create documentation subtasks - integration-engineer role handles all documentation"
        ],
        "methodology": "Context-preserving iterative planning with immediate subtask creation and validation",
        "iterativePlanningCycle": {
          "getTaskContext": "Use TaskOperations.get with comprehensive inclusion to understand actual requirements",
          "analyzePlanNeeds": "Determine if plan exists and if it matches actual task requirements",
          "createOrUpdatePlan": "Create new plan or update existing plan based on actual task needs",
          "immediateSubtaskCreation": "Create subtasks immediately while context is fresh",
          "validateAlignment": "Validate subtasks actually accomplish the task goals",
          "refineIfNeeded": "Refine plan/subtasks if they don't match actual requirements"
        },
        "contextPreservation": {
          "taskRequirements": "Keep actual task description and goals at forefront",
          "codebaseAnalysis": "Use existing codebase analysis without re-analysis",
          "realWork": "Focus on actual implementation work, not meta-validation",
          "documentationExclusion": "NEVER create subtasks for documentation - integration-engineer handles this"
        },
        "subtaskFocus": {
          "includeInSubtasks": [
            "Code implementation and refactoring",
            "Unit and integration testing",
            "Performance optimization",
            "Security implementation",
            "Error handling and validation",
            "Configuration and setup changes",
            "Database schema changes",
            "API endpoint implementation"
          ],
          "excludeFromSubtasks": [
            "Documentation updates (README, memory bank, etc.)",
            "Content analysis and validation scripts",
            "Business value validation scripts",
            "Quality gate definition scripts",
            "Meta-analysis tasks",
            "Pull request creation",
            "Git operations and commits",
            "Deployment and integration tasks"
          ]
        },
        "solidPrinciples": {
          "singleResponsibility": "Each class/service has one reason to change",
          "openClosed": "Extensible through inheritance/composition, not modification",
          "liskovSubstitution": "Derived classes substitutable for base classes",
          "interfaceSegregation": "Clients depend only on interfaces they use",
          "dependencyInversion": "Depend on abstractions, not concretions"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute TaskOperations.get with comprehensive inclusion to get task details and codebase analysis",
          "Analyze actual task requirements - what REAL WORK needs to be done?",
          "Check if existing plan exists using PlanningOperations.get_plan",
          "Create new plan or update existing plan based on ACTUAL task requirements (not generic validation)",
          "Immediately create subtasks using PlanningOperations.create_subtasks while context is fresh",
          "Validate subtasks actually accomplish the task goals (not meta-analysis)",
          "If subtasks don't align with actual work needed, refine plan and recreate subtasks",
          "Ensure subtasks focus on REAL IMPLEMENTATION WORK, not documentation or validation scripts"
        ],
        "contextAnalysisSteps": [
          "Read task name and description carefully - what is the user actually asking for?",
          "Identify the REAL WORK needed (code changes, feature implementation, bug fixes)",
          "Use existing codebase analysis without re-analyzing",
          "Distinguish between actual implementation work vs meta-tasks",
          "Focus on deliverables that directly satisfy user requirements"
        ],
        "planCreationSteps": [
          "Design solution approach using SOLID, KISS and DRY principles",
          "Create implementation plan focused on ACTUAL WORK needed",
          "Include architectural context from existing codebase analysis",
          "Define quality constraints and success criteria for REAL deliverables",
          "Document approach that directly addresses user requirements"
        ],
        "subtaskCreationSteps": [
          "Create subtasks that directly implement the required functionality",
          "Provide comprehensive strategic guidance for each subtask",
          "Include architectural context, implementation specifics, and code examples",
          "Define measurable success criteria and validation requirements",
          "Focus ONLY on code implementation, testing, and technical tasks",
          "EXCLUDE documentation, meta-analysis, and validation script tasks"
        ],
        "validationSteps": [
          "Review created subtasks against original task requirements",
          "Ensure subtasks accomplish the actual user request",
          "Verify no meta-analysis or documentation subtasks were created",
          "Confirm subtasks focus on real implementation work",
          "Refine if subtasks don't directly address task goals"
        ]
      },
      "qualityChecklist": [
        "Task context and codebase analysis retrieved and understood",
        "Implementation plan created or updated based on ACTUAL task requirements",
        "Subtasks created immediately while context is fresh",
        "Subtasks focus on REAL IMPLEMENTATION WORK, not meta-analysis",
        "NO documentation subtasks created - integration-engineer handles documentation",
        "Subtasks directly accomplish the user's actual request",
        "Quality constraints and success criteria defined for real deliverables",
        "Plan and subtasks validated against original task goals"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "acquire_comprehensive_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get"
          },
          "sequenceOrder": 1
        },
        {
          "name": "check_existing_plan",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "get_plan"
          },
          "sequenceOrder": 2
        },
        {
          "name": "create_or_update_plan",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "{{create_or_update_based_on_existing}}"
          },
          "sequenceOrder": 3
        },
        {
          "name": "create_aligned_subtasks",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "create_subtasks"
          },
          "sequenceOrder": 4
        }
      ],
      "triggerReport": true,
      "reportType": "iterative_planning_and_subtask_creation",
      "reportTemplate": "context_preserving_planning_report"
    },
    {
      "name": "role_transition_to_senior_developer",
      "displayName": "Role Transition to Senior Developer",
      "description": "Execute role transition directly to senior developer with comprehensive strategic context and implementation readiness",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "5-8 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Two-step role transition: get correct transition ID first, then execute transition",
        "principles": [
          "MANDATORY: Use get_role_transitions tool first to get correct transition ID",
          "NEVER use placeholder transition IDs - always get the actual ID from get_role_transitions",
          "Execute transition with proper transition ID obtained from get_role_transitions",
          "Provide complete strategic context and architectural guidance in handoffMessage",
          "Ensure implementation readiness with clear quality requirements and database delegation record creation"
        ],
        "methodology": "Two-step transition process: ID retrieval then execution with strategic implementation guidance",
        "transitionStrategy": {
          "step1": "Use get_role_transitions to get available transitions and correct transitionId",
          "step2": "Use execute_transition tool with the obtained transitionId (not placeholder)",
          "contextPreservation": "Include complete strategic context and architectural guidance in handoffMessage",
          "databaseIntegration": "Ensure delegation record is created in database via RoleTransitionService"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "STEP 1: Execute get_role_transitions tool with fromRoleName: 'architect', taskId, and roleId to get available transitions",
          "Extract the correct transitionId from the get_role_transitions response (likely 'architect_to_senior_developer')",
          "STEP 2: Execute execute_transition tool with the obtained transitionId, taskId, roleId, and comprehensive handoffMessage",
          "Include strategic context, architectural guidance, and implementation priorities in handoffMessage",
          "Verify transition success and confirm delegation record creation",
          "Ensure quality requirements and success criteria are understood for immediate productive work"
        ],
        "transitionExecutionSteps": [
          "Call get_role_transitions with fromRoleName: 'architect', taskId, and roleId to get transition options",
          "Use the transitionId returned in the response (NEVER use placeholder IDs)",
          "Call execute_transition tool with the obtained transitionId",
          "Provide comprehensive handoffMessage with strategic guidance and implementation context"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions tool executed first with fromRoleName: 'architect', taskId, and roleId",
        "Correct transitionId obtained from get_role_transitions response (not placeholder)",
        "execute_transition tool executed with proper transitionId from get_role_transitions",
        "Comprehensive handoffMessage includes strategic context and architectural guidance",
        "TaskId and roleId provided from current workflow context",
        "Implementation priorities and architectural guidance communicated in handoffMessage",
        "Transition success verified and delegation record creation confirmed",
        "Quality requirements and success criteria clearly understood for immediate productive implementation work"
      ],
      "conditions": [
        {
          "name": "planning_and_subtasks_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "iterative_planning_and_subtask_creation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "role_transition_execution",
      "reportTemplate": "direct_role_transition_to_senior_developer"
    }
  ]
}
