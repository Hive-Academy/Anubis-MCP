{
  "workflowSteps": [
    {
      "name": "context_gathering_and_analysis",
      "description": "Gather and analyze all relevant task context, including description, codebase analysis, and research findings.",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligently retrieve comprehensive task information to build a foundation for strategic planning.",
      "approachGuidance": {
        "stepByStep": [
          "Review message history to identify existing context and requirements provided by the boomerang role.",
          "If context is insufficient, execute the 'TaskOperations.get' MCP operation to fetch the full task details.",
          "Ensure the MCP call includes parameters to retrieve the description, codebase analysis, research findings, and any existing subtasks.",
          "When making the MCP call, use serviceName: 'TaskOperations', operation: 'get', with includeDescription: true, includeAnalysis: true, includeResearch: true, includeCodeReviews: true.",
          "Only execute the MCP call conditionally if context is missing from message history.",
          "Synthesize all gathered information to form a complete understanding of the task's objectives, constraints, and technical landscape."
        ]
      },
      "qualityChecklist": [
        "Message history reviewed for initial context.",
        "Task description, business requirements, and acceptance criteria are fully understood.",
        "Codebase analysis from the boomerang role has been reviewed and comprehended.",
        "Research findings and recommendations have been analyzed.",
        "A comprehensive understanding of the task is achieved before proceeding to planning."
      ],
      "conditions": []
    },
    {
      "name": "strategic_subtask_creation",
      "description": "CRITICAL: Create highly-detailed, actionable subtasks ONE-BY-ONE with deep contextual analysis and precise implementation guidance.",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Perform comprehensive context analysis, then create meticulous, individually-crafted subtasks with complete implementation guidance, code examples, and architectural integration.",
      "approachGuidance": {
        "stepByStep": [
          "‚ö†Ô∏è CRITICAL PROTOCOL: You are the bridge between Boomerang's analysis and Senior Developer's implementation. Your subtasks must be implementation-ready with zero ambiguity.",
          "üîç PHASE 1: DEEP CONTEXT ANALYSIS - Before creating ANY subtasks, perform comprehensive analysis:",
          "1. BUSINESS CONTEXT ANALYSIS: Extract the core business objective, user impact, and success metrics from the task requirements.",
          "2. TECHNICAL LANDSCAPE MAPPING: Analyze the existing codebase architecture, identify patterns, frameworks, conventions, and integration points.",
          "3. REQUIREMENT DECOMPOSITION: Break down the task into logical, implementable units considering data flow, user interactions, and system boundaries.",
          "4. RISK ASSESSMENT: Identify technical risks, breaking changes, performance implications, and security considerations.",
          "5. DEPENDENCY ANALYSIS: Map out what existing components, services, APIs, and external dependencies will be affected or utilized.",
          "üèóÔ∏è PHASE 2: CONTEXTUAL SUBTASK ARCHITECTURE - Create implementation-ready subtasks:",
          "6. SUBTASK PRIORITIZATION: Determine the logical order of implementation based on dependencies and risk factors.",
          "7. For each subtask, follow the ENHANCED CREATION PROTOCOL:",
          "   a) CONTEXT EMBEDDING: Link directly to business requirement and explain the WHY behind this specific change",
          "   b) TECHNICAL PRECISION: Provide EXACT file paths, function names, class names, and directory structures",
          "   c) IMPLEMENTATION APPROACH: Include complete code examples, configuration changes, and integration steps",
          "   d) PATTERN COMPLIANCE: Ensure the subtask follows established codebase patterns and architectural conventions",
          "   e) ERROR HANDLING: Specify error scenarios and handling approaches",
          "   f) TESTING STRATEGY: Define unit, integration, and acceptance testing requirements",
          "   g) PERFORMANCE CONSIDERATIONS: Address performance implications and optimization strategies",
          "   h) SECURITY AWARENESS: Include security considerations and best practices",
          "8. SUBTASK CONTENT STRUCTURE - Each subtask MUST include:",
          "   - Business Context: Direct link to user/business value",
          "   - Technical Specifications: Exact files, commands, dependencies",
          "   - Implementation Approach: Complete code examples and step-by-step implementation",
          "   - Integration Guidance: How this fits with existing architecture",
          "   - Validation Criteria: Specific, measurable acceptance criteria",
          "9. CODE EXAMPLES REQUIREMENT: If a file is created/modified, provide the COMPLETE implementation code within strategicGuidance.implementationApproach",
          "10. ARCHITECTURAL INTEGRATION: Ensure each subtask respects existing patterns, naming conventions, and architectural decisions",
          "11. VALIDATION LOOP: After creating each subtask, validate it against the quality checklist before proceeding",
          "12. COMPREHENSIVE REVIEW: Review all subtasks to ensure no gaps exist and the complete implementation is covered",
          "üîß PHASE 3: QUALITY ASSURANCE - Validate comprehensive coverage:",
          "13. IMPLEMENTATION READINESS CHECK: Could a senior developer work for 8 hours based solely on your subtask details?",
          "14. DEPENDENCY VERIFICATION: Ensure all subtask dependencies are properly ordered and documented",
          "15. ACCEPTANCE CRITERIA VALIDATION: Verify each subtask has binary, testable success criteria",
          "16. TECHNICAL DEPTH ASSESSMENT: Confirm each subtask includes sufficient technical detail for immediate implementation",
          "17. FINAL QUALITY GATE: All subtasks must pass the enhanced quality checklist before role transition"
        ]
      },
      "qualityChecklist": [
        "‚úÖ COMPREHENSIVE CONTEXT ANALYSIS: Business objectives, technical landscape, and user impact thoroughly analyzed",
        "‚úÖ CODEBASE INTEGRATION: Existing architecture patterns, conventions, and frameworks identified and respected",
        "‚úÖ INDIVIDUAL SUBTASK CREATION: Each subtask created individually with unique, contextual content (no batch processing)",
        "‚úÖ TECHNICAL PRECISION: Every subtask contains exact file paths, function names, commands, and configuration changes",
        "‚úÖ IMPLEMENTATION READINESS: Complete code examples provided for every file creation/modification",
        "‚úÖ BUSINESS VALUE LINKAGE: Each subtask clearly links to business requirements and user impact",
        "‚úÖ ARCHITECTURAL COMPLIANCE: All subtasks follow established codebase patterns and conventions",
        "‚úÖ ERROR HANDLING STRATEGY: Error scenarios and handling approaches specified for each subtask",
        "‚úÖ TESTING REQUIREMENTS: Unit, integration, and acceptance testing criteria defined",
        "‚úÖ PERFORMANCE CONSIDERATIONS: Performance implications and optimization strategies addressed",
        "‚úÖ SECURITY AWARENESS: Security considerations and best practices included",
        "‚úÖ DEPENDENCY MAPPING: Subtask dependencies and execution order properly documented",
        "‚úÖ ACCEPTANCE CRITERIA PRECISION: Each subtask has specific, measurable, binary success criteria",
        "‚úÖ IMPLEMENTATION COMPLETENESS: All aspects of the requirements covered with no gaps",
        "‚úÖ DEVELOPER EXPERIENCE VALIDATION: Could a senior developer implement without asking clarifying questions?",
        "‚úÖ CONTEXTUAL DEPTH: Each subtask reflects deep understanding of the specific task requirements",
        "‚úÖ INTEGRATION GUIDANCE: Clear instructions on how each subtask integrates with existing systems",
        "‚úÖ VALIDATION STRATEGY: Comprehensive testing and validation approach defined",
        "‚úÖ MAINTAINABILITY FOCUS: Implementation approach considers long-term maintainability",
        "‚úÖ FINAL QUALITY GATE: All subtasks reviewed and validated against enhanced quality standards"
      ],
      "conditions": [
        {
          "name": "context_gathering_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "context_gathering_and_analysis"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "role_transition",
      "description": "Transition to senior developer with strategic context",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to senior developer with comprehensive implementation guidance",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'architect'",
          "Extract transitionId for architect to senior developer transition",
          "Execute execute_transition with strategic context in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for senior developer transition",
        "execute_transition executed with strategic context",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "subtask_creation_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "strategic_subtask_creation"
            }
          },
          "isRequired": true
        }
      ]
    }
  ]
}
