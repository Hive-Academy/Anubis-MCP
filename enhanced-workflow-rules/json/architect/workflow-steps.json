{
  "workflowSteps": [
    {
      "name": "context_gathering_and_analysis",
      "description": "Gather and analyze all relevant task context, including description, codebase analysis, and research findings.",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligently retrieve comprehensive task information to build a foundation for strategic planning.",
      "approachGuidance": {
        "stepByStep": [
          "Review message history to identify existing context and requirements provided by the product-manager role.",
          "If context is insufficient, execute the 'TaskOperations.get' MCP operation to fetch the full task details.",
          "Ensure the MCP call includes parameters to retrieve the description, codebase analysis, research findings, and any existing subtasks.",
          "When making the MCP call, use serviceName: 'TaskOperations', operation: 'get', with includeDescription: true, includeAnalysis: true, includeResearch: true, includeCodeReviews: true.",
          "Only execute the MCP call conditionally if context is missing from message history.",
          "Synthesize all gathered information to form a complete understanding of the task's objectives, constraints, and technical landscape."
        ]
      },
      "qualityChecklist": [
        "Message history reviewed for initial context.",
        "Task description, business requirements, and acceptance criteria are fully understood.",
        "Codebase analysis from the product-manager role has been reviewed and comprehended.",
        "Research findings and recommendations have been analyzed.",
        "A comprehensive understanding of the task is achieved before proceeding to planning."
      ],
      "conditions": []
    },
    {
      "name": "strategic_subtask_creation",
      "description": "CRITICAL: Create highly-detailed, actionable subtasks ONE-BY-ONE leveraging existing comprehensive task analysis and implementing precise architectural guidance.",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Leverage existing comprehensive task analysis to create implementation-ready subtasks through structured phases: analysis synthesis, strategic architecture, and quality validation.",
      "approachGuidance": {
        "stepByStep": [
          "‚ö†Ô∏è CRITICAL PROTOCOL: You are the bridge between Product Manager's analysis and Senior Developer's implementation. Your subtasks must be implementation-ready with zero ambiguity.",
          "üîç PHASE 1: SYNTHESIS & STRATEGIC FOUNDATION (5 minutes focus)",
          "1. EXTRACT business objectives from task.taskDescription.businessRequirements and map to user impact",
          "2. LEVERAGE architecture patterns from task.codebaseAnalysis.architectureFindings (techStack, patterns, designPrinciples)",
          "3. PRIORITIZE issues from task.codebaseAnalysis.problemsIdentified by severity (critical ‚Üí high ‚Üí medium)",
          "4. APPLY research insights from task.researchReports.recommendations to guide implementation decisions",
          "5. ESTABLISH quality baseline from task.codebaseAnalysis.qualityAssessment to maintain/improve standards",
          "üèóÔ∏è PHASE 2: STRATEGIC SUBTASK CREATION (Main implementation focus)",
          "6. MAP each acceptanceCriteria to specific implementable subtasks using existing detailed requirements",
          "7. CREATE each subtask individually with ENHANCED PROTOCOL:",
          "   ‚Ä¢ CONTEXT: Link to specific businessRequirements and acceptanceCriteria",
          "   ‚Ä¢ TECHNICAL: Use architectureFindings.fileStructure for EXACT file paths",
          "   ‚Ä¢ IMPLEMENTATION: Provide complete code examples based on existing techStack",
          "   ‚Ä¢ PATTERNS: Apply existing designPrinciples and identified patterns",
          "   ‚Ä¢ ERROR HANDLING: Address specific problemsIdentified.issues with severity-based approaches",
          "   ‚Ä¢ TESTING: Build on existing testingApproach and address testCoverage.gaps",
          "   ‚Ä¢ PERFORMANCE: Address performance issues from problemsIdentified",
          "   ‚Ä¢ SECURITY: Apply security findings from qualityGuidelines",
          "8. VALIDATE each subtask addresses specific issues from problemsIdentified and aligns with research recommendations",
          "üîß PHASE 3: COMPREHENSIVE QUALITY VALIDATION (Final verification)",
          "9. VERIFY all acceptanceCriteria mapped to specific subtasks",
          "10. CONFIRM all critical/high severity issues from problemsIdentified are addressed",
          "11. ENSURE subtasks implement researchReports.recommendations and avoid identified risks",
          "12. VALIDATE implementation readiness: Could senior developer implement without clarification?"
        ]
      },
      "qualityChecklist": [
        "üîç PHASE 1 COMPLETION:",
        "‚úÖ Business objectives extracted from taskDescription.businessRequirements",
        "‚úÖ Architecture patterns leveraged from codebaseAnalysis.architectureFindings",
        "‚úÖ Issues prioritized by severity from problemsIdentified (critical ‚Üí high ‚Üí medium)",
        "‚úÖ Research insights applied from researchReports.recommendations",
        "‚úÖ Quality baseline established from qualityAssessment metrics",
        "üèóÔ∏è PHASE 2 COMPLETION:",
        "‚úÖ Each acceptanceCriteria mapped to specific implementable subtasks",
        "‚úÖ Individual subtask creation with unique, contextual content (no batching)",
        "‚úÖ Technical precision: Exact file paths from architectureFindings.fileStructure",
        "‚úÖ Complete code examples based on existing techStack and designPrinciples",
        "‚úÖ Error handling addresses specific problemsIdentified.issues by severity",
        "‚úÖ Testing strategy builds on testingApproach and addresses coverage gaps",
        "‚úÖ Performance considerations address identified issues and metrics",
        "‚úÖ Security awareness applies qualityGuidelines and addresses security issues",
        "‚úÖ Each subtask validated against problemsIdentified and research alignment",
        "üîß PHASE 3 COMPLETION:",
        "‚úÖ All acceptanceCriteria verification: Every criteria mapped to subtasks",
        "‚úÖ Critical/high severity issues confirmation: All addressed in subtasks",
        "‚úÖ Research recommendations implementation: All applied and risks avoided",
        "‚úÖ Developer readiness validation: Implementation possible without clarification",
        "‚úÖ Comprehensive coverage: No gaps in businessRequirements or technicalRequirements",
        "‚úÖ Quality standards: Maintains/improves existing qualityAssessment baseline"
      ],
      "conditions": [
        {
          "name": "context_gathering_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "context_gathering_and_analysis"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "role_transition",
      "description": "Transition to senior developer with strategic context",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to senior developer with comprehensive implementation guidance",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'architect'",
          "Extract transitionId for architect to senior developer transition",
          "Execute execute_transition with strategic context in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for senior developer transition",
        "execute_transition executed with strategic context",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "subtask_creation_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "strategic_subtask_creation"
            }
          },
          "isRequired": true
        }
      ]
    }
  ]
}
