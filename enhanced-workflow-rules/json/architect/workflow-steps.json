{
  "workflowSteps": [
    {
      "name": "strategic_subtask_design",
      "description": "Design strategic subtasks with intelligent context management and bulk creation",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligent context retrieval with strategic subtask design and bulk creation",
      "approachGuidance": {
        "stepByStep": [
          "Check message history for task context and requirements first",
          "Only if context is missing or incomplete, execute TaskOperations.get with comprehensive data retrieval (includeDescription=true, includeAnalysis=true, includeResearch=true, includeSubtasks=true) to access boomerang's codebase analysis, task description, and research findings",
          "Leverage boomerang's comprehensive analysis: architecture patterns, technology stack, code quality assessment, integration points, and research recommendations for informed strategic decisions",
          "Analyze task requirements and identify strategic implementation approach",
          "Design subtask batches with clear dependencies and sequencing",
          "Create subtasks using bulk creation for efficient management",
          "Focus on implementation work, exclude documentation tasks",
          "Validate subtask design against architectural principles"
        ]
      },
      "qualityChecklist": [
        "Task context gathered intelligently (message history first, then server calls)",
        "Strategic subtask design completed with clear batch organization",
        "Subtasks created using bulk creation with proper dependencies",
        "No documentation subtasks created",
        "Subtask design validated against architectural principles",
        "Dependencies optimized for parallel execution where possible"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "intelligent_context_gathering",
          "actionType": "CONDITIONAL_MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get",
            "includeDescription": true,
            "includeAnalysis": true,
            "includeResearch": true,
            "includeSubtasks": true,
            "condition": "context_missing_from_message_history"
          },
          "sequenceOrder": 1
        },
        {
          "name": "create_strategic_subtasks",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "SubtaskOperations",
            "operation": "create_subtasks_batch"
          },
          "sequenceOrder": 2
        }
      ]
    },
    {
      "name": "role_transition",
      "description": "Transition to senior developer with strategic context",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to senior developer with comprehensive implementation guidance",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'architect'",
          "Extract transitionId for architect to senior developer transition",
          "Execute execute_transition with strategic context in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for senior developer transition",
        "execute_transition executed with strategic context",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "subtask_design_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "strategic_subtask_design"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    }
  ]
}
