{
  "workflowSteps": [
    {
      "name": "context_acquisition",
      "displayName": "MCP Context Acquisition",
      "description": "Retrieve comprehensive task context including research findings and codebase analysis",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "5-10 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approachMethodology": "Comprehensive context acquisition with research integration",
        "qualityStandards": [
          "Include all research findings and recommendations",
          "Integrate existing codebase analysis and architectural context",
          "Validate context completeness before proceeding"
        ],
        "decisionCriteria": [
          "Research findings available and validated",
          "Codebase analysis comprehensive and current",
          "Task requirements clearly understood"
        ]
      },
      "approachGuidance": {
        "executionSteps": [
          "Execute service call to retrieve complete task context",
          "Validate research findings and recommendations are available",
          "Review existing codebase analysis and architectural patterns",
          "Identify any gaps in context or additional information needed"
        ],
        "contextValidation": [
          "Verify research recommendations align with task requirements",
          "Confirm codebase analysis includes architectural patterns",
          "Validate performance baseline and quality metrics available"
        ]
      },
      "qualityChecklist": [
        "Task context includes business and technical requirements",
        "Research findings provide technical validation and recommendations",
        "Codebase analysis includes existing patterns and constraints",
        "Performance baseline and quality metrics are available"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "acquire_task_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get",
            "parameters": {
              "taskId": "{{taskId}}",
              "includeLevel": "comprehensive",
              "includeAnalysis": true,
              "includeComments": true
            }
          }
        }
      ],
      "triggerReport": false
    },
    {
      "name": "pattern_analysis",
      "displayName": "Strategic Architecture Analysis",
      "description": "Analyze existing patterns and identify architectural approach based on MCP context",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "15-20 minutes",
      "stepType": "ANALYSIS",
      "behavioralContext": {
        "approachMethodology": "Evidence-based pattern analysis with MCP context integration",
        "qualityStandards": [
          "Base analysis on existing architectural patterns from MCP",
          "Identify code smells and technical debt from MCP analysis",
          "Validate SOLID principles compliance requirements"
        ],
        "decisionCriteria": [
          "Architectural patterns identified and validated",
          "Problem-solution mapping completed with evidence",
          "SOLID principles verification framework established"
        ]
      },
      "approachGuidance": {
        "executionSteps": [
          "Extract existing patterns from MCP codebase analysis",
          "Map identified problems to appropriate refactoring patterns",
          "Verify SOLID principles compliance in current and proposed design",
          "Document architectural decisions with evidence-based rationale"
        ],
        "patternAnalysis": [
          "Identify current architectural style (Domain-Driven, Layered, etc.)",
          "Analyze data access patterns (Repository, Active-Record, etc.)",
          "Review service layer patterns and integration approaches",
          "Assess testing patterns and quality assurance approaches"
        ]
      },
      "qualityChecklist": [
        "Existing architectural patterns documented and understood",
        "Code smells mapped to appropriate refactoring solutions",
        "SOLID principles compliance verified for proposed design",
        "Technical debt addressed with strategic improvements"
      ],
      "conditions": [
        {
          "name": "context_available",
          "conditionType": "context_check",
          "logic": { "contextRequired": "task_context_with_analysis" }
        }
      ],
      "actions": [
        {
          "name": "analyze_architectural_patterns",
          "actionType": "PATTERN_ANALYSIS",
          "actionData": {
            "analysisType": "architectural_patterns",
            "contextSource": "mcp_codebase_analysis",
            "outputFormat": "pattern_matrix"
          }
        }
      ],
      "triggerReport": false
    },
    {
      "name": "solution_design",
      "displayName": "Solution Design & Technical Decisions",
      "description": "Design comprehensive solution with SOLID principles and strategic guidance",
      "sequenceNumber": 3,
      "isRequired": true,
      "estimatedTime": "20-30 minutes",
      "stepType": "DECISION",
      "behavioralContext": {
        "approachMethodology": "SOLID principles-driven design with strategic planning",
        "qualityStandards": [
          "All design decisions must follow SOLID principles",
          "Solutions must be compatible with existing architecture",
          "Design must include comprehensive quality gates"
        ],
        "decisionCriteria": [
          "SOLID principles compliance verified",
          "Integration strategy defined with existing systems",
          "Quality gates established with measurable criteria"
        ]
      },
      "approachGuidance": {
        "executionSteps": [
          "Apply SOLID principles to solution design",
          "Define technical decisions with evidence-based rationale",
          "Establish quality gates and validation criteria",
          "Create integration strategy with existing architectural patterns"
        ],
        "designPrinciples": [
          "Single Responsibility: Each class/service has one reason to change",
          "Open/Closed: Extensible through inheritance/composition, not modification",
          "Liskov Substitution: Derived classes substitutable for base classes",
          "Interface Segregation: Clients depend only on interfaces they use",
          "Dependency Inversion: Depend on abstractions, not concretions"
        ]
      },
      "qualityChecklist": [
        "SOLID principles compliance verified for all design decisions",
        "Technical decisions documented with evidence-based rationale",
        "Quality gates defined with measurable validation criteria",
        "Integration strategy compatible with existing architecture"
      ],
      "conditions": [
        {
          "name": "pattern_analysis_complete",
          "conditionType": "previous_step_completed",
          "logic": { "requiredStep": "pattern_analysis" }
        }
      ],
      "actions": [
        {
          "name": "design_solution_architecture",
          "actionType": "SOLUTION_DESIGN",
          "actionData": {
            "designApproach": "solid_principles_driven",
            "integrationStrategy": "existing_patterns_compatible",
            "qualityGates": "comprehensive_validation"
          }
        }
      ],
      "triggerReport": false
    },
    {
      "name": "implementation_planning",
      "displayName": "Implementation Plan Creation",
      "description": "Create comprehensive implementation plan with strategic batch design",
      "sequenceNumber": 4,
      "isRequired": true,
      "estimatedTime": "25-35 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approachMethodology": "Strategic batch design with comprehensive guidance",
        "qualityStandards": [
          "Batches must contain 3-8 subtasks for optimal management",
          "Each subtask must include strategic guidance and quality constraints",
          "Implementation order must follow dependency requirements"
        ],
        "decisionCriteria": [
          "Implementation plan created with strategic batch organization",
          "Quality standards defined for each implementation phase",
          "Strategic guidance provided for development teams"
        ]
      },
      "approachGuidance": {
        "executionSteps": [
          "Design strategic batches with 3-8 subtasks each",
          "Define implementation order based on dependencies",
          "Create comprehensive strategic guidance for each subtask",
          "Establish quality constraints and success criteria"
        ],
        "batchDesign": [
          "FOUNDATION: Infrastructure & Core (entities, services, repositories)",
          "BUSINESS LOGIC: Domain Implementation (business rules, workflows)",
          "INTEGRATION: APIs & External Services (controllers, integrations)",
          "QUALITY ASSURANCE: Testing & Documentation (tests, docs, analysis)"
        ]
      },
      "qualityChecklist": [
        "Implementation plan includes strategic batch organization",
        "Each subtask has comprehensive strategic guidance",
        "Quality constraints and success criteria defined",
        "Implementation order follows dependency requirements"
      ],
      "conditions": [
        {
          "name": "solution_design_complete",
          "conditionType": "previous_step_completed",
          "logic": { "requiredStep": "solution_design" }
        }
      ],
      "actions": [
        {
          "name": "create_implementation_plan",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "create_plan",
            "parameters": {
              "taskId": "{{taskId}}",
              "planData": "{{implementationPlanData}}"
            }
          }
        }
      ],
      "triggerReport": true,
      "reportType": "implementation_plan",
      "reportTemplate": "architect_implementation_plan"
    },
    {
      "name": "batch_subtask_creation",
      "displayName": "Strategic Batch & Subtask Creation",
      "description": "Create strategic batches with detailed subtasks and guidance",
      "sequenceNumber": 5,
      "isRequired": true,
      "estimatedTime": "20-30 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approachMethodology": "Detailed subtask creation with strategic guidance",
        "qualityStandards": [
          "Each subtask must include architectural context and implementation specifics",
          "Quality constraints must be measurable and enforceable",
          "Success criteria must be clear and verifiable"
        ],
        "decisionCriteria": [
          "All batches created with appropriate subtask organization",
          "Strategic guidance provided for each subtask",
          "Quality constraints and success criteria established"
        ]
      },
      "approachGuidance": {
        "executionSteps": [
          "Create batches following strategic design principles",
          "Define detailed subtasks with comprehensive guidance",
          "Establish quality constraints and success criteria",
          "Provide architectural rationale for each implementation decision"
        ],
        "subtaskGuidance": [
          "Architectural context for each subtask",
          "Implementation specifics with code examples",
          "Pattern compliance requirements",
          "Error handling and performance targets"
        ]
      },
      "qualityChecklist": [
        "All batches created with strategic subtask organization",
        "Each subtask includes comprehensive strategic guidance",
        "Quality constraints are measurable and enforceable",
        "Success criteria are clear and verifiable"
      ],
      "conditions": [
        {
          "name": "implementation_plan_created",
          "conditionType": "previous_step_completed",
          "logic": { "requiredStep": "implementation_planning" }
        }
      ],
      "actions": [
        {
          "name": "create_strategic_batches",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "create_subtasks",
            "parameters": {
              "taskId": "{{taskId}}",
              "batchData": "{{strategicBatchData}}"
            }
          }
        }
      ],
      "triggerReport": false
    },
    {
      "name": "quality_gate_definition",
      "displayName": "Quality Gates & Standards Definition",
      "description": "Define comprehensive quality gates and validation criteria",
      "sequenceNumber": 6,
      "isRequired": true,
      "estimatedTime": "15-20 minutes",
      "stepType": "VALIDATION",
      "behavioralContext": {
        "approachMethodology": "Comprehensive quality gate definition with measurable criteria",
        "qualityStandards": [
          "Quality gates must be measurable and enforceable",
          "Validation criteria must align with SOLID principles",
          "Performance targets must be based on MCP baseline metrics"
        ],
        "decisionCriteria": [
          "Quality gates defined with measurable validation criteria",
          "Performance targets established based on baseline metrics",
          "Security requirements specified with validation methods"
        ]
      },
      "approachGuidance": {
        "executionSteps": [
          "Define quality gates for each implementation phase",
          "Establish measurable validation criteria",
          "Set performance targets based on MCP baseline",
          "Specify security requirements and validation methods"
        ],
        "qualityGates": [
          "Code quality: SOLID compliance, test coverage, documentation",
          "Performance: Response times, query efficiency, resource usage",
          "Security: Input validation, authentication, authorization",
          "Integration: API contracts, error handling, monitoring"
        ]
      },
      "qualityChecklist": [
        "Quality gates defined for all implementation phases",
        "Validation criteria are measurable and enforceable",
        "Performance targets based on established baselines",
        "Security requirements specified with validation methods"
      ],
      "conditions": [
        {
          "name": "batches_created",
          "conditionType": "previous_step_completed",
          "logic": { "requiredStep": "batch_subtask_creation" }
        }
      ],
      "actions": [
        {
          "name": "define_quality_gates",
          "actionType": "QUALITY_GATE_DEFINITION",
          "actionData": {
            "gateTypes": [
              "code_quality",
              "performance",
              "security",
              "integration"
            ],
            "validationCriteria": "measurable_enforceable",
            "baselineSource": "mcp_performance_metrics"
          }
        }
      ],
      "triggerReport": false
    },
    {
      "name": "delegation_preparation",
      "displayName": "Delegation Preparation & Context Documentation",
      "description": "Prepare comprehensive delegation context for senior developer role",
      "sequenceNumber": 7,
      "isRequired": true,
      "estimatedTime": "10-15 minutes",
      "stepType": "DELEGATION",
      "behavioralContext": {
        "approachMethodology": "Comprehensive context preparation for seamless role transition",
        "qualityStandards": [
          "Delegation context must include all architectural decisions and rationale",
          "Strategic guidance must be comprehensive and actionable",
          "Quality requirements must be clearly communicated"
        ],
        "decisionCriteria": [
          "Delegation context prepared with comprehensive architectural guidance",
          "Strategic context documented for implementation teams",
          "Quality requirements clearly communicated"
        ]
      },
      "approachGuidance": {
        "executionSteps": [
          "Document all architectural decisions with rationale",
          "Prepare strategic context for implementation guidance",
          "Summarize quality requirements and validation criteria",
          "Create comprehensive handoff documentation"
        ],
        "delegationContext": [
          "Architectural approach and design decisions",
          "Quality targets and performance requirements",
          "Implementation order and dependency tracking",
          "Critical patterns and compliance requirements"
        ]
      },
      "qualityChecklist": [
        "All architectural decisions documented with rationale",
        "Strategic context prepared for implementation teams",
        "Quality requirements clearly communicated",
        "Handoff documentation comprehensive and actionable"
      ],
      "conditions": [
        {
          "name": "quality_gates_defined",
          "conditionType": "previous_step_completed",
          "logic": { "requiredStep": "quality_gate_definition" }
        }
      ],
      "actions": [
        {
          "name": "prepare_delegation_context",
          "actionType": "DELEGATION_PREPARATION",
          "actionData": {
            "contextType": "architectural_guidance",
            "targetRole": "senior-developer",
            "documentationLevel": "comprehensive"
          }
        }
      ],
      "triggerReport": false
    },
    {
      "name": "workflow_delegation",
      "displayName": "Workflow Delegation to Senior Developer",
      "description": "Delegate implementation work to senior developer with strategic context",
      "sequenceNumber": 8,
      "isRequired": true,
      "estimatedTime": "5-10 minutes",
      "stepType": "DELEGATION",
      "behavioralContext": {
        "approachMethodology": "Strategic delegation with comprehensive context preservation",
        "qualityStandards": [
          "Delegation must include complete strategic context",
          "Implementation guidance must be actionable and clear",
          "Quality requirements must be enforceable"
        ],
        "decisionCriteria": [
          "Workflow successfully delegated with strategic context",
          "Implementation guidance provided to senior developer",
          "Quality requirements communicated and understood"
        ]
      },
      "approachGuidance": {
        "executionSteps": [
          "Execute delegation with comprehensive strategic context",
          "Communicate implementation priorities and dependencies",
          "Ensure quality requirements are understood",
          "Provide ongoing architectural support availability"
        ],
        "delegationMessage": [
          "Implementation plan ready with strategic architecture design",
          "SOLID principles enforced with specific guidance for each subtask",
          "Quality constraints and success criteria established",
          "Architectural support available for complex decisions"
        ]
      },
      "qualityChecklist": [
        "Delegation executed with comprehensive strategic context",
        "Implementation guidance communicated clearly",
        "Quality requirements understood by receiving role",
        "Architectural support availability established"
      ],
      "conditions": [
        {
          "name": "delegation_prepared",
          "conditionType": "previous_step_completed",
          "logic": { "requiredStep": "delegation_preparation" }
        }
      ],
      "actions": [
        {
          "name": "delegate_to_senior_developer",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "WorkflowOperations",
            "operation": "delegate",
            "parameters": {
              "taskId": "{{taskId}}",
              "fromRole": "architect",
              "toRole": "senior-developer",
              "delegationContext": "{{strategicDelegationContext}}"
            }
          }
        }
      ],
      "triggerReport": true,
      "reportType": "delegation_complete",
      "reportTemplate": "architect_delegation_summary"
    }
  ]
}
