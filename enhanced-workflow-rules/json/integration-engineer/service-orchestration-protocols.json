{
  "serviceOrchestrationProtocols": {
    "orchestratorService": "CoreServiceOrchestrator",
    "description": "Service orchestration protocols for Integration Engineer role focusing on production deployment, git operations, documentation updates, and user delivery coordination",
    "serviceOperations": {
      "IntegrationOperations": {
        "description": "Core integration operations for production deployment and validation",
        "operations": [
          {
            "name": "validateIntegrationReadiness",
            "description": "Validate comprehensive integration readiness for production deployment",
            "actionType": "INTEGRATION_VALIDATION",
            "parameters": {
              "taskId": "string",
              "integrationChecklist": "array",
              "qualityGates": "object"
            },
            "returns": "IntegrationReadinessResult"
          },
          {
            "name": "assessProductionReadiness",
            "description": "Assess production deployment readiness with comprehensive validation",
            "actionType": "PRODUCTION_READINESS",
            "parameters": {
              "taskId": "string",
              "productionRequirements": "object",
              "deploymentArtifacts": "object"
            },
            "returns": "ProductionReadinessResult"
          },
          {
            "name": "executeGitOperations",
            "description": "Execute comprehensive git operations workflow",
            "actionType": "GIT_OPERATIONS",
            "parameters": {
              "taskId": "string",
              "branchName": "string",
              "gitWorkflow": "object"
            },
            "returns": "GitOperationsResult"
          },
          {
            "name": "createPullRequest",
            "description": "Create pull request with comprehensive MCP evidence documentation",
            "actionType": "PULL_REQUEST_CREATION",
            "parameters": {
              "taskId": "string",
              "prContent": "object",
              "evidencePackage": "object"
            },
            "returns": "PullRequestCreationResult"
          },
          {
            "name": "validateDeploymentSuccess",
            "description": "Validate successful deployment with monitoring and metrics",
            "actionType": "DEPLOYMENT_VALIDATION",
            "parameters": {
              "taskId": "string",
              "deploymentMetrics": "object",
              "monitoringData": "object"
            },
            "returns": "DeploymentValidationResult"
          }
        ]
      },
      "DocumentationOperations": {
        "description": "Documentation management operations for memory bank and technical documentation",
        "operations": [
          {
            "name": "updateMemoryBankFiles",
            "description": "Update memory bank files with implementation evidence and context",
            "actionType": "MEMORY_BANK_UPDATE",
            "parameters": {
              "taskId": "string",
              "implementationEvidence": "object",
              "filesToUpdate": "array"
            },
            "returns": "MemoryBankUpdateResult"
          },
          {
            "name": "validateDocumentationCompleteness",
            "description": "Validate completeness and accuracy of technical documentation",
            "actionType": "DOCUMENTATION_VALIDATION",
            "parameters": {
              "taskId": "string",
              "documentationRequirements": "object",
              "validationCriteria": "array"
            },
            "returns": "DocumentationValidationResult"
          },
          {
            "name": "updateApiDocumentation",
            "description": "Update API documentation with integration points and changes",
            "actionType": "API_DOCUMENTATION_UPDATE",
            "parameters": {
              "taskId": "string",
              "apiChanges": "object",
              "integrationPoints": "array"
            },
            "returns": "ApiDocumentationResult"
          },
          {
            "name": "createDeploymentGuides",
            "description": "Create and update deployment guides with procedures",
            "actionType": "DEPLOYMENT_GUIDE_UPDATE",
            "parameters": {
              "taskId": "string",
              "deploymentProcedures": "object",
              "rollbackStrategy": "object"
            },
            "returns": "DeploymentGuideResult"
          }
        ]
      },
      "TaskOperations": {
        "description": "Task management operations for integration workflow",
        "operations": [
          {
            "name": "getComprehensiveTaskContext",
            "description": "Retrieve comprehensive task context with implementation evidence",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "includeLevel": "comprehensive",
              "includeAnalysis": "boolean",
              "includeComments": "boolean"
            },
            "returns": "ComprehensiveTaskContextResult"
          },
          {
            "name": "completeWorkflowWithEvidence",
            "description": "Complete workflow with comprehensive evidence collection",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "completionData": "object",
              "evidenceCollection": "object"
            },
            "returns": "WorkflowCompletionResult"
          },
          {
            "name": "updateTaskDeploymentStatus",
            "description": "Update task status with deployment information",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "deploymentStatus": "string",
              "deploymentEvidence": "object"
            },
            "returns": "TaskUpdateResult"
          }
        ]
      },
      "UserDeliveryOperations": {
        "description": "User delivery coordination operations for handoff and monitoring",
        "operations": [
          {
            "name": "prepareUserDeliveryPackage",
            "description": "Prepare comprehensive user delivery documentation package",
            "actionType": "USER_DELIVERY_PREPARATION",
            "parameters": {
              "taskId": "string",
              "deliveryComponents": "object",
              "successMetrics": "object"
            },
            "returns": "UserDeliveryPackageResult"
          },
          {
            "name": "coordinateHandoff",
            "description": "Coordinate user handoff with actionable next steps",
            "actionType": "HANDOFF_COORDINATION",
            "parameters": {
              "taskId": "string",
              "handoffElements": "object",
              "monitoringProcedures": "object"
            },
            "returns": "HandoffCoordinationResult"
          },
          {
            "name": "establishMonitoringProcedures",
            "description": "Establish post-deployment monitoring and validation procedures",
            "actionType": "MONITORING_SETUP",
            "parameters": {
              "taskId": "string",
              "monitoringRequirements": "object",
              "performanceBaselines": "object"
            },
            "returns": "MonitoringSetupResult"
          },
          {
            "name": "preserveKnowledgeAssets",
            "description": "Preserve implementation knowledge for organizational learning",
            "actionType": "KNOWLEDGE_PRESERVATION",
            "parameters": {
              "taskId": "string",
              "implementationEvidence": "object",
              "lessonsLearned": "object"
            },
            "returns": "KnowledgePreservationResult"
          }
        ]
      },
      "WorkflowOperations": {
        "description": "Workflow management operations for integration coordination",
        "operations": [
          {
            "name": "validateWorkflowTransition",
            "description": "Validate workflow transition readiness for integration",
            "actionType": "VALIDATION",
            "parameters": {
              "taskId": "string",
              "transitionRequirements": "array",
              "validationCriteria": "object"
            },
            "returns": "WorkflowTransitionValidationResult"
          },
          {
            "name": "prepareRollbackStrategy",
            "description": "Prepare comprehensive rollback strategy for deployment",
            "actionType": "ROLLBACK_PREPARATION",
            "parameters": {
              "taskId": "string",
              "rollbackRequirements": "object",
              "recoveryProcedures": "object"
            },
            "returns": "RollbackStrategyResult"
          },
          {
            "name": "executeWorkflowCompletion",
            "description": "Execute final workflow completion with evidence collection",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "completionEvidence": "object",
              "deliveryConfirmation": "object"
            },
            "returns": "WorkflowCompletionExecutionResult"
          }
        ]
      }
    },
    "workflowStepMappings": {
      "mcp-context-acquisition": {
        "primaryService": "TaskOperations",
        "primaryOperation": "getComprehensiveTaskContext",
        "supportingOperations": [
          {
            "service": "WorkflowOperations",
            "operation": "validateWorkflowTransition"
          }
        ]
      },
      "final-integration-validation": {
        "primaryService": "IntegrationOperations",
        "primaryOperation": "validateIntegrationReadiness",
        "supportingOperations": [
          {
            "service": "IntegrationOperations",
            "operation": "assessProductionReadiness"
          }
        ]
      },
      "git-operations-execution": {
        "primaryService": "IntegrationOperations",
        "primaryOperation": "executeGitOperations",
        "supportingOperations": [
          {
            "service": "IntegrationOperations",
            "operation": "createPullRequest"
          }
        ]
      },
      "documentation-updates": {
        "primaryService": "DocumentationOperations",
        "primaryOperation": "updateMemoryBankFiles",
        "supportingOperations": [
          {
            "service": "DocumentationOperations",
            "operation": "validateDocumentationCompleteness"
          },
          {
            "service": "DocumentationOperations",
            "operation": "updateApiDocumentation"
          },
          {
            "service": "DocumentationOperations",
            "operation": "createDeploymentGuides"
          }
        ]
      },
      "workflow-completion": {
        "primaryService": "WorkflowOperations",
        "primaryOperation": "executeWorkflowCompletion",
        "supportingOperations": [
          {
            "service": "TaskOperations",
            "operation": "completeWorkflowWithEvidence"
          }
        ]
      },
      "user-delivery-coordination": {
        "primaryService": "UserDeliveryOperations",
        "primaryOperation": "prepareUserDeliveryPackage",
        "supportingOperations": [
          {
            "service": "UserDeliveryOperations",
            "operation": "coordinateHandoff"
          },
          {
            "service": "UserDeliveryOperations",
            "operation": "establishMonitoringProcedures"
          },
          {
            "service": "UserDeliveryOperations",
            "operation": "preserveKnowledgeAssets"
          }
        ]
      }
    },
    "qualityGates": {
      "integrationReadiness": {
        "description": "Integration must be ready for production deployment",
        "validationService": "IntegrationOperations",
        "validationOperation": "validateIntegrationReadiness",
        "passingCriteria": {
          "codeReviewApproved": true,
          "allTestsPassing": true,
          "qualityGatesSatisfied": true,
          "performanceTargetsAchieved": true
        }
      },
      "productionReadiness": {
        "description": "System must be ready for production deployment",
        "validationService": "IntegrationOperations",
        "validationOperation": "assessProductionReadiness",
        "passingCriteria": {
          "errorHandlingComplete": true,
          "monitoringConfigured": true,
          "securityValidated": true,
          "performanceOptimized": true
        }
      },
      "gitOperationsSuccess": {
        "description": "Git operations must complete successfully",
        "validationService": "IntegrationOperations",
        "validationOperation": "executeGitOperations",
        "passingCriteria": {
          "branchClean": true,
          "rebaseSuccessful": true,
          "testsPassingAfterRebase": true,
          "pullRequestCreated": true
        }
      },
      "documentationCompleteness": {
        "description": "Documentation must be complete and accurate",
        "validationService": "DocumentationOperations",
        "validationOperation": "validateDocumentationCompleteness",
        "passingCriteria": {
          "memoryBankUpdated": true,
          "apiDocumentationCurrent": true,
          "deploymentGuidesComplete": true,
          "architectureDocumented": true
        }
      },
      "userDeliveryReadiness": {
        "description": "User delivery must be ready with comprehensive documentation",
        "validationService": "UserDeliveryOperations",
        "validationOperation": "prepareUserDeliveryPackage",
        "passingCriteria": {
          "deliveryDocumentationComplete": true,
          "successMetricsDefined": true,
          "monitoringProceduresEstablished": true,
          "knowledgeAssetsPreserved": true
        }
      }
    },
    "errorHandling": {
      "deploymentFailures": {
        "description": "Handle deployment failures and rollback procedures",
        "errorTypes": [
          "INTEGRATION_VALIDATION_FAILED",
          "GIT_OPERATIONS_FAILED",
          "DEPLOYMENT_ISSUES_FOUND",
          "PRODUCTION_READINESS_NOT_MET"
        ],
        "recoveryActions": [
          {
            "service": "WorkflowOperations",
            "operation": "prepareRollbackStrategy"
          },
          {
            "service": "TaskOperations",
            "operation": "updateTaskDeploymentStatus",
            "parameters": {
              "deploymentStatus": "failed",
              "rollbackRequired": true
            }
          }
        ]
      },
      "documentationIssues": {
        "description": "Handle documentation completeness and accuracy issues",
        "errorTypes": [
          "MEMORY_BANK_UPDATE_FAILED",
          "API_DOCUMENTATION_INCOMPLETE",
          "DEPLOYMENT_GUIDES_MISSING",
          "ARCHITECTURE_DOCUMENTATION_OUTDATED"
        ],
        "recoveryActions": [
          {
            "service": "DocumentationOperations",
            "operation": "validateDocumentationCompleteness"
          },
          {
            "service": "DocumentationOperations",
            "operation": "updateMemoryBankFiles"
          }
        ]
      },
      "userDeliveryIssues": {
        "description": "Handle user delivery coordination and handoff issues",
        "errorTypes": [
          "DELIVERY_DOCUMENTATION_INCOMPLETE",
          "MONITORING_SETUP_FAILED",
          "HANDOFF_COORDINATION_ISSUES",
          "KNOWLEDGE_PRESERVATION_INCOMPLETE"
        ],
        "recoveryActions": [
          {
            "service": "UserDeliveryOperations",
            "operation": "prepareUserDeliveryPackage"
          },
          {
            "service": "UserDeliveryOperations",
            "operation": "establishMonitoringProcedures"
          }
        ]
      }
    }
  }
}