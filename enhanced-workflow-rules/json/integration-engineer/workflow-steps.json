{
  "workflowSteps": [
    {
      "name": "gather_integration_context",
      "description": "Retrieve implementation context for integration and documentation",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Context acquisition focused on integration and documentation needs",
      "approachGuidance": {
        "stepByStep": [
          "Execute TaskOperations.get to retrieve implementation context",
          "Review implementation plans and completed subtasks",
          "Analyze code review results and approved changes",
          "Identify files modified for documentation impact assessment",
          "Prepare context for documentation updates and integration"
        ]
      },
      "qualityChecklist": [
        "Complete implementation context retrieved",
        "Implementation plans and subtasks reviewed",
        "Code review results analyzed",
        "File changes identified for documentation impact",
        "Integration requirements documented"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "get_implementation_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get"
          },
          "sequenceOrder": 1
        }
      ]
    },
    {
      "name": "execute_git_integration",
      "description": "Execute git operations with error handling and remote sync",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Comprehensive git integration with validation and error handling",
      "approachGuidance": {
        "stepByStep": [
          "Execute git status to verify clean working directory",
          "Verify current branch is feature branch (not main/master)",
          "Stage all implementation changes with git add",
          "Create comprehensive integration commit with detailed message",
          "Push feature branch to remote with error handling"
        ]
      },
      "qualityChecklist": [
        "Git status verified with clean working directory",
        "Feature branch confirmed (not main/master)",
        "All implementation changes staged and committed",
        "Comprehensive commit message created",
        "Feature branch successfully pushed to remote"
      ],
      "conditions": [
        {
          "name": "context_gathered",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "gather_integration_context"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    },
    {
      "name": "update_documentation",
      "description": "Update documentation based on implementation changes",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligent documentation assessment with targeted updates",
      "approachGuidance": {
        "stepByStep": [
          "Analyze implementation changes for documentation impact",
          "Update memory bank files based on architectural changes",
          "Update README sections affected by implementation",
          "Update any relevant technical documentation",
          "Validate documentation accuracy and completeness"
        ]
      },
      "qualityChecklist": [
        "Implementation changes analyzed for documentation impact",
        "Memory bank files updated based on changes",
        "README sections updated for affected functionality",
        "Technical documentation updated where relevant",
        "Documentation accuracy and completeness validated"
      ],
      "conditions": [
        {
          "name": "git_integration_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "execute_git_integration"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    },
    {
      "name": "complete_workflow",
      "description": "Complete task and workflow execution",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Complete both task and workflow execution with final status",
      "approachGuidance": {
        "stepByStep": [
          "Validate all integration and documentation tasks completed",
          "Execute workflow completion with final status and deliverables",
          "Document completion evidence and quality metrics",
          "Ensure proper workflow closure and state cleanup"
        ]
      },
      "qualityChecklist": [
        "All integration and documentation tasks completed",
        "Workflow execution completed with final status",
        "Completion evidence and metrics documented",
        "Workflow closure and state cleanup verified"
      ],
      "conditions": [
        {
          "name": "pull_request_created",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "create_pull_request"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    }
  ]
}