{
  "workflowSteps": [
    {
      "name": "comprehensive_context_and_implementation_validation",
      "displayName": "Comprehensive Context and Implementation Validation",
      "description": "Retrieve complete implementation context and validate delivery readiness with evidence collection",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "15-20 minutes",
      "stepType": "VALIDATION",
      "behavioralContext": {
        "approach": "Comprehensive context acquisition with systematic implementation completeness validation",
        "principles": [
          "Retrieve complete task context with all implementation evidence and quality metrics",
          "Validate all delivery components: code, testing, documentation, quality gates",
          "Verify acceptance criteria satisfaction with documented evidence",
          "Assess production readiness with comprehensive validation checklist"
        ],
        "methodology": "Evidence-based validation with comprehensive delivery readiness assessment"
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute query_task_context with comprehensive inclusion (plans, subtasks, analysis, evidence)",
          "Validate batch completion verification: all planned implementation batches completed and approved",
          "Verify code review status: APPROVED status with comprehensive testing validation",
          "Validate acceptance criteria: all original criteria met with documented evidence",
          "Assess quality gates: build success, test coverage, performance, security standards",
          "Perform file and change analysis: modified files, new files, configuration changes documentation"
        ]
      },
      "qualityChecklist": [
        "Complete implementation context retrieved with all evidence and quality metrics",
        "Batch completion verified with all planned implementation batches completed and approved",
        "Code review status validated as APPROVED with comprehensive testing evidence",
        "Acceptance criteria verified as satisfied with documented evidence and validation",
        "Quality gates assessment completed: build, lint, tests, performance, security standards",
        "File and change analysis documented: modified, new, deleted files with purposes and rationale"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "acquire_comprehensive_implementation_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get",
            "parameters": {
              "includeLevel": "comprehensive",
              "includePlans": true,
              "includeSubtasks": true,
              "includeAnalysis": true,
              "includeComments": false,
              "includeImplementationEvidence": true,
              "includeQualityMetrics": true,
              "includeValidationResults": true
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "validate_implementation_completeness",
          "actionType": "VALIDATION",
          "actionData": {
            "validationType": "comprehensive_implementation_completeness",
            "validationProtocol": {
              "batchCompletion": "{{confirm_all_planned_batches_completed_and_approved}}",
              "codeReviewStatus": "{{validate_APPROVED_status_with_comprehensive_testing}}",
              "acceptanceCriteria": "{{verify_all_criteria_met_with_documented_evidence}}",
              "qualityGates": "{{ensure_build_lint_tests_performance_security_satisfied}}",
              "integrationTesting": "{{confirm_integration_validated_and_working}}"
            }
          },
          "sequenceOrder": 2
        },
        {
          "name": "analyze_files_and_changes",
          "actionType": "ANALYSIS",
          "actionData": {
            "analysisType": "comprehensive_file_and_change_analysis",
            "analysisProtocol": {
              "modifiedFiles": "{{identify_catalog_changed_files_with_purposes}}",
              "newFiles": "{{document_new_files_directories_with_descriptions}}",
              "deletedFiles": "{{note_removed_deprecated_files_with_rationale}}",
              "configurationChanges": "{{identify_config_environment_dependency_changes}}",
              "databaseChanges": "{{document_schema_migrations_data_modifications}}"
            }
          },
          "sequenceOrder": 3
        }
      ],
      "triggerReport": true,
      "reportType": "comprehensive_context_and_validation",
      "reportTemplate": "implementation_context_and_completeness_validation"
    },
    {
      "name": "mandatory_git_integration_and_remote_synchronization",
      "displayName": "MANDATORY: Git Integration and Remote Synchronization",
      "description": "Execute comprehensive git operations with error handling and remote synchronization for integration readiness",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "15-25 minutes",
      "stepType": "GIT_OPERATIONS",
      "behavioralContext": {
        "approach": "MANDATORY git integration operations with comprehensive error handling and validation",
        "principles": [
          "CRITICAL: Ensure all implementation properly committed and ready for integration",
          "HALT INTEGRATION immediately if any git operation fails",
          "Verify feature branch status and prevent integration from main/master branches",
          "Execute comprehensive commit creation with detailed integration message",
          "Perform remote synchronization with push verification and error handling"
        ],
        "methodology": "Git-first integration with mandatory validation and error recovery protocols"
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute git status assessment: verify working directory clean and correct feature branch",
          "Perform file staging and commit verification: stage all changes and verify no unstaged files",
          "Create comprehensive integration commit: detailed message with implementation summary and quality gates",
          "Execute remote synchronization: fetch latest, push feature branch, verify success",
          "Implement error handling protocol: document errors, attempt resolution, halt if unresolvable",
          "Validate git integration completion: clean state, successful push, ready for PR creation"
        ]
      },
      "qualityChecklist": [
        "Git status assessment completed with clean working directory and correct feature branch verified",
        "File staging and commit verification successful with all implementation changes committed",
        "Comprehensive integration commit created with detailed message including quality gates validation",
        "Remote synchronization completed with successful push and verification of feature branch",
        "Error handling protocol implemented with resolution attempts and escalation procedures",
        "Git integration completion validated with clean state and integration readiness confirmed"
      ],
      "conditions": [
        {
          "name": "context_and_validation_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "comprehensive_context_and_implementation_validation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "execute_git_status_assessment",
          "actionType": "GIT_OPERATIONS",
          "actionData": {
            "operationType": "git_status_and_branch_verification",
            "gitCommands": {
              "statusCheck": "git status --porcelain",
              "branchVerification": "git branch --show-current",
              "branchValidation": "ensure_feature_branch_not_main_master",
              "cleanStateVerification": "verify_working_directory_clean"
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "execute_file_staging_and_commit_creation",
          "actionType": "GIT_OPERATIONS",
          "actionData": {
            "operationType": "comprehensive_staging_and_commit",
            "gitCommands": {
              "stageFiles": "git add .",
              "verifyStaged": "git diff --cached --stat",
              "checkUnstaged": "git diff --name-only",
              "createCommit": "git commit with comprehensive integration message",
              "verifyCommit": "git rev-parse HEAD for commit hash validation"
            }
          },
          "sequenceOrder": 2
        },
        {
          "name": "execute_remote_synchronization",
          "actionType": "GIT_OPERATIONS",
          "actionData": {
            "operationType": "remote_synchronization_and_push",
            "gitCommands": {
              "fetchLatest": "git fetch origin",
              "pushBranch": "git push origin current_branch",
              "verifyPush": "validate push success and remote sync",
              "errorHandling": "implement error recovery and escalation protocols"
            }
          },
          "sequenceOrder": 3
        }
      ],
      "triggerReport": true,
      "reportType": "git_integration_operations",
      "reportTemplate": "mandatory_git_integration_and_synchronization"
    },
    {
      "name": "comprehensive_documentation_and_pull_request_creation",
      "displayName": "Comprehensive Documentation and Pull Request Creation",
      "description": "Update all project documentation and create detailed pull request with comprehensive validation evidence",
      "sequenceNumber": 3,
      "isRequired": true,
      "estimatedTime": "30-40 minutes",
      "stepType": "DOCUMENTATION_AND_PR",
      "behavioralContext": {
        "approach": "Comprehensive documentation updates with detailed pull request creation and validation evidence",
        "principles": [
          "Update all memory bank documentation to reflect implementation changes",
          "Create comprehensive pull request with detailed description and validation evidence",
          "Ensure documentation accuracy and completeness with working examples",
          "Provide detailed review checklist and deployment considerations for reviewers"
        ],
        "methodology": "Documentation-driven integration with comprehensive pull request preparation"
      },
      "approachGuidance": {
        "stepByStep": [
          "Update memory bank documentation: ProjectOverview.md, TechnicalArchitecture.md, DeveloperGuide.md with implementation changes",
          "Update README.md comprehensively: installation, usage, API documentation, configuration, development sections",
          "Perform legacy documentation cleanup: remove outdated sections, fix broken links, consolidate duplicates",
          "Generate pull request preparation: file change summary, conflicts check, comprehensive description creation",
          "Create detailed pull request with template: task summary, changes overview, acceptance criteria verification",
          "Include technical documentation and deployment considerations with reviewer checklist"
        ]
      },
      "qualityChecklist": [
        "Memory bank documentation updated comprehensively with implementation changes and architectural modifications",
        "README.md updated with installation, usage, API documentation, configuration, and development information",
        "Legacy documentation cleanup completed with outdated sections removed and broken links fixed",
        "Pull request preparation executed with file change summary and comprehensive description generation",
        "Detailed pull request created with task summary, changes overview, and acceptance criteria verification",
        "Technical documentation and deployment considerations included with comprehensive reviewer checklist"
      ],
      "conditions": [
        {
          "name": "git_integration_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "mandatory_git_integration_and_remote_synchronization"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "update_memory_bank_documentation",
          "actionType": "DOCUMENTATION_UPDATE",
          "actionData": {
            "updateType": "comprehensive_memory_bank_updates",
            "documentationTargets": {
              "projectOverview": "{{feature_additions_capability_updates_architecture_changes_user_impact}}",
              "technicalArchitecture": "{{component_changes_integration_points_technology_stack_performance_security}}",
              "developerGuide": "{{setup_instructions_usage_examples_API_documentation_testing_debugging}}"
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "update_comprehensive_readme_and_cleanup",
          "actionType": "DOCUMENTATION_UPDATE",
          "actionData": {
            "updateType": "readme_and_legacy_documentation_cleanup",
            "documentationTargets": {
              "readmeUpdate": "{{installation_usage_API_documentation_configuration_development_sections}}",
              "legacyCleanup": "{{outdated_sections_deprecated_features_broken_links_duplicate_information}}",
              "consistencyValidation": "{{cross_references_example_testing_link_validation_formatting}}"
            }
          },
          "sequenceOrder": 2
        },
        {
          "name": "create_comprehensive_pull_request",
          "actionType": "PULL_REQUEST_CREATION",
          "actionData": {
            "prType": "comprehensive_integration_pull_request",
            "prComponents": {
              "preparation": "{{file_change_summary_conflict_check_description_generation}}",
              "prDescription": "{{task_summary_changes_overview_acceptance_criteria_verification}}",
              "technicalDetails": "{{new_features_modified_components_documentation_updates_testing_validation}}",
              "reviewerGuidance": "{{deployment_considerations_review_checklist_quality_validation}}"
            }
          },
          "sequenceOrder": 3
        }
      ],
      "triggerReport": true,
      "reportType": "documentation_and_pull_request",
      "reportTemplate": "comprehensive_documentation_and_pr_creation"
    },
    {
      "name": "final_quality_validation_completion_and_delivery_coordination",
      "displayName": "Final Quality Validation, Completion, and Delivery Coordination",
      "description": "Execute final validation, create completion report, and coordinate delivery with boomerang delegation",
      "sequenceNumber": 4,
      "isRequired": true,
      "estimatedTime": "20-30 minutes",
      "stepType": "COMPLETION_AND_DELIVERY",
      "behavioralContext": {
        "approach": "Comprehensive final validation with completion reporting and strategic delivery coordination",
        "principles": [
          "Perform comprehensive validation of all deliverables with evidence collection",
          "Create detailed integration completion report with validation evidence",
          "Coordinate final delivery with comprehensive handoff documentation",
          "Execute boomerang delegation for production deployment and next work evaluation"
        ],
        "methodology": "Evidence-based completion with comprehensive delivery coordination and knowledge preservation"
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute final quality validation: implementation, documentation, and technical quality with comprehensive checklists",
          "Create integration completion report: comprehensive validation evidence, acceptance criteria verification, delivery evidence",
          "Prepare delivery coordination: comprehensive delivery documentation, success metrics, monitoring procedures",
          "Execute boomerang delegation: task completion status, delivery readiness, next actions coordination",
          "Complete knowledge preservation: implementation evidence, architectural patterns, lessons learned documentation",
          "Validate final handoff: actionable next steps, comprehensive context preservation, production readiness confirmation"
        ]
      },
      "qualityChecklist": [
        "Final quality validation completed with implementation, documentation, and technical quality verification",
        "Integration completion report created with comprehensive validation evidence and acceptance criteria verification",
        "Delivery coordination prepared with comprehensive documentation, success metrics, and monitoring procedures",
        "Boomerang delegation executed with task completion status and delivery readiness confirmation",
        "Knowledge preservation completed with implementation evidence and architectural patterns documentation",
        "Final handoff validated with actionable next steps and production readiness confirmation"
      ],
      "conditions": [
        {
          "name": "documentation_and_pr_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "comprehensive_documentation_and_pull_request_creation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "execute_final_quality_validation",
          "actionType": "VALIDATION",
          "actionData": {
            "validationType": "comprehensive_final_quality_validation",
            "validationChecklists": {
              "implementationQuality": "{{functional_integration_performance_security_user_experience}}",
              "documentationQuality": "{{accuracy_completeness_usability_consistency_maintenance}}",
              "technicalQuality": "{{build_verification_test_coverage_code_quality_dependencies_configuration}}"
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "create_integration_completion_report",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "ReviewOperations",
            "operation": "create_completion",
            "parameters": {
              "completionData": {
                "summary": "{{complete_integration_ready_for_production_deployment_with_validation}}",
                "acceptanceCriteriaVerification": "{{comprehensive_criteria_verification_with_evidence}}",
                "deliveryEvidence": "{{git_integration_pull_request_documentation_quality_validation}}",
                "filesModified": "{{complete_list_modified_files_with_descriptions}}",
                "documentationUpdates": "{{memory_bank_readme_technical_documentation_updates}}",
                "integrationNotes": "{{implementation_integrated_with_documentation_testing_validation_production_readiness}}"
              }
            }
          },
          "sequenceOrder": 2
        },
        {
          "name": "execute_delivery_coordination_and_boomerang_delegation",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "WorkflowOperations",
            "operation": "delegate",
            "parameters": {
              "fromRole": "integration-engineer",
              "toRole": "boomerang",
              "message": "Task fully integrated and ready for production deployment. All code committed, comprehensive PR created, documentation updated and validated, quality gates satisfied. Ready for user delivery and next work evaluation.",
              "completionData": {
                "taskStatus": "integrated",
                "deliveryStatus": "ready-for-production",
                "pullRequest": "{{PR_created_with_comprehensive_review_checklist_and_validation_evidence}}",
                "documentationStatus": "fully-updated-and-validated",
                "qualityValidation": "all-gates-passed-with-evidence",
                "nextActions": [
                  "user-delivery-with-pr-link",
                  "next-task-evaluation"
                ]
              }
            }
          },
          "sequenceOrder": 3
        }
      ],
      "triggerReport": true,
      "reportType": "final_validation_completion_and_delivery",
      "reportTemplate": "integration_completion_and_delivery_coordination"
    }
  ]
}
