{
  "workflowSteps": [
    {
      "name": "analyze_implementation_context",
      "description": "Analyze implementation and formulate testing strategy",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Context-driven analysis with adaptive testing strategy",
      "approachGuidance": {
        "stepByStep": [
          "Check if task context is already available in current execution history",
          "If context is available, analyze and validate its completeness",
          "Only if context is missing or incomplete, execute TaskOperations.get to retrieve implementation context and codebase analysis",
          "  - Use MCP call with serviceName: 'TaskOperations', operation: 'get'",
          "  - Retrieve task details, implementation scope, and codebase analysis",
          "  - Validate completeness of retrieved context information",
          "Analyze task type, tech stack, and implementation scope",
          "Identify highest-risk areas and integration points",
          "Formulate testing strategy appropriate for changes made",
          "Establish risk-based testing priorities"
        ]
      },
      "qualityChecklist": [
        "Implementation context and scope thoroughly analyzed",
        "Technology stack and architecture patterns identified",
        "Highest-risk areas for testing identified",
        "Testing strategy formulated for tech stack and changes",
        "Risk-based testing priorities established"
      ],
      "conditions": []
    },
    {
      "name": "execute_targeted_validation",
      "description": "Execute focused validation based on testing strategy",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Strategic testing execution with evidence collection",
      "approachGuidance": {
        "stepByStep": [
          "Execute testing strategy focusing on identified risk areas",
          "Apply validation methods appropriate for tech stack",
          "Test core functionality and integration points",
          "Assess code quality and pattern compliance",
          "Collect specific evidence of validation results"
        ]
      },
      "qualityChecklist": [
        "Testing strategy executed on highest-risk areas",
        "Validation methods appropriate for tech stack applied",
        "Core functionality thoroughly tested",
        "Integration points validated for proper operation",
        "Code quality assessed against established standards"
      ],
      "conditions": [
        {
          "name": "context_analysis_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "analyze_implementation_context"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "verify_acceptance_criteria",
      "description": "Verify acceptance criteria and synthesize evidence",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Systematic acceptance criteria validation with evidence synthesis",
      "approachGuidance": {
        "stepByStep": [
          "Map validation results against acceptance criteria",
          "Verify each criterion satisfied with specific evidence",
          "Identify any gaps between requirements and implementation",
          "Synthesize evidence into clear quality assessment",
          "Prepare comprehensive evidence for decision making"
        ]
      },
      "qualityChecklist": [
        "All acceptance criteria mapped to validation evidence",
        "Each criterion verified with specific evidence",
        "Any gaps between requirements and implementation identified",
        "Evidence synthesized into clear quality assessment",
        "Comprehensive evidence prepared for review decision"
      ],
      "conditions": [
        {
          "name": "validation_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "execute_targeted_validation"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "intelligent_review_decision_and_workflow_completion",
      "description": "Make evidence-based review decision and execute appropriate role transition based on review outcome",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Evidence-based decision making with direct role transition execution based on review outcome",
      "approachGuidance": {
        "stepByStep": [
          "Evaluate all validation evidence against approval criteria for informed decision",
          "Apply deterministic decision criteria to determine APPROVED or NEEDS_CHANGES",
          "Create comprehensive review report with findings, evidence, and decision rationale",
          "  - Use MCP call with serviceName: 'ReviewOperations', operation: 'create_review'",
          "  - Include all validation evidence and decision rationale",
          "  - Document findings, evidence, and comprehensive review assessment",
          "Determine appropriate role transition based on decision outcome",
          "Execute the appropriate execute_transition tool directly with proper context",
          "Ensure comprehensive documentation of decision rationale and next steps"
        ],
        "decisionMakingSteps": [
          "Assess overall implementation quality against established standards",
          "Evaluate requirements satisfaction completeness based on evidence",
          "Consider production readiness and any remaining risks or concerns",
          "Apply decision criteria to determine APPROVED or NEEDS_CHANGES outcome"
        ],
        "roleTransitionSelectionSteps": [
          "IF decision is APPROVED: Use execute_transition with 'code_review_to_integration_engineer' transitionId",
          "IF decision is NEEDS_CHANGES: Use execute_transition with 'code_review_to_architect' transitionId",
          "Document specific reasons for transition selection based on review findings",
          "Include clear guidance for next steps in handoffMessage"
        ],
        "transitionExecutionSteps": [
          "Create detailed review report with findings, evidence, and decision rationale",
          "Call execute_transition tool directly (available to agent, not MCP_CALL)",
          "Use appropriate transitionId based on decision outcome",
          "Provide comprehensive handoffMessage with review context and next steps"
        ]
      },
      "qualityChecklist": [
        "Review decision based on comprehensive evidence evaluation and risk assessment",
        "Deterministic criteria applied to select appropriate role transition",
        "Implementation quality, requirements satisfaction, and production readiness considered",
        "Comprehensive review report created with findings, evidence, and decision rationale",
        "Correct role transition executed directly using execute_transition tool",
        "Context preservation comprehensive with clear rationale and handoff information for receiving role"
      ],
      "conditions": [
        {
          "name": "criteria_verification_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "verify_acceptance_criteria"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "make_review_decision",
      "description": "Make code review decision and execute appropriate transition",
      "sequenceNumber": 5,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Evidence-based decision making with appropriate role transition",
      "approachGuidance": {
        "stepByStep": [
          "Make review decision based on validation evidence",
          "If approved: transition to integration-engineer for final steps",
          "If needs changes: transition to architect for revision",
          "Execute get_role_transitions with appropriate parameters",
          "Execute transition with comprehensive evidence in handoff"
        ]
      },
      "qualityChecklist": [
        "Review decision made based on validation evidence",
        "Appropriate transition path determined",
        "get_role_transitions executed with correct parameters",
        "Transition executed with comprehensive evidence",
        "Decision rationale and evidence properly communicated"
      ],
      "conditions": [
        {
          "name": "criteria_verification_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "verify_acceptance_criteria"
            }
          },
          "isRequired": true
        }
      ]
    }
  ]
}