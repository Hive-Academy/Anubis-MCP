{
  "serviceOrchestrationProtocols": {
    "orchestratorService": "CoreServiceOrchestrator",
    "description": "Service orchestration protocols for Code Review role focusing on quality validation, acceptance criteria verification, and production readiness assessment",
    "serviceOperations": {
      "ReviewOperations": {
        "description": "Core review operations for quality validation and acceptance criteria verification",
        "operations": [
          {
            "name": "conductImplementationAnalysis",
            "description": "Analyze implementation against acceptance criteria and quality standards",
            "actionType": "IMPLEMENTATION_ANALYSIS",
            "parameters": {
              "taskId": "string",
              "implementationScope": "string",
              "acceptanceCriteria": "array",
              "qualityStandards": "object"
            },
            "returns": "ImplementationAnalysisResult"
          },
          {
            "name": "validateAcceptanceCriteria",
            "description": "Validate each acceptance criterion with concrete evidence",
            "actionType": "ACCEPTANCE_VALIDATION",
            "parameters": {
              "taskId": "string",
              "acceptanceCriteria": "array",
              "implementationEvidence": "object"
            },
            "returns": "AcceptanceCriteriaValidationResult"
          },
          {
            "name": "performSecurityReview",
            "description": "Conduct security review of implementation",
            "actionType": "SECURITY_REVIEW",
            "parameters": {
              "taskId": "string",
              "securityChecklist": "array",
              "implementationDetails": "object"
            },
            "returns": "SecurityReviewResult"
          },
          {
            "name": "validatePerformanceRequirements",
            "description": "Validate performance requirements and optimization",
            "actionType": "PERFORMANCE_VALIDATION",
            "parameters": {
              "taskId": "string",
              "performanceRequirements": "object",
              "performanceMetrics": "object"
            },
            "returns": "PerformanceValidationResult"
          },
          {
            "name": "collectReviewEvidence",
            "description": "Collect and document evidence for review decision",
            "actionType": "EVIDENCE_COLLECTION",
            "parameters": {
              "taskId": "string",
              "reviewFindings": "object",
              "validationResults": "object"
            },
            "returns": "ReviewEvidencePackage"
          },
          {
            "name": "makeReviewDecision",
            "description": "Make final review decision based on collected evidence",
            "actionType": "REVIEW_DECISION",
            "parameters": {
              "taskId": "string",
              "evidencePackage": "object",
              "qualityGates": "array"
            },
            "returns": "ReviewDecisionResult"
          }
        ]
      },
      "TaskOperations": {
        "description": "Task management operations for review workflow",
        "operations": [
          {
            "name": "getTaskContext",
            "description": "Retrieve complete task context for review",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "includeImplementation": "boolean",
              "includeTestResults": "boolean"
            },
            "returns": "TaskContextResult"
          },
          {
            "name": "updateTaskStatus",
            "description": "Update task status based on review outcome",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "status": "string",
              "reviewNotes": "string"
            },
            "returns": "TaskUpdateResult"
          },
          {
            "name": "createReworkRequirements",
            "description": "Create detailed rework requirements for failed review",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "reviewFindings": "object",
              "reworkPriority": "string"
            },
            "returns": "ReworkRequirementsResult"
          }
        ]
      },
      "WorkflowOperations": {
        "description": "Workflow management operations for review coordination",
        "operations": [
          {
            "name": "validateWorkflowReadiness",
            "description": "Validate workflow readiness for review transition",
            "actionType": "VALIDATION",
            "parameters": {
              "taskId": "string",
              "transitionRequirements": "array"
            },
            "returns": "WorkflowReadinessResult"
          },
          {
            "name": "prepareWorkflowTransition",
            "description": "Prepare workflow transition based on review outcome",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "reviewDecision": "string",
              "nextRole": "string",
              "handoffContext": "object"
            },
            "returns": "WorkflowTransitionResult"
          },
          {
            "name": "completeWorkflow",
            "description": "Complete workflow for successful review",
            "actionType": "MCP_CALL",
            "parameters": {
              "taskId": "string",
              "deliverablePackage": "object",
              "completionEvidence": "object"
            },
            "returns": "WorkflowCompletionResult"
          }
        ]
      },
      "QualityOperations": {
        "description": "Quality assurance operations for comprehensive validation",
        "operations": [
          {
            "name": "validateCodeQuality",
            "description": "Validate code quality against established standards",
            "actionType": "QUALITY_VALIDATION",
            "parameters": {
              "taskId": "string",
              "codeQualityStandards": "object",
              "implementationCode": "object"
            },
            "returns": "CodeQualityValidationResult"
          },
          {
            "name": "validateTestCoverage",
            "description": "Validate test coverage and test quality",
            "actionType": "TESTING_VALIDATION",
            "parameters": {
              "taskId": "string",
              "testCoverageRequirements": "object",
              "testResults": "object"
            },
            "returns": "TestCoverageValidationResult"
          },
          {
            "name": "validateDocumentation",
            "description": "Validate documentation completeness and quality",
            "actionType": "DOCUMENTATION_VALIDATION",
            "parameters": {
              "taskId": "string",
              "documentationRequirements": "object",
              "documentationArtifacts": "object"
            },
            "returns": "DocumentationValidationResult"
          },
          {
            "name": "validateProductionReadiness",
            "description": "Validate production readiness and deployment requirements",
            "actionType": "PRODUCTION_READINESS",
            "parameters": {
              "taskId": "string",
              "productionRequirements": "object",
              "deploymentArtifacts": "object"
            },
            "returns": "ProductionReadinessResult"
          }
        ]
      }
    },
    "workflowStepMappings": {
      "context-acquisition": {
        "primaryService": "TaskOperations",
        "primaryOperation": "getTaskContext",
        "supportingOperations": [
          {
            "service": "WorkflowOperations",
            "operation": "validateWorkflowReadiness"
          }
        ]
      },
      "implementation-analysis": {
        "primaryService": "ReviewOperations",
        "primaryOperation": "conductImplementationAnalysis",
        "supportingOperations": [
          {
            "service": "QualityOperations",
            "operation": "validateCodeQuality"
          }
        ]
      },
      "testing-validation": {
        "primaryService": "QualityOperations",
        "primaryOperation": "validateTestCoverage",
        "supportingOperations": [
          {
            "service": "ReviewOperations",
            "operation": "validateAcceptanceCriteria"
          }
        ]
      },
      "security-performance-review": {
        "primaryService": "ReviewOperations",
        "primaryOperation": "performSecurityReview",
        "supportingOperations": [
          {
            "service": "ReviewOperations",
            "operation": "validatePerformanceRequirements"
          },
          {
            "service": "QualityOperations",
            "operation": "validateProductionReadiness"
          }
        ]
      },
      "evidence-collection": {
        "primaryService": "ReviewOperations",
        "primaryOperation": "collectReviewEvidence",
        "supportingOperations": [
          {
            "service": "QualityOperations",
            "operation": "validateDocumentation"
          }
        ]
      },
      "review-decision": {
        "primaryService": "ReviewOperations",
        "primaryOperation": "makeReviewDecision",
        "supportingOperations": [
          {
            "service": "TaskOperations",
            "operation": "updateTaskStatus"
          },
          {
            "service": "TaskOperations",
            "operation": "createReworkRequirements"
          }
        ]
      },
      "workflow-completion": {
        "primaryService": "WorkflowOperations",
        "primaryOperation": "completeWorkflow",
        "supportingOperations": [
          {
            "service": "WorkflowOperations",
            "operation": "prepareWorkflowTransition"
          }
        ]
      }
    },
    "qualityGates": {
      "acceptanceCriteriaValidation": {
        "description": "All acceptance criteria must be verified with concrete evidence",
        "validationService": "ReviewOperations",
        "validationOperation": "validateAcceptanceCriteria",
        "passingCriteria": {
          "allCriteriaVerified": true,
          "evidenceQuality": "sufficient",
          "verificationMethod": "documented"
        }
      },
      "codeQualityValidation": {
        "description": "Code quality must meet established standards",
        "validationService": "QualityOperations",
        "validationOperation": "validateCodeQuality",
        "passingCriteria": {
          "codeQualityScore": ">=80",
          "solidPrinciplesCompliance": true,
          "designPatternUsage": "appropriate"
        }
      },
      "securityValidation": {
        "description": "Security requirements must be satisfied",
        "validationService": "ReviewOperations",
        "validationOperation": "performSecurityReview",
        "passingCriteria": {
          "securityVulnerabilities": "none-critical",
          "securityBestPractices": "followed",
          "dataProtection": "compliant"
        }
      },
      "performanceValidation": {
        "description": "Performance requirements must be met",
        "validationService": "ReviewOperations",
        "validationOperation": "validatePerformanceRequirements",
        "passingCriteria": {
          "performanceTargets": "met",
          "scalabilityRequirements": "satisfied",
          "resourceUtilization": "optimized"
        }
      },
      "testingValidation": {
        "description": "Testing requirements must be satisfied",
        "validationService": "QualityOperations",
        "validationOperation": "validateTestCoverage",
        "passingCriteria": {
          "testCoverage": ">=80%",
          "testQuality": "high",
          "allTestsPassing": true
        }
      },
      "productionReadiness": {
        "description": "Implementation must be ready for production deployment",
        "validationService": "QualityOperations",
        "validationOperation": "validateProductionReadiness",
        "passingCriteria": {
          "deploymentArtifacts": "complete",
          "configurationManagement": "proper",
          "monitoringSetup": "configured"
        }
      }
    },
    "errorHandling": {
      "reviewFailures": {
        "description": "Handle review failures and rework requirements",
        "errorTypes": [
          "ACCEPTANCE_CRITERIA_NOT_MET",
          "CODE_QUALITY_INSUFFICIENT",
          "SECURITY_VULNERABILITIES_FOUND",
          "PERFORMANCE_REQUIREMENTS_NOT_MET",
          "TESTING_INADEQUATE"
        ],
        "recoveryActions": [
          {
            "service": "TaskOperations",
            "operation": "createReworkRequirements"
          },
          {
            "service": "WorkflowOperations",
            "operation": "prepareWorkflowTransition"
          }
        ]
      },
      "architecturalIssues": {
        "description": "Handle fundamental architectural issues requiring redesign",
        "errorTypes": [
          "SOLID_PRINCIPLE_VIOLATIONS",
          "DESIGN_PATTERN_MISUSE",
          "ARCHITECTURAL_FLAWS",
          "SCALABILITY_ISSUES"
        ],
        "escalationActions": [
          {
            "service": "WorkflowOperations",
            "operation": "prepareWorkflowTransition",
            "parameters": {
              "nextRole": "architect",
              "escalationReason": "architectural-redesign-required"
            }
          }
        ]
      }
    }
  }
}