{
  "workflowSteps": [
    {
      "name": "turbo_git_setup_and_memory_analysis",
      "description": "Git repository initialization, feature branch creation, and memory bank analysis. Creates a clean working environment by handling uncommitted changes, creating a feature branch, and analyzing memory bank files for project context.",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Quick git setup with comprehensive memory bank analysis",
      "approachGuidance": {
        "stepByStep": [
          "Check git repository status with 'git status --porcelain' and capture the output to determine if there are uncommitted changes",
          "If uncommitted changes exist, commit them using 'git commit -m \"turbo-dev-stash-[timestamp]\"' where timestamp is current ISO timestamp",
          "Create and checkout a new feature branch using 'git checkout -b turbo/[task-slug]' where task-slug is derived from the task name by converting to lowercase and replacing spaces with hyphens",
          "Store the created branch name in workflow context as 'gitBranch' for use in subsequent steps",
          "Check if memory-bank folder exists, if it exists, do Enhanced Memory Bank Analysis:",
          "1. memory-bank/ProjectOverview.md: Extract business context, features, stakeholder requirements, value propositions",
          "2. memory-bank/TechnicalArchitecture.md: Extract architecture patterns, component structure, technology stack, performance requirements",
          "3. memory-bank/DeveloperGuide.md: Extract implementation standards, coding patterns, quality guidelines, testing approaches"
        ],
        "contextOutput": {
          "gitBranch": "Name of created feature branch",
          "hasStashedChanges": "Boolean indicating if changes were stashed",
          "memoryBankAnalysis": "Extracted insights from memory bank files",
          "techStack": "Technology stack from memory bank analysis",
          "architecturePatterns": "Architecture patterns from memory bank"
        }
      },
      "qualityChecklist": [
        "Git repository functional with clean working directory",
        "Feature branch created and checked out",
        "Branch name stored in context for next steps",
        "Memory bank analysis completed if files exist",
        "Project context extracted and documented"
      ],
      "conditions": [
        {
          "name": "git_repository_exists",
          "conditionType": "DIRECTORY_EXISTS",
          "logic": {
            "check": "directory_exists",
            "parameters": {
              "directories": [
                ".git"
              ]
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "turbo_task_creation_with_codebase_analysis",
      "description": "Analyze codebase systematically and create task with comprehensive context. Combines project structure analysis, tech stack identification, and task creation in one efficient step. Creates the task without subtasks initially to provide a taskId for subsequent research operations.",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Comprehensive codebase analysis with immediate task creation",
      "approachGuidance": {
        "stepByStep": [
          "Extract clear requirements from user request and create detailed requirement bullets",
          "Combined with the memory bank files analysis, analyze project structure and identify tech stack from package.json, tsconfig.json, and other config files",
          "Test current functionality to understand baseline capabilities",
          "Create task with executionId, comprehensive codebase analysis,MAke sure to set  task status to 'in-progress', and extracted requirements using TaskOperations.create",
          "Store the returned taskId in context for use in research and subtask creation steps"
        ],
        "contextOutput": {
          "taskId": "Created task ID",
          "taskRequirements": "Clear bullet points of what needs to be done",
          "codebaseAnalysis": "Comprehensive project structure and tech stack analysis",
          "baselineFunctionality": "Current system capabilities"
        }
      },
      "qualityChecklist": [
        "Project structure and tech stack documented",
        "Current functionality tested and verified",
        "Requirements extracted and clearly defined",
        "Task created with executionId linked to workflow and make sure Task status is set to 'in-progress'",
        "TaskId stored in context for subsequent steps"
      ],
      "actions": [
        {
          "name": "create_task",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "create",
            "requiredParameters": [
              "executionId",
              "taskData",
              "description",
              "codebaseAnalysis"
            ]
          },
          "sequenceOrder": 1
        }
      ]
    },
    {
      "name": "turbo_research_decision_and_execution",
      "description": "Intelligent research decision and conditional execution. Evaluates task complexity against known patterns and executes focused research only when needed for new technologies or complex integrations. Uses the taskId from previous step for research operations.",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "DECISION",
      "approach": "Smart evaluation with conditional research execution",
      "approachGuidance": {
        "stepByStep": [
          "Use task requirements, codebase analysis, and baseline functionality from previous step context",
          "Review task requirements and current system capabilities from previous analysis",
          "Evaluate if technologies/patterns are familiar or unknown by comparing against tech stack analysis",
          "Apply decision criteria: research needed for new external APIs, unknown integration patterns, or complex architectural changes",
          "If research needed, execute focused research:",
          "- Identify 1-3 specific technical questions that need answers",
          "- Use web_search or codebase_search to find authoritative documentation and examples",
          "- Create research findings using ResearchOperations.create_research with taskId from context and implementation-ready answers",
          "- Extract specific code examples and best practices",
          "Document decision and research findings for next steps"
        ],
        "contextOutput": {
          "researchNeeded": "Boolean decision",
          "researchQuestions": "Array of specific questions if research needed",
          "researchFindings": "Implementation-ready answers if research conducted",
          "implementationApproach": "Recommended approach based on analysis/research",
          "decisionReasoning": "Clear explanation of decision"
        }
      },
      "qualityChecklist": [
        "Task context used from previous step (taskId, requirements, codebase analysis)",
        "Current system capabilities evaluated against task requirements",
        "Task complexity evaluated against known capabilities",
        "Research decision made with clear criteria",
        "If research needed: specific questions answered with actionable information using valid taskId",
        "Implementation approach clearly defined",
        "Decision reasoning documented clearly"
      ],
      "actions": [
        {
          "name": "create_research_if_needed",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "ResearchOperations",
            "operation": "create_research",
            "requiredParameters": [
              "taskId"
            ]
          },
          "sequenceOrder": 1
        }
      ]
    },
    {
      "name": "turbo_subtask_creation_with_implementation_context",
      "description": "Create implementation-ready subtasks using all context gathered from previous steps including task requirements, codebase analysis, and research findings. Each subtask contains embedded implementation details including approach, files to modify, code patterns, and acceptance criteria.",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligent subtask creation with comprehensive context",
      "approachGuidance": {
        "stepByStep": [
          "Use taskId, task requirements, codebase analysis, and research findings from previous steps",
          "Create 3-5 focused subtasks where each subtask includes:",
          "- Clear name and description based on task requirements",
          "- Implementation approach from research findings (if research was conducted)",
          "- Specific files to modify based on codebase analysis",
          "- Code examples and patterns to follow from research/memory bank",
          "- Acceptance criteria for validation",
          "- Technical specifications and performance targets",
          "- Quality constraints and testing requirements",
          "- Strategic guidance and architectural context",
          "Use SubtaskOperations.create_subtask or PlanningOperations.create_subtasks with taskId from context to create subtasks with all embedded implementation details",
          "Store the returned subtaskIds array in context for the execution phase"
        ],
        "contextOutput": {
          "subtaskCount": "Number of subtasks created",
          "subtaskIds": "Array of subtask IDs for tracking",
          "subtasksCreated": "Boolean indicating successful subtask creation"
        }
      },
      "qualityChecklist": [
        "TaskId from previous step used for subtask creation",
        "Subtasks contain implementation-ready details with all required fields",
        "Each subtask has clear acceptance criteria and implementation approach",
        "Research findings incorporated into subtask implementation guidance",
        "Codebase analysis reflected in files to modify and technical approach",
        "All subtasks include strategic guidance and technical specifications"
      ],
      "actions": [
        {
          "name": "create_subtasks_with_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "create_subtasks",
            "requiredParameters": [
              "taskId",
              "batchData"
            ]
          },
          "sequenceOrder": 1
        }
      ]
    },
    {
      "name": "turbo_subtask_implementation",
      "description": "Execute subtasks iteratively with comprehensive testing and individual commits. Implements each subtask following the embedded guidance, validates thoroughly, and commits with descriptive messages.",
      "sequenceNumber": 5,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Iterative implementation with validation and commits",
      "approachGuidance": {
        "stepByStep": [
          "Use existing context from previous steps (no redundant context fetching)",
          "Get next subtask using SubtaskOperations.get_next_subtask with taskId from context",
          "Update subtask status to 'in-progress' using SubtaskOperations.update_subtask",
          "Implement subtask following embedded guidance:",
          "- Use implementation approach from subtask details",
          "- Modify files listed in subtask specifications",
          "- Follow code patterns and examples from research/planning",
          "- Apply tech stack best practices from memory bank analysis",
          "- Follow strategic guidance and architectural context",
          "Test implementation thoroughly (unit, integration, manual testing as appropriate)",
          "Commit changes with descriptive subtask-specific message: '[subtask.name]: [brief description]'",
          "Update subtask to 'completed' with comprehensive evidence using SubtaskOperations.update_subtask",
          "Repeat until all subtasks are completed"
        ],
        "contextOutput": {
          "completedSubtasks": "Array of completed subtask IDs",
          "implementationEvidence": "Evidence of completed work",
          "testingResults": "Results of testing for each subtask"
        }
      },
      "qualityChecklist": [
        "All available subtasks retrieved and completed",
        "Each subtask implemented following embedded strategic guidance",
        "Comprehensive testing performed for each subtask",
        "Individual commits made after each subtask completion",
        "All subtasks updated to 'completed' status with evidence"
      ],
      "actions": [
        {
          "name": "get_next_subtask",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "SubtaskOperations",
            "operation": "get_next_subtask"
          },
          "sequenceOrder": 1
        },
        {
          "name": "update_subtask_in_progress",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "SubtaskOperations",
            "operation": "update_subtask"
          },
          "sequenceOrder": 2
        }
      ]
    },
    {
      "name": "turbo_implementation_validation",
      "description": "Comprehensive validation of completed implementation with evidence-based quality assessment. Validates against acceptance criteria, runs tests, and prepares evidence for review decision.",
      "sequenceNumber": 6,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Strategic validation with evidence collection",
      "approachGuidance": {
        "stepByStep": [
          "Use existing task context from previous steps (no redundant context fetching)",
          "Run complete test suite to ensure no regressions",
          "Validate all acceptance criteria are met with specific evidence",
          "Verify code follows established patterns and SOLID principles from memory bank analysis",
          "Check error handling and edge cases",
          "Test core functionality and integration points based on tech stack",
          "Assess code quality against established standards",
          "Collect comprehensive validation evidence",
          "Map validation results against original task requirements"
        ],
        "contextOutput": {
          "validationResults": "Comprehensive validation evidence",
          "testResults": "Test suite results",
          "qualityAssessment": "Code quality assessment",
          "acceptanceCriteriaMet": "Evidence for each acceptance criterion"
        }
      },
      "qualityChecklist": [
        "Complete test suite runs successfully",
        "All acceptance criteria validated and met",
        "Code follows established patterns and SOLID principles",
        "Error handling properly implemented",
        "Core functionality thoroughly tested",
        "Integration points validated for proper operation",
        "Code quality assessed against established standards",
        "Comprehensive validation evidence collected"
      ]
    },
    {
      "name": "turbo_review_and_integration_decision",
      "description": "Evidence-based review decision and conditional integration. Makes intelligent decision based on validation evidence and either proceeds with integration or flags for manual review.",
      "sequenceNumber": 7,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligent review with conditional integration",
      "approachGuidance": {
        "stepByStep": [
          "Evaluate validation evidence against approval criteria",
          "Apply deterministic decision criteria:",
          "- All tests passing",
          "- All acceptance criteria met with evidence",
          "- Code quality meets standards",
          "- No critical issues identified",
          "Create comprehensive review report using ReviewOperations.create_review with findings and decision",
          "If APPROVED: proceed to integration steps",
          "If NEEDS_CHANGES: document specific issues and stop workflow for manual intervention",
          "For approved implementations, prepare for integration"
        ],
        "contextOutput": {
          "reviewDecision": "APPROVED or NEEDS_CHANGES",
          "reviewEvidence": "Comprehensive review evidence",
          "reviewReport": "Detailed review report",
          "integrationReady": "Boolean indicating readiness for integration"
        }
      },
      "qualityChecklist": [
        "Review decision based on comprehensive evidence evaluation",
        "Deterministic criteria applied for approval decision",
        "Implementation quality, requirements satisfaction assessed",
        "Comprehensive review report created with findings and decision",
        "Clear rationale provided for decision"
      ],
      "actions": [
        {
          "name": "create_comprehensive_review_report",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "ReviewOperations",
            "operation": "create_review"
          },
          "sequenceOrder": 1
        }
      ]
    },
    {
      "name": "turbo_integration_and_completion",
      "description": "Final integration, documentation updates, and workflow completion. Handles git integration, documentation updates, and completes the workflow with comprehensive evidence.",
      "sequenceNumber": 8,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Comprehensive integration and completion",
      "approachGuidance": {
        "stepByStep": [
          "Use existing context from previous steps (no redundant context fetching)",
          "Analyze implementation changes for documentation impact",
          "Update memory bank files if architectural changes were made",
          "Update README sections affected by implementation",
          "Execute git integration:",
          "- Verify git status shows clean working directory",
          "- Ensure current branch is feature branch (not main/master)",
          "- Stage all changes with 'git add .'",
          "- Create comprehensive commit: 'turbo-dev: [task-summary] - [key changes]'",
          "- Push feature branch to remote",
          "Update task status to 'completed' using TaskOperations.update",
          "Complete workflow execution using WorkflowOperations.complete_execution with comprehensive summary"
        ],
        "contextOutput": {
          "documentationUpdated": "Boolean indicating documentation updates",
          "gitIntegrationComplete": "Boolean indicating successful git operations",
          "workflowComplete": "Boolean indicating workflow completion"
        }
      },
      "qualityChecklist": [
        "Implementation changes analyzed for documentation impact",
        "Memory bank files updated if needed",
        "README sections updated for affected functionality",
        "Git status verified with clean working directory",
        "Feature branch confirmed and pushed to remote",
        "Task status updated to completed",
        "Workflow execution completed with comprehensive summary"
      ],
      "conditions": [
        {
          "name": "review_approved",
          "conditionType": "CONTEXT_VALUE",
          "logic": {
            "check": "context_equals",
            "parameters": {
              "key": "reviewDecision",
              "value": "APPROVED"
            }
          },
          "isRequired": true
        }
      ]
    }
  ]
}