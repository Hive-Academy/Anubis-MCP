{
  "workflowSteps": [
    {
      "name": "context_gathering_and_analysis",
      "description": "Gather comprehensive implementation context including task details, architect's strategic guidance, and subtask specifications.",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Retrieve and analyze all implementation context to establish execution foundation.",
      "approachGuidance": {
        "stepByStep": [
          "🔍 CONTEXT ACQUISITION:",
          "Review message history for task context and architect's strategic guidance",
          "If context insufficient, execute TaskOperations.get MCP operation:",
          "  - serviceName: 'TaskOperations', operation: 'get'",
          "  - Parameters: includeDescription: true, includeAnalysis: true, includeResearch: true, includeSubtasks: true",
          "🏗️ IMPLEMENTATION CONTEXT ANALYSIS:",
          "Analyze complete task context: business requirements, technical specifications, acceptance criteria",
          "Review architect's strategic guidance and subtask breakdown for implementation approach",
          "Identify technology stack, frameworks, architectural patterns, and existing codebase structure",
          "Review research findings and recommendations impacting implementation decisions",
          "📋 SUBTASK AND ENVIRONMENT PREPARATION:",
          "Evaluate architect's subtasks for implementation readiness and identify any gaps",
          "Understand subtask dependencies and establish implementation order",
          "Verify development environment configuration and required dependencies",
          "Review established code quality standards, testing requirements, and security considerations"
        ]
      },
      "qualityChecklist": [
        "✅ Task context and architect's guidance comprehensively understood",
        "✅ Technology stack and codebase structure analyzed",
        "✅ Subtasks evaluated for completeness and dependencies mapped",
        "✅ Development environment verified and quality standards reviewed",
        "✅ Implementation strategy formulated with clear execution approach"
      ]
    },
    {
      "name": "implement_subtasks",
      "description": "Execute subtasks iteratively with testing, validation, and atomic commits following architect's specifications.",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Systematic subtask execution loop with rigorous testing and incremental commits.",
      "approachGuidance": {
        "stepByStep": [
          "🔄 SUBTASK EXECUTION LOOP (Repeat until all subtasks completed):",
          "**1. GET NEXT SUBTASK:**",
          "Execute mcp_anubis_individual_subtask_operations with operation: 'get_next_subtask'",
          "Parameters: { taskId: [task-id] }",
          "If NO subtasks returned → ALL COMPLETED, proceed to next step",
          "If subtask returned → continue with implementation",
          "**2. UPDATE STATUS TO IN-PROGRESS:**",
          "Execute mcp_anubis_individual_subtask_operations with operation: 'update_subtask'",
          "Parameters: { taskId: [task-id], subtaskId: [subtask-id], status: 'in-progress' }",
          "**3. IMPLEMENT SUBTASK:**",
          "Follow architect's exact implementation approach and provided code examples",
          "Implement error handling, maintain type safety, add logging as specified",
          "Follow established codebase patterns and conventions",
          "**4. TEST IMPLEMENTATION:**",
          "Execute unit tests for new functions, integration tests for system interactions",
          "Perform manual validation and regression testing to ensure no breaks",
          "**5. COMPLETE AND COMMIT:**",
          "Update subtask status to 'completed' using update_subtask operation",
          "Create atomic commit: 'feat: [subtask-name] - [brief description]'",
          "Stage only files related to current subtask and commit",
          "**6. RETURN TO STEP 1** - Continue loop until get_next_subtask returns empty",
          "🚨 CRITICAL REQUIREMENTS:",
          "- MUST complete ALL subtasks before proceeding to validation step",
          "- Each subtask requires individual commit with proper message",
          "- Follow exact sequence: get → update → implement → test → complete → commit",
          "🛠️ ERROR HANDLING:",
          "If subtask implementation fails: Document issue and continue with next subtask",
          "If MCP operations fail: Retry once, then document error and proceed",
          "If testing reveals critical issues: Fix before marking subtask complete"
        ]
      },
      "qualityChecklist": [
        "✅ ALL subtasks retrieved and completed (get_next_subtask returns empty)",
        "✅ Each subtask followed complete cycle: get → update → implement → test → complete → commit",
        "✅ Status properly managed for each subtask (in-progress → completed)",
        "✅ Individual atomic commits created for each subtask with descriptive messages",
        "✅ Implementation follows architect's guidance and established patterns",
        "✅ Comprehensive testing performed for each subtask",
        "✅ Code quality maintained with proper error handling and type safety",
        "✅ No subtasks skipped or batched together inappropriately"
      ],
      "conditions": [
        {
          "name": "context_setup_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "context_gathering_and_analysis"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "validate_implementation",
      "description": "Perform comprehensive validation of complete implementation including testing, quality assurance, and code review preparation.",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Rigorous validation of entire implementation to ensure production readiness.",
      "approachGuidance": {
        "stepByStep": [
          "🔍 PRE-VALIDATION VERIFICATION:",
          "Execute mcp_anubis_individual_subtask_operations with operation: 'get_next_subtask'",
          "VERIFY that NO subtasks are returned (all completed)",
          "If ANY subtasks remain: STOP and return error - validation cannot proceed",
          "🧪 COMPREHENSIVE TESTING:",
          "Execute complete test suite: unit, integration, end-to-end tests",
          "Run performance tests and security validation",
          "Achieve >90% test coverage and ensure all tests pass",
          "📋 ACCEPTANCE CRITERIA VALIDATION:",
          "Create checklist of all acceptance criteria from task and subtasks",
          "Test each criterion individually with documented evidence",
          "Ensure business requirements satisfied from user perspective",
          "🏗️ QUALITY ASSURANCE:",
          "Verify architectural compliance and SOLID principles adherence",
          "Run static code analysis tools (ESLint, TypeScript validation)",
          "Check error handling, edge cases, and security measures",
          "Validate performance benchmarks and no regressions introduced",
          "📝 CODE REVIEW PREPARATION:",
          "Compile test results, coverage reports, and validation evidence",
          "Document implementation approach, decisions, and any deviations",
          "Prepare comprehensive evidence package for code review"
        ]
      },
      "qualityChecklist": [
        "✅ ALL subtasks verified completed (get_next_subtask returns empty)",
        "✅ Complete test suite execution with >90% coverage achieved",
        "✅ All acceptance criteria validated with documented evidence",
        "✅ Architectural compliance and code quality standards met",
        "✅ Security measures validated and performance benchmarks achieved",
        "✅ No regressions introduced and error handling comprehensive",
        "✅ Evidence package prepared for code review with complete documentation"
      ],
      "conditions": [
        {
          "name": "subtasks_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "implement_subtasks"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "role_transition",
      "description": "Transition to code review role with implementation evidence",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to code review with comprehensive implementation evidence",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'senior-developer'",
          "Extract transitionId for senior developer to code review transition",
          "Execute execute_transition with implementation evidence in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for code review transition",
        "execute_transition executed with implementation evidence",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "implementation_validated",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "validate_implementation"
            }
          },
          "isRequired": true
        }
      ]
    }
  ]
}