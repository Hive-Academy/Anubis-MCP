{
  "workflowSteps": [
    {
      "name": "setup_implementation_context",
      "description": "Consume existing context and setup implementation environment",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Retrieve comprehensive context and setup development environment",
      "approachGuidance": {
        "stepByStep": [
          "Check if task context is already available in current execution history",
          "If context is available, analyze and validate its completeness",
          "Only if context is missing or incomplete, execute TaskOperations.get to retrieve implementation context and codebase analysis",
          "Check if implementation plan context is already available in current execution history",
          "Only if context is missing or incomplete, Execute PlanningOperations.get_plan to get implementation plan and subtasks",
          "Extract architect's strategic guidance and implementation specifics",
          "Setup development environment following verified tech stack",
          "Validate implementation readiness without redundant analysis"
        ]
      },
      "qualityChecklist": [
        "Complete task context and codebase analysis consumed",
        "Implementation plan and all subtasks retrieved",
        "Strategic guidance and code examples understood",
        "Development environment properly configured",
        "Implementation readiness validated"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "get_task_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get"
          },
          "sequenceOrder": 1
        },
        {
          "name": "get_implementation_plan",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "get_plan"
          },
          "sequenceOrder": 2
        }
      ]
    },
    {
      "name": "implement_subtasks",
      "description": "Execute subtasks iteratively with testing and commits",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Iterative subtask completion with individual commits and validation",
      "approachGuidance": {
        "stepByStep": [
          "Get next subtask using SubtaskOperations.get_next_subtask",
          "Update subtask status to 'in-progress'",
          "Implement following architect's guidance and code examples",
          "Test implementation thoroughly (unit, integration, manual)",
          "Commit changes with descriptive subtask-specific message",
          "Update subtask to 'completed' with evidence",
          "Repeat until no more subtasks available"
        ]
      },
      "qualityChecklist": [
        "All available subtasks retrieved and completed",
        "Each subtask implemented following strategic guidance",
        "Comprehensive testing performed for each subtask",
        "Individual commits made after each subtask completion",
        "All subtasks updated to 'completed' status with evidence"
      ],
      "conditions": [
        {
          "name": "context_setup_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "setup_implementation_context"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "get_next_subtask",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "SubtaskOperations",
            "operation": "get_next_subtask"
          },
          "sequenceOrder": 1
        },
        {
          "name": "update_subtask_in_progress",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "SubtaskOperations",
            "operation": "update_subtask"
          },
          "sequenceOrder": 2
        }
      ]
    },
    {
      "name": "validate_implementation",
      "description": "Validate complete implementation and prepare for code review",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Comprehensive validation of completed implementation",
      "approachGuidance": {
        "stepByStep": [
          "Run complete test suite to ensure no regressions",
          "Validate all acceptance criteria are met",
          "Verify code follows established patterns and principles",
          "Check error handling and edge cases",
          "Prepare comprehensive evidence for code review"
        ]
      },
      "qualityChecklist": [
        "Complete test suite runs successfully",
        "All acceptance criteria validated and met",
        "Code follows established patterns and SOLID principles",
        "Error handling properly implemented",
        "Implementation evidence prepared for review"
      ],
      "conditions": [
        {
          "name": "subtasks_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "implement_subtasks"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    },
    {
      "name": "role_transition",
      "description": "Transition to code review role with implementation evidence",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to code review with comprehensive implementation evidence",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'senior-developer'",
          "Extract transitionId for senior developer to code review transition",
          "Execute execute_transition with implementation evidence in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for code review transition",
        "execute_transition executed with implementation evidence",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "implementation_validated",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "validate_implementation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    }
  ]
}