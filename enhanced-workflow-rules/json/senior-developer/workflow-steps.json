{
  "workflowSteps": [
    {
      "name": "mandatory_context_consumption_and_setup",
      "displayName": "MANDATORY: Context Consumption and Implementation Setup",
      "description": "Consume existing strategic context and setup implementation environment without re-analysis",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "10-15 minutes",
      "stepType": "SETUP",
      "behavioralContext": {
        "approach": "MANDATORY consumption of existing comprehensive context without redundant analysis",
        "principles": [
          "WORKFLOW STOPPER: Cannot proceed without consuming existing codebaseAnalysis",
          "NEVER re-investigate comprehensive analysis boomerang already completed",
          "ALWAYS consume architect's strategic guidance completely",
          "ALWAYS build upon previous discoveries rather than starting from scratch"
        ],
        "methodology": "Context consumption with implementation environment preparation"
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute query_task_context with comprehensive inclusion (plans, subtasks, analysis)",
          "Extract and validate existing codebaseAnalysis from boomerang (technology stack, patterns, integration points)",
          "Consume architect's strategic guidance (implementation specifics, code examples, quality constraints)",
          "Setup development environment following verified technology stack and patterns",
          "Validate implementation readiness without redundant discovery"
        ]
      },
      "qualityChecklist": [
        "Complete task context retrieved including comprehensive analysis and strategic guidance",
        "Existing codebaseAnalysis consumed (technology stack, architecture, implementation context)",
        "Architect's strategic guidance applied (implementation specifics, code examples, patterns)",
        "Development environment configured using verified technology stack",
        "Implementation readiness validated without redundant analysis"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "acquire_comprehensive_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get",
            "parameters": {
              "includeLevel": "comprehensive",
              "includePlans": true,
              "includeSubtasks": true,
              "includeAnalysis": true,
              "includeComments": false,
              "includeCodebaseAnalysis": true,
              "includeStrategicGuidance": true
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "validate_context_consumption",
          "actionType": "VALIDATION",
          "actionData": {
            "validationType": "mandatory_context_consumption",
            "criteria": {
              "codebaseAnalysisAvailable": "{{technology_stack_patterns_integration_points}}",
              "strategicGuidanceAvailable": "{{implementation_specifics_code_examples_quality_constraints}}",
              "implementationReadiness": "{{no_redundant_analysis_required_existing_context_comprehensive}}",
              "contextConsumptionComplete": "{{ready_to_proceed_following_established_patterns}}"
            }
          },
          "sequenceOrder": 2
        },
        {
          "name": "setup_implementation_environment",
          "actionType": "ENVIRONMENT_SETUP",
          "actionData": {
            "setupType": "verified_technology_stack_environment",
            "setupTargets": [
              "verify_git_branch_matches_task_requirements",
              "install_dependencies_using_confirmed_technology_stack",
              "validate_development_server_and_test_functionality",
              "confirm_project_structure_matches_verified_analysis"
            ]
          },
          "sequenceOrder": 3
        }
      ],
      "triggerReport": true,
      "reportType": "context_consumption_and_setup",
      "reportTemplate": "mandatory_context_consumption_validation"
    },
    {
      "name": "strategic_implementation_execution_with_decision_matrix",
      "displayName": "Strategic Implementation Execution with Decision Matrix",
      "description": "Execute implementation following architectural guidance with strategic decision matrix for complex issues",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "60-120 minutes",
      "stepType": "IMPLEMENTATION",
      "behavioralContext": {
        "approach": "Strategic implementation following architectural guidance with decision matrix for escalation",
        "principles": [
          "Follow architect's code examples exactly for implementation",
          "Apply SOLID principles and existing patterns consistently",
          "Use strategic decision matrix for implementation vs escalation decisions",
          "Maintain architectural consistency throughout implementation"
        ],
        "methodology": "Pattern-driven implementation with evidence-based decision making"
      },
      "approachGuidance": {
        "stepByStep": [
          "Implement core functionality following architect's strategic guidance and code examples exactly",
          "Apply SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)",
          "Use strategic decision matrix for implementation decisions: IMPLEMENT DIRECTLY vs REDELEGATE TO ARCHITECT vs ESCALATE TO BOOMERANG",
          "Maintain pattern consistency with existing codebase analysis throughout implementation",
          "Validate architectural consistency at each implementation checkpoint"
        ]
      },
      "qualityChecklist": [
        "Implementation follows architect's strategic guidance and code examples exactly",
        "SOLID principles compliance maintained throughout all code components",
        "Strategic decision matrix applied correctly for complex implementation decisions",
        "Pattern consistency maintained with existing architectural analysis",
        "Architectural consistency validated at implementation checkpoints"
      ],
      "conditions": [
        {
          "name": "context_consumption_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "mandatory_context_consumption_and_setup"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "execute_strategic_implementation",
          "actionType": "IMPLEMENTATION",
          "actionData": {
            "implementationType": "strategic_guided_implementation",
            "implementationPrinciples": {
              "singleResponsibility": "Each class/service has one clear purpose and reason to change",
              "openClosed": "Extensible through composition and inheritance, not modification",
              "liskovSubstitution": "Derived classes substitutable for base classes without breaking functionality",
              "interfaceSegregation": "Focused interfaces with specific responsibilities and dependencies",
              "dependencyInversion": "Depend on abstractions and interfaces, not concrete implementations"
            },
            "decisionMatrix": {
              "implementDirectly": [
                "following_provided_code_examples_exactly",
                "implementing_methods_with_complete_architectural_guidance",
                "making_configuration_changes_with_clear_patterns",
                "adding_simple_functionality_following_established_examples"
              ],
              "redelegateToArchitect": [
                "multiple_implementation_approaches_possible_without_clear_guidance",
                "performance_optimization_requiring_architectural_decisions",
                "integration_patterns_not_covered_in_current_guidance",
                "service_structure_decisions_affecting_system_architecture"
              ],
              "escalateToBoomerang": [
                "acceptance_criteria_conflicts_with_implementation",
                "business_logic_unclear_or_contradictory",
                "scope_changes_discovered_during_implementation"
              ]
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "validate_implementation_checkpoints",
          "actionType": "VALIDATION",
          "actionData": {
            "validationType": "continuous_architectural_consistency",
            "checkpointValidation": {
              "patternCompliance": "{{follows_discovered_architectural_patterns_exactly}}",
              "technologyAlignment": "{{uses_established_technology_stack_conventions}}",
              "errorHandling": "{{implements_same_error_handling_patterns_discovered}}",
              "dataTransformation": "{{follows_established_conventions_from_analysis}}",
              "integrationConsistency": "{{follows_discovered_service_patterns}}",
              "architecturalConsistency": "{{validated_at_each_step}}"
            }
          },
          "sequenceOrder": 2
        }
      ],
      "triggerReport": true,
      "reportType": "strategic_implementation_execution",
      "reportTemplate": "implementation_with_decision_matrix"
    },
    {
      "name": "comprehensive_testing_and_quality_validation",
      "displayName": "Comprehensive Testing and Quality Validation",
      "description": "Implement comprehensive testing strategy and validate quality against strategic requirements",
      "sequenceNumber": 3,
      "isRequired": true,
      "estimatedTime": "40-60 minutes",
      "stepType": "VALIDATION",
      "behavioralContext": {
        "approach": "Comprehensive testing with quality validation against strategic requirements and SOLID principles",
        "principles": [
          "Achieve minimum test coverage targets from quality constraints",
          "Validate SOLID principles compliance in all code components",
          "Test all success criteria and error scenarios comprehensively",
          "Verify performance targets and security requirements"
        ],
        "methodology": "Multi-layer testing with architectural quality validation"
      },
      "approachGuidance": {
        "stepByStep": [
          "Implement unit tests with comprehensive coverage (happy path, edge cases, error scenarios)",
          "Create integration tests for service interactions and data flow validation",
          "Execute manual validation against architect's success criteria",
          "Validate SOLID principles compliance throughout codebase",
          "Verify performance targets and security requirements implementation",
          "Validate pattern adherence and architectural consistency"
        ]
      },
      "qualityChecklist": [
        "Unit tests achieve minimum coverage targets with meaningful assertions and error scenario testing",
        "Integration tests validate service interactions, data flow, and API endpoints functionality",
        "Manual validation confirms all architect's success criteria are met completely",
        "SOLID principles compliance verified for all implemented code components",
        "Performance targets achieved within established baseline requirements",
        "Security requirements implemented following verified patterns and standards"
      ],
      "conditions": [
        {
          "name": "implementation_execution_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "strategic_implementation_execution_with_decision_matrix"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "execute_comprehensive_testing",
          "actionType": "TESTING",
          "actionData": {
            "testingStrategy": {
              "unitTests": "happy_path_edge_cases_error_scenarios_with_mocks_and_meaningful_assertions",
              "integrationTests": "service_interactions_repository_layer_API_endpoints_data_flow_validation",
              "manualValidation": "success_criteria_user_workflows_error_scenarios_architect_requirements",
              "performanceTesting": "response_times_resource_usage_optimization_baseline_validation"
            },
            "coverageTargets": {
              "minimumCoverage": "{{quality_constraints_coverage_requirements}}",
              "criticalPathCoverage": "100_percent_for_core_business_logic",
              "errorScenarioCoverage": "comprehensive_error_handling_validation"
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "validate_quality_and_architecture",
          "actionType": "VALIDATION",
          "actionData": {
            "validationType": "comprehensive_quality_architecture_validation",
            "qualityGates": {
              "solidPrinciplesCompliance": "{{verified_for_all_code_components}}",
              "performanceTargets": "{{achieved_within_established_baseline}}",
              "securityRequirements": "{{implemented_following_verified_patterns}}",
              "patternAdherence": "{{maintained_with_architectural_consistency}}",
              "codeQuality": "{{follows_strategic_guidance_and_verified_standards}}",
              "testingQuality": "{{coverage_targets_met_with_meaningful_validation}}"
            }
          },
          "sequenceOrder": 2
        }
      ],
      "triggerReport": true,
      "reportType": "comprehensive_testing_and_quality",
      "reportTemplate": "testing_quality_validation_report"
    },
    {
      "name": "git_operations_and_workflow_delegation",
      "displayName": "MANDATORY: Git Operations and Workflow Delegation",
      "description": "Complete mandatory Git operations and delegate to code review with comprehensive context",
      "sequenceNumber": 4,
      "isRequired": true,
      "estimatedTime": "15-20 minutes",
      "stepType": "COMPLETION",
      "behavioralContext": {
        "approach": "MANDATORY Git operations with comprehensive delegation context and strategic implementation evidence",
        "principles": [
          "WORKFLOW STOPPER: Cannot delegate without successful Git commit operations",
          "ALWAYS verify commit success before delegation to code review",
          "ALWAYS include comprehensive strategic implementation evidence",
          "ALWAYS use task-slug for human-readable reference"
        ],
        "methodology": "Git-first completion with evidence-based delegation"
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute mandatory Git operations protocol (status check, add all changes, commit with descriptive message)",
          "Verify commit success and clean working directory state",
          "Document strategic implementation completion with comprehensive evidence",
          "Prepare delegation context with architectural guidance compliance and quality validation",
          "Execute delegation to code review with task-slug and implementation evidence",
          "Include Git context (commit hash, message, working directory status) in delegation"
        ]
      },
      "qualityChecklist": [
        "Git operations completed successfully (add, commit, verify) with clean working directory",
        "Commit message follows conventional commits standard with descriptive implementation details",
        "Strategic implementation evidence documented with architectural guidance compliance",
        "Delegation context includes comprehensive quality validation and testing results",
        "Task-slug included for human-readable reference and tracking",
        "Git context (commit hash, message, status) included in delegation for code review"
      ],
      "conditions": [
        {
          "name": "testing_and_quality_validated",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "comprehensive_testing_and_quality_validation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "execute_mandatory_git_operations",
          "actionType": "GIT_OPERATIONS",
          "actionData": {
            "gitProtocol": {
              "checkStatus": "git_status_verify_working_directory_state",
              "addChanges": "git_add_all_implementation_changes",
              "commitChanges": "git_commit_with_conventional_commits_descriptive_message",
              "verifyCommit": "git_log_verify_commit_success_and_clean_state"
            },
            "commitMessageStandards": {
              "feat": "New feature implementation following architectural guidance",
              "fix": "Bug fixes and corrections following existing patterns",
              "refactor": "Code improvements maintaining architectural consistency",
              "test": "Test additions following comprehensive testing strategy",
              "docs": "Documentation updates reflecting implementation changes"
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "document_strategic_implementation_evidence",
          "actionType": "DOCUMENTATION",
          "actionData": {
            "documentationType": "strategic_implementation_completion_evidence",
            "evidenceCategories": {
              "architecturalGuidanceImplementation": "{{root_cause_solved_pattern_compliance_elegant_implementation}}",
              "implementationSpecificsCompleted": "{{files_modified_methods_implemented_pattern_references_followed}}",
              "technologyStackCompliance": "{{technology_alignment_project_structure_integration_performance}}",
              "qualityConstraintsSatisfied": "{{pattern_compliance_performance_targets_quality_gates_anti_pattern_avoidance}}",
              "gitOperationsCompleted": "{{changes_committed_verified_working_directory_clean}}"
            }
          },
          "sequenceOrder": 2
        },
        {
          "name": "delegate_to_code_review",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "WorkflowOperations",
            "operation": "delegate",
            "parameters": {
              "taskSlug": "{{task_slug}}",
              "fromRole": "senior-developer",
              "toRole": "code-review",
              "message": "Strategic implementation completed for task [{{task_slug}}] following comprehensive architectural guidance and discovered project patterns. All changes committed (commit: {{commit_hash}}) and ready for validation.",
              "strategicImplementationContext": {
                "architecturalGuidanceFollowed": true,
                "patternConsistencyMaintained": true,
                "technicalDebtEliminated": true,
                "elegantSolutionDelivered": true,
                "qualityGatesValidated": true,
                "solidPrinciplesCompliant": true,
                "gitOperationsCompleted": true
              },
              "implementationEvidence": {
                "rootCauseSolved": "{{problem_solved_following_architectural_guidance}}",
                "patternEnhancement": "{{implementation_enhanced_following_discovered_patterns}}",
                "architecturalCompliance": "{{implementation_follows_discovered_patterns_exactly}}",
                "qualityAssurance": "{{comprehensive_validation_against_strategic_requirements}}",
                "technologyCompliance": "{{technology_stack_conventions_respected_throughout}}"
              },
              "gitContext": {
                "commitHash": "{{commit_hash}}",
                "commitMessage": "{{commit_message}}",
                "workingDirectoryStatus": "clean",
                "changesCommitted": true
              }
            }
          },
          "sequenceOrder": 3
        }
      ],
      "triggerReport": true,
      "reportType": "strategic_implementation_completion_and_delegation",
      "reportTemplate": "git_operations_and_code_review_delegation"
    }
  ]
}
