{
  "workflowSteps": [
    {
      "name": "context_gathering",
      "description": "Gather comprehensive task context and determine transition source (architect vs product-manager).",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Retrieve and analyze task context to understand requirements and transition source.",
      "approachGuidance": {
        "stepByStep": [
          "üîç CONTEXT ACQUISITION:",
          "Review message history for task context and determine transition source (architect vs product-manager)",
          "If context insufficient, execute TaskOperations.get MCP operation:",
          "  - serviceName: 'TaskOperations', operation: 'get'",
          "  - Parameters: includeDescription: true, includeAnalysis: true, includeResearch: true, includeSubtasks: true",
          "üèóÔ∏è IMPLEMENTATION CONTEXT ANALYSIS:",
          "Analyze complete task context: business requirements, technical specifications, acceptance criteria",
          "Identify technology stack, frameworks, architectural patterns, and existing codebase structure",
          "Review research findings and recommendations impacting implementation decisions"
        ]
      },
      "qualityChecklist": [
        "‚úÖ Task context comprehensively understood",
        "‚úÖ Transition source identified (architect vs product-manager)",
        "‚úÖ Technology stack and codebase structure analyzed",
        "‚úÖ Business requirements and acceptance criteria clear"
      ]
    },
    {
      "name": "implementation_planning",
      "description": "Determine implementation approach and prepare execution strategy based on available guidance.",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Analyze available guidance and formulate appropriate implementation strategy.",
      "approachGuidance": {
        "stepByStep": [
          "üìã WORKFLOW PATH DETERMINATION:",
          "Determine implementation approach based on transition source:",
          "  - FROM ARCHITECT: Review architect's strategic guidance and subtask breakdown",
          "    ‚Ä¢ Evaluate subtasks for implementation readiness and identify any gaps",
          "    ‚Ä¢ Understand subtask dependencies and establish implementation order",
          "  - FROM PRODUCT-MANAGER (Direct): Prepare for direct implementation",
          "    ‚Ä¢ Analyze task complexity assessment and implementation guidance",
          "    ‚Ä¢ Identify existing patterns and frameworks to follow",
          "    ‚Ä¢ Plan implementation approach based on product manager's analysis",
          "üõ†Ô∏è ENVIRONMENT AND STANDARDS PREPARATION:",
          "Verify development environment configuration and required dependencies",
          "Review established code quality standards, testing requirements, and security considerations",
          "Formulate implementation strategy appropriate to workflow path (subtask-based or direct)"
        ]
      },
      "qualityChecklist": [
        "‚úÖ Workflow path determined (architect-guided vs direct implementation)",
        "‚úÖ Implementation approach formulated appropriate to available guidance",
        "‚úÖ Development environment verified and quality standards reviewed",
        "‚úÖ Implementation strategy established with clear execution approach"
      ],
      "conditions": [
        {
          "name": "context_gathered",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "context_gathering"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "implementation_path_setup",
      "description": "Initialize implementation path by checking for subtasks and setting up execution approach.",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Determine specific implementation path and initialize execution environment.",
      "approachGuidance": {
        "stepByStep": [
          "üîç IMPLEMENTATION PATH DETERMINATION:",
          "Check if subtasks exist by attempting to get next subtask:",
          "Execute mcp_anubis_individual_subtask_operations with operation: 'get_next_subtask'",
          "Parameters: { taskId: [task-id] }",
          "üìã PATH SETUP:",
          "If subtasks exist: Prepare for subtask-based implementation",
          "  ‚Ä¢ Document subtask execution approach",
          "  ‚Ä¢ Prepare for iterative subtask loop",
          "If no subtasks: Prepare for direct implementation",
          "  ‚Ä¢ Break down acceptance criteria into implementation steps",
          "  ‚Ä¢ Identify files to modify/create based on analysis",
          "üõ†Ô∏è EXECUTION ENVIRONMENT SETUP:",
          "Set up implementation tracking and progress monitoring",
          "Prepare testing environment and validation framework"
        ]
      },
      "qualityChecklist": [
        "‚úÖ Implementation path determined (subtask-based vs direct)",
        "‚úÖ Execution approach documented and prepared",
        "‚úÖ Implementation environment set up for chosen path",
        "‚úÖ Progress tracking and validation framework ready"
      ],
      "conditions": [
        {
          "name": "planning_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "implementation_planning"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "execute_implementation",
      "description": "Execute core implementation using either subtask-based approach or direct implementation.",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute implementation following the established path - subtask execution loop or direct implementation.",
      "approachGuidance": {
        "stepByStep": [
          "üîÑ PATH A: SUBTASK-BASED IMPLEMENTATION (If subtasks exist):",
          "**SUBTASK EXECUTION LOOP (Repeat until all subtasks completed):**",
          "**1. GET NEXT SUBTASK:**",
          "Execute mcp_anubis_individual_subtask_operations with operation: 'get_next_subtask'",
          "If NO subtasks returned ‚Üí ALL COMPLETED, proceed to next step",
          "If subtask returned ‚Üí continue with implementation",
          "**2. UPDATE STATUS TO IN-PROGRESS:**",
          "Execute mcp_anubis_individual_subtask_operations with operation: 'update_subtask'",
          "Parameters: { taskId: [task-id], subtaskId: [subtask-id], status: 'in-progress' }",
          "**3. IMPLEMENT SUBTASK:**",
          "Follow architect's exact implementation approach and provided code examples",
          "Implement error handling, maintain type safety, add logging as specified",
          "**4. TEST AND COMPLETE:**",
          "Execute tests, update subtask status to 'completed', create atomic commit",
          "**5. RETURN TO STEP 1** - Continue loop until get_next_subtask returns empty",
          "üöÄ PATH B: DIRECT IMPLEMENTATION (If no subtasks exist):",
          "**DIRECT IMPLEMENTATION APPROACH:**",
          "**1. IMPLEMENT INCREMENTALLY:**",
          "Implement solution following existing patterns identified in codebase analysis",
          "Use research findings and technical recommendations from product manager",
          "Follow established code quality standards and architectural patterns",
          "**2. TEST CONTINUOUSLY:**",
          "Execute unit tests for new functions, integration tests for system interactions",
          "Perform manual validation and regression testing",
          "**3. COMMIT INCREMENTALLY:**",
          "Create logical commits for each major implementation milestone",
          "Use descriptive commit messages: 'feat: [feature-name] - [description]'",
          "üõ†Ô∏è COMMON ERROR HANDLING (Both Paths):",
          "If implementation fails: Document issue and adjust approach",
          "If MCP operations fail: Retry once, then document error and proceed",
          "If testing reveals critical issues: Fix before proceeding"
        ]
      },
      "qualityChecklist": [
        "‚úÖ If subtasks exist: ALL subtasks completed with proper status management",
        "‚úÖ If direct implementation: Solution implemented following existing patterns",
        "‚úÖ Implementation follows available guidance (architect or product manager)",
        "‚úÖ Comprehensive testing performed throughout implementation",
        "‚úÖ Code quality maintained with proper error handling and type safety",
        "‚úÖ Appropriate commits created with descriptive messages",
        "‚úÖ All acceptance criteria addressed in implementation"
      ],
      "conditions": [
        {
          "name": "path_setup_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "implementation_path_setup"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "validate_implementation",
      "description": "Perform comprehensive validation of complete implementation including testing, quality assurance, and code review preparation.",
      "sequenceNumber": 5,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Rigorous validation of entire implementation to ensure production readiness.",
      "approachGuidance": {
        "stepByStep": [
          "üîç PRE-VALIDATION VERIFICATION:",
          "Execute mcp_anubis_individual_subtask_operations with operation: 'get_next_subtask'",
          "VERIFY that NO subtasks are returned (all completed)",
          "If ANY subtasks remain: STOP and return error - validation cannot proceed",
          "üß™ COMPREHENSIVE TESTING:",
          "Execute complete test suite: unit, integration, end-to-end tests",
          "Run performance tests and security validation",
          "Achieve >90% test coverage and ensure all tests pass",
          "üìã ACCEPTANCE CRITERIA VALIDATION:",
          "Create checklist of all acceptance criteria from task and subtasks",
          "Test each criterion individually with documented evidence",
          "Ensure business requirements satisfied from user perspective",
          "üèóÔ∏è QUALITY ASSURANCE:",
          "Verify architectural compliance and SOLID principles adherence",
          "Run static code analysis tools (ESLint, TypeScript validation)",
          "Check error handling, edge cases, and security measures",
          "Validate performance benchmarks and no regressions introduced",
          "üìù CODE REVIEW PREPARATION:",
          "Compile test results, coverage reports, and validation evidence",
          "Document implementation approach, decisions, and any deviations",
          "Prepare comprehensive evidence package for code review"
        ]
      },
      "qualityChecklist": [
        "‚úÖ ALL subtasks verified completed (get_next_subtask returns empty)",
        "‚úÖ Complete test suite execution with >90% coverage achieved",
        "‚úÖ All acceptance criteria validated with documented evidence",
        "‚úÖ Architectural compliance and code quality standards met",
        "‚úÖ Security measures validated and performance benchmarks achieved",
        "‚úÖ No regressions introduced and error handling comprehensive",
        "‚úÖ Evidence package prepared for code review with complete documentation"
      ],
      "conditions": [
        {
          "name": "implementation_executed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "execute_implementation"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "role_transition",
      "description": "Transition to code review role with implementation evidence",
      "sequenceNumber": 6,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to code review with comprehensive implementation evidence",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'senior-developer'",
          "Extract transitionId for senior developer to code review transition",
          "Execute execute_transition with implementation evidence in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for code review transition",
        "execute_transition executed with implementation evidence",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "implementation_validated",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "validate_implementation"
            }
          },
          "isRequired": true
        }
      ]
    }
  ]
}