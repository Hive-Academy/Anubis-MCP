{
  "workflowSteps": [
    {
      "name": "mandatory_context_consumption_and_setup",
      "displayName": "MANDATORY: Context Consumption and Implementation Setup",
      "description": "Consume existing strategic context and setup implementation environment without re-analysis",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "10-15 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "MANDATORY use mcp operations to get comprehensive task context including codebase analysis, task description, implementation plan, and all subtasks",
        "principles": [
          "WORKFLOW STOPPER: Cannot proceed without consuming existing codebaseAnalysis",
          "NEVER re-investigate comprehensive analysis boomerang already completed",
          "ALWAYS consume architect's strategic guidance completely",
          "ALWAYS retrieve complete implementation plan with all subtasks",
          "ALWAYS build upon previous discoveries rather than starting from scratch"
        ],
        "methodology": "Context consumption with implementation environment preparation and subtask tracking setup",
        "contextConsumption": {
          "codebaseAnalysis": "Extract and validate existing codebaseAnalysis from boomerang (technology stack, patterns, integration points)",
          "strategicGuidance": "Consume architect's strategic guidance (implementation specifics, code examples, quality constraints)",
          "implementationPlan": "Retrieve complete implementation plan with all subtasks and batches",
          "subtaskTracking": "Setup subtask completion tracking for progress monitoring",
          "environmentSetup": "Setup development environment following verified technology stack and patterns",
          "readinessValidation": "Validate implementation readiness without redundant discovery"
        },
        "validationCriteria": {
          "codebaseAnalysisAvailable": "Technology stack, patterns, and integration points from boomerang",
          "strategicGuidanceAvailable": "Implementation specifics, code examples, and quality constraints from architect",
          "implementationPlanAvailable": "Complete plan with all subtasks and strategic guidance",
          "subtaskTrackingReady": "All subtasks identified and ready for completion tracking",
          "implementationReadiness": "No redundant analysis required, existing context comprehensive",
          "contextConsumptionComplete": "Ready to proceed following established patterns"
        },
        "environmentSetup": {
          "gitBranchVerification": "Verify git branch matches task requirements",
          "dependencyInstallation": "Install dependencies using confirmed technology stack",
          "developmentServerValidation": "Validate development server and test functionality",
          "projectStructureConfirmation": "Confirm project structure matches verified analysis"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Execute TaskOperations.get with comprehensive inclusion (plans, subtasks, analysis)",
          "Execute PlanningOperations.get_plan with includeBatches: true to get all subtasks",
          "Extract and validate existing codebaseAnalysis from boomerang (technology stack, patterns, integration points)",
          "Consume architect's strategic guidance (implementation specifics, code examples, quality constraints)",
          "Setup subtask completion tracking for all identified subtasks",
          "Setup development environment following verified technology stack and patterns",
          "Validate implementation readiness without redundant discovery"
        ],
        "contextExtractionSteps": [
          "Call TaskOperations.get with comprehensive parameters to retrieve all context",
          "Call PlanningOperations.get_plan with includeBatches: true to get complete implementation plan",
          "Parse codebaseAnalysis for technology stack, architecture patterns, and integration points",
          "Extract architect's strategic guidance including implementation specifics and code examples",
          "Identify all subtasks that need to be completed before code review delegation",
          "Validate that all necessary context is available for implementation"
        ],
        "environmentSetupSteps": [
          "Verify git branch matches task requirements and is clean",
          "Install dependencies using confirmed technology stack from analysis",
          "Validate development server functionality and test environment",
          "Confirm project structure matches verified analysis patterns"
        ],
        "readinessValidationSteps": [
          "Confirm codebase analysis provides sufficient implementation context",
          "Verify strategic guidance includes specific implementation details",
          "Validate all subtasks are identified and trackable",
          "Validate environment is properly configured for implementation",
          "Ensure no redundant analysis is required to proceed"
        ]
      },
      "qualityChecklist": [
        "Complete task context retrieved including comprehensive analysis and strategic guidance",
        "Complete implementation plan retrieved with all subtasks and batches",
        "Existing codebaseAnalysis consumed (technology stack, architecture, implementation context)",
        "Architect's strategic guidance applied (implementation specifics, code examples, patterns)",
        "All subtasks identified and ready for completion tracking",
        "Development environment configured using verified technology stack",
        "Implementation readiness validated without redundant analysis"
      ],
      "conditions": [],
      "actions": [
        {
          "name": "acquire_comprehensive_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "get"
          },
          "sequenceOrder": 1
        },
        {
          "name": "acquire_implementation_context",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "get_plan",
            "parameters": {
              "includeBatches": true
            }
          },
          "sequenceOrder": 2
        }
      ],
      "triggerReport": true,
      "reportType": "context_consumption_and_setup",
      "reportTemplate": "mandatory_context_consumption_validation"
    },
    {
      "name": "strategic_implementation_execution_with_decision_matrix",
      "displayName": "Strategic Implementation Execution with Decision Matrix and Subtask Tracking",
      "description": "Execute implementation following architectural guidance with strategic decision matrix and subtask completion tracking",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "60-120 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Strategic implementation following architectural guidance with decision matrix for escalation and mandatory subtask completion tracking",
        "principles": [
          "Follow architect's code examples exactly for implementation",
          "Apply SOLID principles and existing patterns consistently",
          "Use strategic decision matrix for implementation vs escalation decisions",
          "MANDATORY: Update subtask status as each subtask is completed",
          "MANDATORY: Complete ALL subtasks before proceeding to code review",
          "Maintain architectural consistency throughout implementation"
        ],
        "methodology": "Pattern-driven implementation with evidence-based decision making and comprehensive subtask tracking",
        "subtaskTracking": {
          "statusUpdates": "Update each subtask status to 'in-progress' when starting, 'completed' when finished",
          "completionEvidence": "Document implementation evidence for each completed subtask",
          "progressValidation": "Validate all subtasks are completed before delegation to code review",
          "batchCompletion": "Track batch completion automatically when all subtasks in batch are done"
        },
        "solidPrinciples": {
          "singleResponsibility": "Each class/service has one clear purpose and reason to change",
          "openClosed": "Extensible through composition and inheritance, not modification",
          "liskovSubstitution": "Derived classes substitutable for base classes without breaking functionality",
          "interfaceSegregation": "Focused interfaces with specific responsibilities and dependencies",
          "dependencyInversion": "Depend on abstractions and interfaces, not concrete implementations"
        },
        "decisionMatrix": {
          "implementDirectly": [
            "following_provided_code_examples_exactly",
            "implementing_methods_with_complete_architectural_guidance",
            "making_configuration_changes_with_clear_patterns",
            "adding_simple_functionality_following_established_examples"
          ],
          "redelegateToArchitect": [
            "multiple_implementation_approaches_possible_without_clear_guidance",
            "performance_optimization_requiring_architectural_decisions",
            "integration_patterns_not_covered_in_current_guidance",
            "service_structure_decisions_affecting_system_architecture"
          ],
          "escalateToBoomerang": [
            "acceptance_criteria_conflicts_with_implementation",
            "business_logic_unclear_or_contradictory",
            "scope_changes_discovered_during_implementation"
          ]
        },
        "validationCheckpoints": {
          "patternCompliance": "Follows discovered architectural patterns exactly",
          "technologyAlignment": "Uses established technology stack conventions",
          "errorHandling": "Implements same error handling patterns discovered",
          "dataTransformation": "Follows established conventions from analysis",
          "integrationConsistency": "Follows discovered service patterns",
          "architecturalConsistency": "Validated at each implementation step",
          "subtaskCompletion": "All subtasks completed and tracked before code review"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "For each subtask: Update status to 'in-progress' using SubtaskOperations.update_subtask",
          "Implement core functionality following architect's strategic guidance and code examples exactly",
          "Apply SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion)",
          "Use strategic decision matrix for implementation decisions: IMPLEMENT DIRECTLY vs REDELEGATE TO ARCHITECT vs ESCALATE TO BOOMERANG",
          "For each completed subtask: Update status to 'completed' with completion evidence using SubtaskOperations.update_subtask",
          "Maintain pattern consistency with existing codebase analysis throughout implementation",
          "Validate architectural consistency at each implementation checkpoint",
          "MANDATORY: Ensure ALL subtasks are completed before proceeding to code review"
        ],
        "subtaskTrackingSteps": [
          "Before starting each subtask: Call SubtaskOperations.update_subtask with status 'in-progress'",
          "During implementation: Follow subtask's strategic guidance and quality constraints",
          "After completing each subtask: Call SubtaskOperations.update_subtask with status 'completed' and completion evidence",
          "Validate all subtasks in all batches are completed before delegation"
        ],
        "implementationSteps": [
          "Follow architect's code examples exactly for core functionality implementation",
          "Apply SOLID principles consistently across all code components",
          "Use established patterns from codebase analysis for consistency",
          "Implement error handling following discovered patterns"
        ],
        "decisionSteps": [
          "Apply decision matrix for complex implementation decisions",
          "Implement directly when following provided examples and clear guidance",
          "Redelegate to architect for architectural decisions not covered in guidance",
          "Escalate to boomerang for business logic conflicts or scope changes"
        ],
        "validationSteps": [
          "Validate pattern compliance at each implementation checkpoint",
          "Ensure technology alignment with established stack conventions",
          "Verify error handling follows discovered patterns",
          "Confirm architectural consistency throughout implementation",
          "Validate ALL subtasks are completed with proper evidence"
        ]
      },
      "qualityChecklist": [
        "Implementation follows architect's strategic guidance and code examples exactly",
        "SOLID principles compliance maintained throughout all code components",
        "Strategic decision matrix applied correctly for complex implementation decisions",
        "ALL subtasks updated to 'completed' status with proper completion evidence",
        "Pattern consistency maintained with existing architectural analysis",
        "Architectural consistency validated at implementation checkpoints",
        "MANDATORY: All subtasks in all batches completed before proceeding"
      ],
      "conditions": [
        {
          "name": "context_consumption_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "mandatory_context_consumption_and_setup"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "strategic_implementation_execution",
      "reportTemplate": "implementation_with_decision_matrix_and_subtask_tracking"
    },
    {
      "name": "comprehensive_testing_and_quality_validation",
      "displayName": "Comprehensive Testing and Quality Validation",
      "description": "Implement comprehensive testing strategy and validate quality against strategic requirements",
      "sequenceNumber": 3,
      "isRequired": true,
      "estimatedTime": "40-60 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Comprehensive testing with quality validation against strategic requirements and SOLID principles",
        "principles": [
          "Achieve minimum test coverage targets from quality constraints",
          "Validate SOLID principles compliance in all code components",
          "Test all success criteria and error scenarios comprehensively",
          "Verify performance targets and security requirements"
        ],
        "methodology": "Multi-layer testing with architectural quality validation",
        "testingStrategy": {
          "unitTests": "Happy path, edge cases, error scenarios with mocks and meaningful assertions",
          "integrationTests": "Service interactions, repository layer, API endpoints, data flow validation",
          "manualValidation": "Success criteria, user workflows, error scenarios, architect requirements",
          "performanceTesting": "Response times, resource usage, optimization, baseline validation"
        },
        "coverageTargets": {
          "minimumCoverage": "Quality constraints coverage requirements",
          "criticalPathCoverage": "100 percent for core business logic",
          "errorScenarioCoverage": "Comprehensive error handling validation"
        },
        "qualityGates": {
          "solidPrinciplesCompliance": "Verified for all code components",
          "performanceTargets": "Achieved within established baseline",
          "securityRequirements": "Implemented following verified patterns",
          "patternAdherence": "Maintained with architectural consistency",
          "codeQuality": "Follows strategic guidance and verified standards",
          "testingQuality": "Coverage targets met with meaningful validation"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Implement unit tests with comprehensive coverage (happy path, edge cases, error scenarios)",
          "Create integration tests for service interactions and data flow validation",
          "Execute manual validation against architect's success criteria",
          "Validate SOLID principles compliance throughout codebase",
          "Verify performance targets and security requirements implementation",
          "Validate pattern adherence and architectural consistency"
        ],
        "testingSteps": [
          "Implement unit tests covering happy path, edge cases, and error scenarios",
          "Create integration tests for service interactions and API endpoints",
          "Execute manual validation against all architect's success criteria",
          "Perform performance testing to validate response times and resource usage"
        ],
        "validationSteps": [
          "Validate SOLID principles compliance for all implemented code components",
          "Verify performance targets are achieved within established baseline",
          "Confirm security requirements are implemented following verified patterns",
          "Validate pattern adherence and architectural consistency throughout"
        ],
        "qualitySteps": [
          "Ensure minimum coverage targets are met with meaningful assertions",
          "Validate critical path coverage is 100% for core business logic",
          "Confirm comprehensive error scenario coverage and handling",
          "Verify all quality gates are satisfied before completion"
        ]
      },
      "qualityChecklist": [
        "Unit tests achieve minimum coverage targets with meaningful assertions and error scenario testing",
        "Integration tests validate service interactions, data flow, and API endpoints functionality",
        "Manual validation confirms all architect's success criteria are met completely",
        "SOLID principles compliance verified for all implemented code components",
        "Performance targets achieved within established baseline requirements",
        "Security requirements implemented following verified patterns and standards"
      ],
      "conditions": [
        {
          "name": "implementation_execution_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "strategic_implementation_execution_with_decision_matrix"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "comprehensive_testing_and_quality",
      "reportTemplate": "testing_quality_validation_report"
    },
    {
      "name": "subtask_completion_validation_and_git_operations",
      "displayName": "MANDATORY: Subtask Completion Validation and Git Operations",
      "description": "Validate ALL subtasks are completed, perform Git operations, and delegate to code review with comprehensive context",
      "sequenceNumber": 4,
      "isRequired": true,
      "estimatedTime": "15-20 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "MANDATORY subtask completion validation, Git operations with comprehensive delegation context and strategic implementation evidence",
        "principles": [
          "WORKFLOW STOPPER: Cannot delegate without ALL subtasks completed",
          "WORKFLOW STOPPER: Cannot delegate without successful Git commit operations",
          "ALWAYS verify all subtasks in all batches are completed before delegation",
          "ALWAYS verify commit success before delegation to code review",
          "ALWAYS include comprehensive strategic implementation evidence",
          "ALWAYS use task-slug for human-readable reference"
        ],
        "methodology": "Subtask validation first, then Git-first completion with evidence-based delegation",
        "subtaskValidation": {
          "completionCheck": "Verify ALL subtasks across ALL batches are marked as 'completed'",
          "evidenceValidation": "Ensure each completed subtask has proper completion evidence",
          "batchValidation": "Confirm all batches are fully completed",
          "blockingValidation": "STOP workflow if any subtask is not completed"
        },
        "gitProtocol": {
          "checkStatus": "git status to verify working directory state",
          "addChanges": "git add all implementation changes",
          "commitChanges": "git commit with conventional commits descriptive message",
          "verifyCommit": "git log to verify commit success and clean state"
        },
        "commitMessageStandards": {
          "feat": "New feature implementation following architectural guidance",
          "fix": "Bug fixes and corrections following existing patterns",
          "refactor": "Code improvements maintaining architectural consistency",
          "test": "Test additions following comprehensive testing strategy",
          "docs": "Documentation updates reflecting implementation changes"
        },
        "evidenceCategories": {
          "subtaskCompletionEvidence": "All subtasks completed with proper evidence and tracking",
          "architecturalGuidanceImplementation": "Root cause solved, pattern compliance, elegant implementation",
          "implementationSpecificsCompleted": "Files modified, methods implemented, pattern references followed",
          "technologyStackCompliance": "Technology alignment, project structure, integration, performance",
          "qualityConstraintsSatisfied": "Pattern compliance, performance targets, quality gates, anti-pattern avoidance",
          "gitOperationsCompleted": "Changes committed, verified, working directory clean"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "MANDATORY: Validate ALL subtasks across ALL batches are completed using PlanningOperations.get_plan",
          "MANDATORY: Block workflow if any subtask is not completed - cannot proceed to code review",
          "Execute mandatory Git operations protocol (status check, add all changes, commit with descriptive message)",
          "Verify commit success and clean working directory state",
          "Document strategic implementation completion with comprehensive evidence including subtask completion",
          "Prepare delegation context with architectural guidance compliance and quality validation",
          "Execute delegation to code review with task-slug and implementation evidence",
          "Include Git context (commit hash, message, working directory status) in delegation"
        ],
        "subtaskValidationSteps": [
          "Call PlanningOperations.get_plan with includeBatches: true to get all subtasks",
          "Verify every subtask in every batch has status 'completed'",
          "Check that each completed subtask has proper completion evidence",
          "STOP and report error if any subtask is not completed - cannot proceed",
          "Document subtask completion summary for delegation evidence"
        ],
        "gitOperationSteps": [
          "Check git status to verify working directory state",
          "Add all implementation changes using git add",
          "Commit changes with conventional commits descriptive message",
          "Verify commit success and clean working directory state"
        ],
        "evidenceDocumentationSteps": [
          "Document subtask completion evidence with all subtasks completed",
          "Document architectural guidance implementation with root cause solved",
          "Record implementation specifics completed with files and methods",
          "Validate technology stack compliance and integration",
          "Confirm quality constraints satisfied and anti-patterns avoided"
        ],
        "delegationSteps": [
          "Prepare comprehensive delegation context with implementation evidence",
          "Execute WorkflowOperations.delegate to code review with task-slug",
          "Include strategic implementation context and evidence",
          "Include subtask completion summary and evidence",
          "Provide git context with commit hash, message, and status"
        ]
      },
      "qualityChecklist": [
        "MANDATORY: ALL subtasks across ALL batches verified as completed with proper evidence",
        "Git operations completed successfully (add, commit, verify) with clean working directory",
        "Commit message follows conventional commits standard with descriptive implementation details",
        "Strategic implementation evidence documented with architectural guidance compliance",
        "Subtask completion evidence documented with comprehensive tracking summary",
        "Delegation context includes comprehensive quality validation and testing results",
        "Task-slug included for human-readable reference and tracking",
        "Git context (commit hash, message, status) included in delegation for code review"
      ],
      "conditions": [
        {
          "name": "testing_and_quality_validated",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "comprehensive_testing_and_quality_validation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "validate_all_subtasks_completed",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "PlanningOperations",
            "operation": "get_plan",
            "parameters": {
              "includeBatches": true
            }
          },
          "sequenceOrder": 1
        },
        {
          "name": "delegate_to_code_review",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "WorkflowOperations",
            "operation": "delegate"
          },
          "sequenceOrder": 2
        }
      ],
      "triggerReport": true,
      "reportType": "subtask_validation_and_delegation",
      "reportTemplate": "subtask_completion_git_operations_and_code_review_delegation"
    }
  ]
}
