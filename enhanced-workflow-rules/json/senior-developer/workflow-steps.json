{
  "workflowSteps": [
    {
      "name": "context_gathering_and_analysis",
      "description": "Gather comprehensive implementation context including task details, architect's strategic guidance, and subtask specifications for execution readiness.",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligently retrieve and analyze all implementation context to establish a solid foundation for high-quality code execution.",
      "approachGuidance": {
        "stepByStep": [
          "üîç CONTEXT ACQUISITION PHASE:",
          "Review message history to identify task context and architect's strategic guidance provided in previous roles.",
          "If context is insufficient or missing critical details, execute TaskOperations.get MCP operation:",
          "  - Use serviceName: 'TaskOperations', operation: 'get'",
          "  - Include parameters: includeDescription: true, includeAnalysis: true, includeResearch: true, includeSubtasks: true",
          "  - Only execute if context is missing from message history",
          "  - Ensure comprehensive task understanding before proceeding",
          "üèóÔ∏è IMPLEMENTATION CONTEXT ANALYSIS:",
          "Analyze the complete task context including business requirements, technical specifications, and acceptance criteria.",
          "Review architect's strategic guidance and subtask breakdown to understand the implementation approach.",
          "Identify the technology stack, frameworks, and architectural patterns to be used.",
          "Understand the existing codebase structure, conventions, and integration points.",
          "Review any research findings and recommendations that impact implementation decisions.",
          "üìã SUBTASK PREPARATION ASSESSMENT:",
          "Evaluate the quality and completeness of architect's subtasks for implementation readiness.",
          "Identify any gaps or ambiguities in subtask specifications that need clarification.",
          "Understand the dependencies between subtasks and establish implementation order.",
          "Assess the testing strategy and validation requirements for each subtask.",
          "üîß IMPLEMENTATION ENVIRONMENT SETUP:",
          "Verify development environment is properly configured for the task requirements.",
          "Ensure all necessary dependencies, tools, and frameworks are available.",
          "Confirm access to required APIs, databases, and external services.",
          "Validate that local development environment matches deployment requirements.",
          "üìä QUALITY STANDARDS REVIEW:",
          "Review established code quality standards, patterns, and conventions.",
          "Understand the testing requirements (unit, integration, e2e) for this implementation.",
          "Identify performance benchmarks and optimization requirements.",
          "Review security considerations and compliance requirements.",
          "Synthesize all gathered information to form a complete implementation strategy."
        ]
      },
      "qualityChecklist": [
        "‚úÖ MESSAGE HISTORY COMPREHENSIVELY REVIEWED: All previous context from boomerang and architect roles analyzed",
        "‚úÖ TASK CONTEXT COMPLETELY UNDERSTOOD: Business requirements, technical specifications, and acceptance criteria clear",
        "‚úÖ ARCHITECT'S STRATEGIC GUIDANCE ANALYZED: Implementation approach, patterns, and architectural decisions understood",
        "‚úÖ SUBTASK SPECIFICATIONS REVIEWED: All subtasks examined for completeness and implementation readiness",
        "‚úÖ TECHNOLOGY STACK IDENTIFIED: Frameworks, libraries, and tools required for implementation confirmed",
        "‚úÖ CODEBASE STRUCTURE ANALYZED: Existing patterns, conventions, and integration points understood",
        "‚úÖ RESEARCH FINDINGS INTEGRATED: Any research recommendations incorporated into implementation strategy",
        "‚úÖ DEPENDENCIES MAPPED: Inter-subtask dependencies and implementation order established",
        "‚úÖ TESTING STRATEGY UNDERSTOOD: Unit, integration, and acceptance testing requirements clarified",
        "‚úÖ DEVELOPMENT ENVIRONMENT VERIFIED: All necessary tools, dependencies, and access confirmed",
        "‚úÖ QUALITY STANDARDS REVIEWED: Code quality, performance, and security requirements understood",
        "‚úÖ IMPLEMENTATION STRATEGY FORMULATED: Complete approach for executing all subtasks established"
      ],
      "conditions": []
    },
    {
      "name": "implement_subtasks",
      "description": "Execute subtasks iteratively with comprehensive testing, validation, and atomic commits following architect's specifications.",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Systematic subtask execution with rigorous testing, validation, and incremental commits ensuring high-quality implementation.",
      "approachGuidance": {
        "stepByStep": [
          "üîÑ SUBTASK EXECUTION LOOP - Repeat until all subtasks completed:",
          "1. RETRIEVE NEXT SUBTASK:",
          "   - Execute SubtaskOperations.get_next_subtask MCP operation",
          "   - Use serviceName: 'SubtaskOperations', operation: 'get_next_subtask'",
          "   - Retrieve the highest-priority available subtask based on dependencies",
          "   - If no subtasks available, proceed to validation phase",
          "2. UPDATE SUBTASK STATUS TO IN-PROGRESS:",
          "   - Execute SubtaskOperations.update_subtask MCP operation",
          "   - Use serviceName: 'SubtaskOperations', operation: 'update_subtask'",
          "   - Set status to 'in-progress' with timestamp and implementation details",
          "   - Document start time and estimated completion for tracking",
          "3. ANALYZE SUBTASK SPECIFICATIONS:",
          "   - Review subtask's business context and technical requirements",
          "   - Study architect's implementation approach and code examples",
          "   - Understand integration points with existing codebase",
          "   - Identify potential risks and mitigation strategies",
          "4. IMPLEMENT FOLLOWING ARCHITECT'S GUIDANCE:",
          "   - Follow the exact implementation approach specified by architect",
          "   - Use provided code examples as templates and extend as needed",
          "   - Implement error handling strategies specified in subtask",
          "   - Follow established codebase patterns and conventions",
          "   - Ensure proper type safety and input validation",
          "   - Add comprehensive logging and monitoring points",
          "5. COMPREHENSIVE TESTING EXECUTION:",
          "   - UNIT TESTING: Write and execute unit tests for new functions/methods",
          "   - INTEGRATION TESTING: Test interactions with existing systems",
          "   - MANUAL TESTING: Perform manual validation of user-facing features",
          "   - PERFORMANCE TESTING: Validate performance meets requirements",
          "   - SECURITY TESTING: Verify security measures are effective",
          "   - REGRESSION TESTING: Ensure no existing functionality is broken",
          "6. CODE QUALITY VALIDATION:",
          "   - Run linting and formatting tools to ensure code quality",
          "   - Perform code review against established patterns",
          "   - Validate TypeScript types and interfaces",
          "   - Check for potential memory leaks or performance issues",
          "   - Ensure proper error handling and edge case coverage",
          "7. ATOMIC COMMIT CREATION:",
          "   - Stage only files related to current subtask",
          "   - Create descriptive commit message linking to subtask",
          "   - Include subtask ID and brief description of changes",
          "   - Ensure commit is atomic and represents complete subtask",
          "8. UPDATE SUBTASK TO COMPLETED:",
          "   - Execute SubtaskOperations.update_subtask MCP operation",
          "   - Set status to 'completed' with comprehensive evidence",
          "   - Include: files modified, tests added, validation results",
          "   - Document any deviations from original specifications",
          "   - Provide evidence of successful testing and validation",
          "9. INTEGRATION VERIFICATION:",
          "   - Verify subtask integrates properly with existing codebase",
          "   - Run integration tests to ensure no conflicts",
          "   - Validate that dependent subtasks can still proceed",
          "   - Document any integration issues or considerations",
          "10. PROGRESS TRACKING AND COMMUNICATION:",
          "    - Update progress tracking with completion status",
          "    - Document any lessons learned or implementation insights",
          "    - Note any potential improvements or optimizations for future reference"
        ]
      },
      "qualityChecklist": [
        "‚úÖ ALL AVAILABLE SUBTASKS RETRIEVED AND COMPLETED: No remaining subtasks in pending status",
        "‚úÖ SUBTASK STATUS MANAGEMENT: Each subtask properly updated to 'in-progress' then 'completed'",
        "‚úÖ ARCHITECT'S GUIDANCE FOLLOWED: Implementation approach and code examples used as specified",
        "‚úÖ COMPREHENSIVE TESTING PERFORMED: Unit, integration, manual, performance, and security testing completed",
        "‚úÖ CODE QUALITY STANDARDS MET: Linting, formatting, type safety, and pattern compliance verified",
        "‚úÖ ERROR HANDLING IMPLEMENTED: Robust error handling for all edge cases and failure scenarios",
        "‚úÖ PERFORMANCE REQUIREMENTS MET: Implementation meets specified performance benchmarks",
        "‚úÖ SECURITY MEASURES IMPLEMENTED: Security considerations addressed and validated",
        "‚úÖ ATOMIC COMMITS CREATED: Each subtask completion results in single, descriptive commit",
        "‚úÖ INTEGRATION VERIFIED: Each subtask properly integrates with existing codebase",
        "‚úÖ REGRESSION PREVENTION: No existing functionality broken by new implementation",
        "‚úÖ DOCUMENTATION UPDATED: Code comments, README, and technical documentation updated as needed",
        "‚úÖ VALIDATION EVIDENCE COLLECTED: Comprehensive proof of testing and validation for each subtask",
        "‚úÖ DEPENDENCY MANAGEMENT: Subtask dependencies properly handled and execution order maintained",
        "‚úÖ PROGRESS TRACKING MAINTAINED: Clear record of implementation progress and any deviations"
      ],
      "conditions": [
        {
          "name": "context_setup_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "context_gathering_and_analysis"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "validate_implementation",
      "description": "Perform comprehensive validation of complete implementation including testing, quality assurance, and code review preparation.",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Rigorous validation of entire implementation to ensure production readiness and comprehensive evidence collection for code review.",
      "approachGuidance": {
        "stepByStep": [
          "üîç CRITICAL PRE-VALIDATION - SUBTASK COMPLETION VERIFICATION:",
          "MANDATORY check before any validation activities begin:",
          "  - Execute SubtaskOperations.get_next_subtask to verify NO remaining subtasks",
          "  - If ANY subtasks remain (status != 'completed'), STOP immediately",
          "  - Return to implement_subtasks step to complete remaining work",
          "  - Do NOT proceed with validation until ALL subtasks are completed",
          "  - Document any subtasks found and their current status",
          "üß™ COMPREHENSIVE TESTING SUITE EXECUTION:",
          "Execute complete test suite to ensure no regressions or failures:",
          "  - Run all unit tests with coverage reporting (target: >90% coverage)",
          "  - Execute integration tests to validate system interactions",
          "  - Perform end-to-end tests for complete user workflows",
          "  - Run performance tests to ensure benchmarks are met",
          "  - Execute security tests to validate security measures",
          "  - Validate accessibility compliance where applicable",
          "üìã ACCEPTANCE CRITERIA VALIDATION:",
          "Systematically validate all acceptance criteria are met:",
          "  - Create checklist of all acceptance criteria from task and subtasks",
          "  - Test each criterion individually with specific validation",
          "  - Document evidence of successful validation for each criterion",
          "  - Identify any criteria that are not fully met and address gaps",
          "  - Ensure business requirements are satisfied from user perspective",
          "üèóÔ∏è ARCHITECTURAL COMPLIANCE VERIFICATION:",
          "Verify implementation follows established patterns and principles:",
          "  - Check adherence to SOLID principles and design patterns",
          "  - Validate consistency with existing codebase architecture",
          "  - Ensure proper separation of concerns and modularity",
          "  - Verify dependency injection and inversion of control usage",
          "  - Check for code duplication and opportunities for refactoring",
          "üîß CODE QUALITY ASSESSMENT:",
          "Perform comprehensive code quality evaluation:",
          "  - Run static code analysis tools (ESLint, SonarQube, etc.)",
          "  - Validate TypeScript types and interfaces are properly defined",
          "  - Check for potential memory leaks and performance bottlenecks",
          "  - Ensure proper error handling and logging throughout",
          "  - Validate code documentation and comments are adequate",
          "‚ö†Ô∏è ERROR HANDLING AND EDGE CASE VALIDATION:",
          "Thoroughly test error handling and edge cases:",
          "  - Test all error paths and exception scenarios",
          "  - Validate graceful degradation for service failures",
          "  - Test input validation and sanitization",
          "  - Verify proper error messages and user feedback",
          "  - Check timeout handling and retry mechanisms",
          "üîí SECURITY VALIDATION:",
          "Perform security assessment of implementation:",
          "  - Validate input sanitization and SQL injection prevention",
          "  - Check authentication and authorization implementations",
          "  - Verify secure data transmission and storage",
          "  - Test for common security vulnerabilities (OWASP Top 10)",
          "  - Ensure proper secrets management and configuration",
          "üìä PERFORMANCE VALIDATION:",
          "Assess performance characteristics of implementation:",
          "  - Measure response times for critical operations",
          "  - Validate memory usage and resource consumption",
          "  - Test scalability under load conditions",
          "  - Identify and address performance bottlenecks",
          "  - Ensure database queries are optimized",
          "üìù EVIDENCE COLLECTION FOR CODE REVIEW:",
          "Prepare comprehensive evidence package for code review:",
          "  - Compile test results and coverage reports",
          "  - Document all validation activities and results",
          "  - Create summary of implementation approach and decisions",
          "  - Prepare list of files modified and their purposes",
          "  - Document any deviations from original specifications",
          "  - Include performance metrics and benchmarks achieved"
        ]
      },
      "qualityChecklist": [
        "‚úÖ CRITICAL: ALL SUBTASKS VERIFIED COMPLETED: SubtaskOperations.get_next_subtask returns no remaining subtasks",
        "‚úÖ SUBTASK COMPLETION STATUS VALIDATED: All subtasks show 'completed' status with evidence",
        "‚úÖ NO INCOMPLETE WORK REMAINING: Zero subtasks in 'not-started', 'in-progress', or 'needs-review' status",
        "‚úÖ COMPLETE TEST SUITE EXECUTION: All unit, integration, and e2e tests pass successfully",
        "‚úÖ TEST COVERAGE ACHIEVED: Code coverage meets or exceeds 90% threshold",
        "‚úÖ ACCEPTANCE CRITERIA VALIDATED: All task and subtask acceptance criteria met with evidence",
        "‚úÖ ARCHITECTURAL COMPLIANCE: Implementation follows SOLID principles and established patterns",
        "‚úÖ CODE QUALITY STANDARDS: Static analysis tools pass with no critical issues",
        "‚úÖ TYPE SAFETY VERIFIED: TypeScript types properly defined and used throughout",
        "‚úÖ ERROR HANDLING COMPREHENSIVE: All error paths tested and handled gracefully",
        "‚úÖ EDGE CASES COVERED: Boundary conditions and edge cases properly tested",
        "‚úÖ SECURITY MEASURES VALIDATED: Security best practices implemented and verified",
        "‚úÖ PERFORMANCE BENCHMARKS MET: All performance requirements satisfied",
        "‚úÖ NO REGRESSIONS INTRODUCED: Existing functionality remains intact",
        "‚úÖ DOCUMENTATION UPDATED: Code comments, README, and technical docs current",
        "‚úÖ EVIDENCE PACKAGE PREPARED: Comprehensive documentation for code review",
        "‚úÖ DEPLOYMENT READINESS: Implementation ready for production deployment",
        "‚úÖ MONITORING AND LOGGING: Adequate monitoring and logging implemented"
      ],
      "conditions": [
        {
          "name": "subtasks_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "implement_subtasks"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "role_transition",
      "description": "Transition to code review role with implementation evidence",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to code review with comprehensive implementation evidence",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'senior-developer'",
          "Extract transitionId for senior developer to code review transition",
          "Execute execute_transition with implementation evidence in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for code review transition",
        "execute_transition executed with implementation evidence",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "implementation_validated",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "validate_implementation"
            }
          },
          "isRequired": true
        }
      ]
    }
  ]
}
