{
  "workflowSteps": [
    {
      "name": "context_gathering_and_analysis",
      "description": "Gather and analyze all relevant task context, including description, codebase analysis, and research findings.",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligently retrieve comprehensive task information to build a foundation for strategic planning.",
      "approachGuidance": {
        "stepByStep": [
          "Review message history to identify existing context and requirements provided by the boomerang role.",
          "If context is insufficient, execute the 'TaskOperations.get' MCP operation to fetch the full task details.",
          "  - Use conditional MCP call with serviceName: 'TaskOperations', operation: 'get'",
          "  - Include parameters: includeDescription: true, includeAnalysis: true, includeResearch: true",
          "  - Only execute if context is missing from message history",
          "Ensure the MCP call includes parameters to retrieve the description, codebase analysis, research findings, and any existing subtasks.",
          "Synthesize all gathered information to form a complete understanding of the task's objectives, constraints, and technical landscape."
        ]
      },
      "qualityChecklist": [
        "Message history reviewed for initial context.",
        "Task description, business requirements, and acceptance criteria are fully understood.",
        "Codebase analysis from the boomerang role has been reviewed and comprehended.",
        "Research findings and recommendations have been analyzed.",
        "A comprehensive understanding of the task is achieved before proceeding to planning."
      ],
      "conditions": []
    },
    {
      "name": "implement_subtasks",
      "description": "Execute subtasks iteratively with testing and commits",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Iterative subtask completion with individual commits and validation",
      "approachGuidance": {
        "stepByStep": [
          "Get next subtask using SubtaskOperations.get_next_subtask",
          "  - Use MCP call with serviceName: 'SubtaskOperations', operation: 'get_next_subtask'",
          "  - Retrieve the next available subtask for implementation",
          "Update subtask status to 'in-progress'",
          "  - Use MCP call with serviceName: 'SubtaskOperations', operation: 'update_subtask'",
          "  - Set status to 'in-progress' to track current work",
          "Implement following architect's guidance and code examples",
          "Test implementation thoroughly (unit, integration, manual)",
          "Commit changes with descriptive subtask-specific message",
          "Update subtask to 'completed' with evidence",
          "Repeat until no more subtasks available"
        ]
      },
      "qualityChecklist": [
        "All available subtasks retrieved and completed",
        "Each subtask implemented following strategic guidance",
        "Comprehensive testing performed for each subtask",
        "Individual commits made after each subtask completion",
        "All subtasks updated to 'completed' status with evidence"
      ],
      "conditions": [
        {
          "name": "context_setup_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "setup_implementation_context"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "validate_implementation",
      "description": "Validate complete implementation and prepare for code review",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Comprehensive validation of completed implementation",
      "approachGuidance": {
        "stepByStep": [
          "Run complete test suite to ensure no regressions",
          "Validate all acceptance criteria are met",
          "Verify code follows established patterns and principles",
          "Check error handling and edge cases",
          "Prepare comprehensive evidence for code review"
        ]
      },
      "qualityChecklist": [
        "Complete test suite runs successfully",
        "All acceptance criteria validated and met",
        "Code follows established patterns and SOLID principles",
        "Error handling properly implemented",
        "Implementation evidence prepared for review"
      ],
      "conditions": [
        {
          "name": "subtasks_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "implement_subtasks"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "role_transition",
      "description": "Transition to code review role with implementation evidence",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to code review with comprehensive implementation evidence",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'senior-developer'",
          "Extract transitionId for senior developer to code review transition",
          "Execute execute_transition with implementation evidence in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for code review transition",
        "execute_transition executed with implementation evidence",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "implementation_validated",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "validate_implementation"
            }
          },
          "isRequired": true
        }
      ]
    }
  ]
}