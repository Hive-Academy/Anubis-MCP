{
  "serviceOrchestrationProtocols": {
    "description": "Internal service orchestration protocols for implementation operations replacing direct MCP calls",
    "coreOrchestrator": "CoreServiceOrchestrator",
    "supportedServices": {
      "TaskOperations": {
        "service": "TaskOperationsService",
        "operations": ["get", "update", "list"],
        "description": "Task context acquisition and implementation progress updates",
        "usageContext": "Implementation context acquisition, progress tracking, status updates"
      },
      "PlanningOperations": {
        "service": "PlanningOperationsService",
        "operations": [
          "get_plan",
          "update_plan",
          "get_batch",
          "update_batch",
          "get_subtask",
          "update_subtask"
        ],
        "description": "Implementation planning and batch management",
        "usageContext": "Implementation plan retrieval, batch status updates, subtask progress tracking"
      },
      "SubtaskOperations": {
        "service": "IndividualSubtaskOperationsService",
        "operations": [
          "get_subtask",
          "update_subtask",
          "get_next_subtask",
          "create_subtask"
        ],
        "description": "Individual subtask management and progress tracking",
        "usageContext": "Subtask execution, progress updates, completion validation"
      },
      "WorkflowOperations": {
        "service": "WorkflowOperationsService",
        "operations": ["delegate", "escalate", "complete"],
        "description": "Workflow coordination and role delegation",
        "usageContext": "Implementation completion delegation, escalation to architect/boomerang, workflow transitions"
      },
      "ReviewOperations": {
        "service": "ReviewOperationsService",
        "operations": ["create_review", "update_review", "get_review"],
        "description": "Quality review and implementation validation",
        "usageContext": "Implementation quality validation, code review preparation, compliance verification"
      }
    },
    "orchestrationPatterns": {
      "contextAcquisition": {
        "pattern": "TaskOperations.get → PlanningOperations.get_plan → PlanningOperations.get_batch",
        "description": "Comprehensive context acquisition including task, implementation plan, and current batch",
        "services": ["TaskOperations", "PlanningOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "implementationExecution": {
        "pattern": "SubtaskOperations.get_subtask → SubtaskOperations.update_subtask → PlanningOperations.update_batch",
        "description": "Execute implementation with subtask progress tracking and batch updates",
        "services": ["SubtaskOperations", "PlanningOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "qualityValidation": {
        "pattern": "ReviewOperations.create_review → SubtaskOperations.update_subtask → TaskOperations.update",
        "description": "Validate implementation quality and update progress with evidence",
        "services": ["ReviewOperations", "SubtaskOperations", "TaskOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "batchCompletion": {
        "pattern": "PlanningOperations.update_batch → TaskOperations.update → ReviewOperations.create_review",
        "description": "Complete batch with status updates and quality validation",
        "services": [
          "PlanningOperations",
          "TaskOperations",
          "ReviewOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "implementationDelegation": {
        "pattern": "TaskOperations.update → ReviewOperations.create_review → WorkflowOperations.delegate",
        "description": "Complete implementation and delegate to code review with evidence",
        "services": [
          "TaskOperations",
          "ReviewOperations",
          "WorkflowOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      },
      "escalationHandling": {
        "pattern": "TaskOperations.update → SubtaskOperations.update_subtask → WorkflowOperations.escalate",
        "description": "Document implementation issues and escalate to appropriate role",
        "services": [
          "TaskOperations",
          "SubtaskOperations",
          "WorkflowOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      }
    },
    "actionTypeMapping": {
      "MCP_CALL": {
        "executor": "StepActionExecutor.executeServiceCall",
        "orchestrator": "CoreServiceOrchestrator.executeServiceCall",
        "validation": "CoreServiceOrchestrator.validateServiceCall",
        "errorHandling": "ServiceCallResult with success/error status"
      },
      "IMPLEMENTATION_SETUP": {
        "executor": "StepActionExecutor.executeImplementationSetup",
        "description": "Setup implementation environment with verified context and strategic guidance",
        "errorHandling": "ActionExecutionResult with setup validation results"
      },
      "IMPLEMENTATION_EXECUTION": {
        "executor": "StepActionExecutor.executeImplementationExecution",
        "description": "Execute implementation following SOLID principles and strategic guidance",
        "errorHandling": "ActionExecutionResult with implementation results and quality metrics"
      },
      "TESTING_IMPLEMENTATION": {
        "executor": "StepActionExecutor.executeTestingImplementation",
        "description": "Implement comprehensive testing with coverage targets and quality validation",
        "errorHandling": "ActionExecutionResult with testing results and coverage metrics"
      },
      "QUALITY_VALIDATION": {
        "executor": "StepActionExecutor.executeQualityValidation",
        "description": "Validate implementation quality against established standards and SOLID principles",
        "errorHandling": "ActionExecutionResult with quality assessment and compliance verification"
      },
      "PERFORMANCE_OPTIMIZATION": {
        "executor": "StepActionExecutor.executePerformanceOptimization",
        "description": "Optimize implementation performance within established baseline requirements",
        "errorHandling": "ActionExecutionResult with performance metrics and optimization results"
      },
      "SECURITY_IMPLEMENTATION": {
        "executor": "StepActionExecutor.executeSecurityImplementation",
        "description": "Implement security requirements following verified patterns and standards",
        "errorHandling": "ActionExecutionResult with security validation and compliance verification"
      },
      "PATTERN_ADHERENCE_VALIDATION": {
        "executor": "StepActionExecutor.executePatternAdherenceValidation",
        "description": "Validate adherence to architectural patterns and verified consistency",
        "errorHandling": "ActionExecutionResult with pattern compliance assessment"
      },
      "WORKFLOW_TRANSITION": {
        "executor": "StepActionExecutor.executeWorkflowTransition",
        "description": "Execute workflow transition with comprehensive context preservation",
        "errorHandling": "ActionExecutionResult with transition results and context validation"
      },
      "SOLID_COMPLIANCE_CHECK": {
        "executor": "StepActionExecutor.executeSolidComplianceCheck",
        "description": "Validate SOLID principles compliance in implementation",
        "errorHandling": "ActionExecutionResult with SOLID compliance assessment"
      },
      "COMMAND": {
        "executor": "StepActionExecutor.executeCommand",
        "description": "Shell command execution for implementation tools and validation",
        "errorHandling": "ActionExecutionResult with command results"
      },
      "VALIDATION": {
        "executor": "StepActionExecutor.executeValidation",
        "description": "Validation logic execution for implementation quality",
        "errorHandling": "ActionExecutionResult with validation results"
      },
      "REMINDER": {
        "executor": "StepActionExecutor.executeReminder",
        "description": "Implementation milestone reminders and notifications",
        "errorHandling": "Always successful"
      }
    },
    "serviceCallProtocol": {
      "validation": {
        "step1": "CoreServiceOrchestrator.validateServiceCall(serviceName, operation, parameters)",
        "step2": "Validate implementation-specific parameters and quality requirements",
        "step3": "Ensure SOLID principles compliance and strategic guidance adherence",
        "step4": "Return validation result with implementation-specific checks"
      },
      "execution": {
        "step1": "CoreServiceOrchestrator.executeServiceCall(serviceName, operation, parameters)",
        "step2": "Delegate to appropriate implementation service through delegateServiceCall()",
        "step3": "Handle implementation-specific response processing and quality validation",
        "step4": "Return ServiceCallResult with implementation metrics and quality assessment"
      },
      "errorHandling": {
        "serviceNotFound": "Return error with implementation service availability message",
        "operationFailed": "Return ServiceCallResult with implementation-specific error details",
        "validationFailed": "Return implementation validation error before execution",
        "solidComplianceFailed": "Handle SOLID principles compliance validation failures",
        "qualityStandardsFailed": "Handle quality standards validation failures",
        "performanceTargetsFailed": "Handle performance target validation failures",
        "timeout": "Handle implementation service call timeouts with partial results"
      }
    },
    "qualityStandards": {
      "implementationValidation": [
        "All implementation must follow SOLID principles and strategic guidance",
        "Code quality must meet established standards with comprehensive testing",
        "Performance targets must be achieved within baseline requirements",
        "Security implementation must follow verified patterns and standards"
      ],
      "serviceCallValidation": [
        "All service calls must include implementation context and quality requirements",
        "Parameters must include SOLID principles compliance requirements",
        "Error handling must preserve implementation progress and quality evidence",
        "Service responses must be validated for implementation quality standards"
      ],
      "orchestrationPrinciples": [
        "Use CoreServiceOrchestrator for all implementation service coordination",
        "Implement comprehensive error handling with implementation context preservation",
        "Maintain implementation quality metrics and progress tracking",
        "Ensure proper context preservation across implementation service calls"
      ],
      "implementationStandards": [
        "SOLID principles compliance required for all implementation decisions",
        "Comprehensive testing with minimum coverage targets",
        "Performance optimization within established baseline requirements",
        "Security implementation following verified patterns and standards"
      ],
      "errorRecovery": [
        "Implement graceful degradation for implementation service failures",
        "Preserve implementation progress and quality evidence for recovery",
        "Provide meaningful error messages with implementation continuation guidance",
        "Support retry mechanisms for transient implementation service failures"
      ]
    },
    "implementationSpecificProtocols": {
      "solidPrinciplesCompliance": {
        "singleResponsibility": "Ensure each class/service has one clear purpose and reason to change",
        "openClosed": "Design for extensibility through composition, not modification",
        "liskovSubstitution": "Ensure derived classes are substitutable for base classes",
        "interfaceSegregation": "Create focused interfaces with specific responsibilities",
        "dependencyInversion": "Depend on abstractions, not concrete implementations"
      },
      "qualityValidation": {
        "codeQuality": "Validate clean code principles, maintainability, and documentation",
        "testCoverage": "Achieve minimum coverage targets with meaningful assertions",
        "performance": "Meet performance targets within established baseline requirements",
        "security": "Implement security requirements following verified patterns"
      },
      "implementationExecution": {
        "strategicGuidance": "Follow architectural guidance and implementation specifics",
        "patternCompliance": "Maintain adherence to verified architectural patterns",
        "errorHandling": "Implement comprehensive error handling and input validation",
        "performanceOptimization": "Optimize within established baseline requirements"
      },
      "testingStrategy": {
        "unitTesting": "Comprehensive unit tests with happy path, edge cases, and error scenarios",
        "integrationTesting": "Service interactions, repository layer, and API endpoint testing",
        "manualValidation": "Success criteria validation and user workflow testing",
        "performanceTesting": "Response times, resource usage, and optimization validation"
      },
      "workflowTransitions": {
        "completionCriteria": "Evaluate implementation completeness against strategic requirements",
        "qualityEvidence": "Document quality validation evidence and compliance verification",
        "contextPreservation": "Preserve comprehensive context for receiving role",
        "transitionExecution": "Execute transition with proper documentation and evidence"
      }
    }
  }
}
