{
  "serviceOrchestrationProtocols": {
    "description": "Internal service orchestration protocols replacing direct MCP calls",
    "coreOrchestrator": "CoreServiceOrchestrator",
    "supportedServices": {
      "TaskOperations": {
        "service": "TaskOperationsService",
        "operations": ["create", "update", "get", "list"],
        "description": "Core task management operations",
        "usageContext": "Task creation, updates, context retrieval"
      },
      "PlanningOperations": {
        "service": "PlanningOperationsService", 
        "operations": ["create_plan", "update_plan", "get_plan", "create_subtasks", "update_batch", "get_batch"],
        "description": "Implementation planning and subtask management",
        "usageContext": "Implementation planning, subtask creation and management"
      },
      "WorkflowOperations": {
        "service": "WorkflowOperationsService",
        "operations": ["delegate", "complete", "escalate"],
        "description": "Workflow coordination and role delegation",
        "usageContext": "Role transitions, workflow delegation, escalation"
      },
      "ReviewOperations": {
        "service": "ReviewOperationsService",
        "operations": ["create_review", "update_review", "get_review", "create_completion", "get_completion"],
        "description": "Quality review and completion validation",
        "usageContext": "Quality gates, review processes, completion validation"
      },
      "ResearchOperations": {
        "service": "ResearchOperationsService",
        "operations": ["create_research", "update_research", "get_research", "add_comment", "get_comments"],
        "description": "Research coordination and knowledge management",
        "usageContext": "Research requests, findings management, knowledge capture"
      },
      "SubtaskOperations": {
        "service": "IndividualSubtaskOperationsService",
        "operations": ["create_subtask", "update_subtask", "get_subtask", "get_next_subtask"],
        "description": "Individual subtask management",
        "usageContext": "Granular subtask operations, progress tracking"
      }
    },
    "orchestrationPatterns": {
      "contextAcquisition": {
        "pattern": "TaskOperations.get → TaskOperations.list",
        "description": "Acquire complete task context through service calls",
        "services": ["TaskOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "taskSetup": {
        "pattern": "TaskOperations.create → PlanningOperations.create_plan → PlanningOperations.create_subtasks",
        "description": "Complete task setup with planning and subtasks",
        "services": ["TaskOperations", "PlanningOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      },
      "roleDelegation": {
        "pattern": "TaskOperations.get → WorkflowOperations.delegate",
        "description": "Context-aware role delegation",
        "services": ["TaskOperations", "WorkflowOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      },
      "evidenceCollection": {
        "pattern": "TaskOperations.update → ReviewOperations.create_review",
        "description": "Collect and document evidence",
        "services": ["TaskOperations", "ReviewOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      }
    },
    "actionTypeMapping": {
      "MCP_CALL": {
        "executor": "StepActionExecutor.executeServiceCall",
        "orchestrator": "CoreServiceOrchestrator.executeServiceCall",
        "validation": "CoreServiceOrchestrator.validateServiceCall",
        "errorHandling": "ServiceCallResult with success/error status"
      },
      "COMMAND": {
        "executor": "StepActionExecutor.executeCommand",
        "description": "Shell command execution with proper error handling",
        "errorHandling": "ActionExecutionResult with success/error status"
      },
      "VALIDATION": {
        "executor": "StepActionExecutor.executeValidation",
        "description": "Validation logic execution",
        "errorHandling": "ActionExecutionResult with validation results"
      },
      "REMINDER": {
        "executor": "StepActionExecutor.executeReminder",
        "description": "User reminders and notifications",
        "errorHandling": "Always successful"
      },
      "FILE_OPERATION": {
        "executor": "StepActionExecutor.executeFileOperation",
        "description": "File system operations",
        "errorHandling": "ActionExecutionResult with file operation status"
      }
    },
    "serviceCallProtocol": {
      "validation": {
        "step1": "CoreServiceOrchestrator.validateServiceCall(serviceName, operation, parameters)",
        "step2": "Validate required parameters and service availability",
        "step3": "Return validation result"
      },
      "execution": {
        "step1": "CoreServiceOrchestrator.executeServiceCall(serviceName, operation, parameters)",
        "step2": "Delegate to appropriate service through delegateServiceCall()",
        "step3": "Handle service response and errors",
        "step4": "Return ServiceCallResult with timing and status"
      },
      "errorHandling": {
        "serviceNotFound": "Return error with unknown service message",
        "operationFailed": "Return ServiceCallResult with error details",
        "validationFailed": "Return validation error before execution",
        "timeout": "Handle service call timeouts gracefully"
      }
    },
    "qualityStandards": {
      "serviceCallValidation": [
        "All service calls must be validated before execution",
        "Parameters must be properly structured and complete",
        "Error handling must be implemented for all service calls",
        "Service responses must be properly processed"
      ],
      "orchestrationPrinciples": [
        "Use CoreServiceOrchestrator for all service coordination",
        "Implement proper error handling and recovery",
        "Maintain service call timing and performance metrics",
        "Ensure proper context preservation across service calls"
      ],
      "errorRecovery": [
        "Implement graceful degradation for service failures",
        "Provide meaningful error messages and recovery suggestions",
        "Log service call failures for debugging and monitoring",
        "Support retry mechanisms for transient failures"
      ]
    }
  }
}