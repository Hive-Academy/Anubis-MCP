{
  "workflowSteps": [
    {
      "name": "mandatory_git_integration_setup",
      "displayName": "MANDATORY: Git Integration Setup",
      "description": "CRITICAL: Complete Git operations before task creation. STOP workflow if any step fails.",
      "sequenceNumber": 1,
      "isRequired": true,
      "estimatedTime": "3-5 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Complete git operations verification and setup before task creation",
        "principles": [
          "Verify git repository status and configuration",
          "Ensure clean working directory or proper handling of existing changes",
          "Create feature branch with descriptive naming",
          "Verify all git operations work before proceeding"
        ],
        "methodology": "Git-first approach with comprehensive verification",
        "setupPhases": {
          "statusVerification": "Check git status and verify repository state",
          "branchManagement": "Create appropriate feature branch for task work",
          "configurationCheck": "Verify git configuration and repository setup",
          "operationValidation": "Test basic git operations work correctly"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Check git repository status and configuration",
          "Verify working directory state (clean or with expected changes)",
          "Create feature branch using descriptive naming convention",
          "Verify git operations work correctly",
          "Document any git-related setup or configuration issues"
        ],
        "gitOperations": [
          "Execute 'git status --porcelain' to check working directory",
          "Create feature branch with format 'feature/TSK-{ID}-{short-description}'",
          "Verify branch creation and checkout operations work",
          "Test basic git commands to ensure repository is functional"
        ],
        "errorHandling": [
          "Handle working directory changes appropriately",
          "Address any git configuration issues",
          "Resolve branch naming conflicts if they exist",
          "Ensure git operations are functional before proceeding"
        ]
      },
      "qualityChecklist": [
        "Git repository status verified and documented",
        "Working directory state handled appropriately",
        "Feature branch created with proper naming convention",
        "Git operations verified to work correctly",
        "Any git issues identified and resolved"
      ],
      "conditions": [
        {
          "name": "git_repository_exists",
          "conditionType": "DIRECTORY_EXISTS",
          "logic": {
            "check": "directory_exists",
            "parameters": {
              "directories": [".git"]
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "git_setup",
      "reportTemplate": "git_integration_setup"
    },
    {
      "name": "mandatory_codebase_analysis_and_task_creation",
      "displayName": "MANDATORY: Codebase Analysis and Comprehensive Task Creation",
      "description": "Perform systematic codebase analysis with functional verification, then immediately create comprehensive task with analysis results",
      "sequenceNumber": 2,
      "isRequired": true,
      "estimatedTime": "10-15 minutes",
      "stepType": "HYBRID",
      "behavioralContext": {
        "approach": "Combined codebase analysis and task creation to eliminate context loss and improve efficiency",
        "principles": [
          "Perform comprehensive codebase analysis with functional verification",
          "Immediately use analysis results for task creation - no context loss",
          "Document evidence-based findings throughout analysis",
          "Create task with structured analysis data for downstream roles",
          "Link task to current workflow execution automatically"
        ],
        "methodology": "Integrated analysis-to-task workflow with immediate data utilization",
        "workflowPhases": {
          "analysisPhase": {
            "structuralAnalysis": "Identify implementation patterns, technology stack, integration patterns, and component interactions",
            "functionalVerification": "Test current functionality, existing features, validate capabilities, and test assumptions",
            "qualityAssessment": "Review error handling, testing patterns, performance considerations, and security implementations",
            "evidenceDocumentation": "Document file locations, testing results, current capabilities, and identified gaps"
          },
          "taskCreationPhase": {
            "requirementsGathering": "Extract task requirements from user input and analysis findings",
            "analysisStructuring": "Structure codebase analysis findings for downstream consumption",
            "taskGeneration": "Create comprehensive task with description, requirements, and structured analysis",
            "executionLinking": "Link task to current workflow execution for proper context"
          }
        },
        "integrationStrategy": {
          "contextPreservation": "Maintain analysis context throughout task creation",
          "dataFlow": "Direct flow from analysis findings to task structure",
          "verificationIntegration": "Include functional verification results in task documentation",
          "downstreamPreparation": "Structure data for optimal consumption by subsequent roles"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Identify implementation patterns relevant to current task",
          "Document technology stack components and versions",
          "Study similar feature implementations with examples",
          "Test current functionality using available tools",
          "Execute existing features to understand capabilities",
          "Validate assumptions through actual testing",
          "Review error handling and validation approaches",
          "Gather task requirements from user input and analysis",
          "Structure codebase analysis findings for downstream roles",
          "Create comprehensive task with all analysis data",
          "Link task to current execution for proper workflow continuity"
        ],
        "analysisSteps": [
          "Examine project structure and identify key directories and files",
          "Map technology stack including frameworks, libraries, and versions",
          "Find and analyze similar implementations for patterns and approaches",
          "Test existing functionality to understand current system behavior",
          "Execute existing features to verify actual capabilities",
          "Test edge cases and error conditions to understand system limits",
          "Validate technical assumptions through direct testing",
          "Document evidence from testing and verification activities"
        ],
        "taskCreationSteps": [
          "Extract task requirements from user input and conversation context",
          "Generate unique task slug from task name",
          "Prepare comprehensive task description and requirements",
          "Structure codebase analysis results in standardized format",
          "Include functional verification evidence and results",
          "Call TaskOperations.create with all required parameters",
          "Include executionId to automatically link to current execution",
          "Verify task creation success and data integrity"
        ],
        "validationSteps": [
          "Verify comprehensive analysis completed with evidence",
          "Confirm task created successfully with all required fields",
          "Validate task is properly linked to current execution",
          "Ensure codebase analysis data is properly structured",
          "Confirm functional verification results are included"
        ]
      },
      "qualityChecklist": [
        "Implementation patterns identified and documented",
        "Technology stack components and versions recorded",
        "Similar feature implementations analyzed with examples",
        "Current functionality tested with evidence collected",
        "Assumptions validated through actual testing",
        "Error handling and validation approaches reviewed",
        "Comprehensive findings documented with evidence",
        "Functional verification results documented",
        "Task created with comprehensive description and requirements",
        "Codebase analysis structured and complete in task",
        "Functional verification results included in task",
        "Git branch information recorded in task",
        "Task automatically linked to execution via executionId",
        "All required TaskOperations.create parameters provided"
      ],
      "conditions": [
        {
          "name": "codebase_accessible",
          "conditionType": "DIRECTORY_EXISTS",
          "logic": {
            "check": "directory_exists",
            "parameters": {
              "directories": ["src", "lib", "app"]
            }
          },
          "isRequired": true
        },
        {
          "name": "git_setup_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "mandatory_git_integration_setup"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "create_task_with_codebase_analysis",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "TaskOperations",
            "operation": "create"
          },
          "sequenceOrder": 1
        }
      ],
      "triggerReport": true,
      "reportType": "combined_analysis_and_task_creation",
      "reportTemplate": "codebase_analysis_with_task_creation_completion"
    },
    {
      "name": "research_decision_framework_with_validation",
      "displayName": "Research Decision Framework with Current State Validation",
      "description": "Evaluate research necessity using verified decision criteria and evidence",
      "sequenceNumber": 3,
      "isRequired": true,
      "estimatedTime": "3-5 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Evidence-based research decision making with mandatory verification",
        "principles": [
          "Base decisions on verified current state testing",
          "Document evidence supporting research rationale",
          "Use tested capabilities vs assumptions for decisions",
          "Provide specific research questions if research needed"
        ],
        "methodology": "Verification-driven decision matrix with evidence documentation",
        "decisionCriteria": {
          "definitelyResearch": [
            "unfamiliar_technologies_verified",
            "multiple_approaches_needed_confirmed",
            "critical_architecture_decisions_tested",
            "security_requirements_beyond_current",
            "unknown_external_systems_proven"
          ],
          "unlikelyResearch": [
            "clear_implementation_path_confirmed",
            "well_understood_technology_validated",
            "similar_work_completed_verified",
            "standard_operations_tested"
          ]
        },
        "evidenceRequirements": {
          "currentStateTested": "Verify current system capabilities through actual testing",
          "capabilitiesVerified": "Document what the system can and cannot do",
          "limitationsConfirmed": "Test and confirm system limitations",
          "complexityValidated": "Validate complexity assumptions through hands-on investigation",
          "verificationEvidence": "Provide concrete evidence from testing and investigation"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Review functional verification results from previous step",
          "Test existing functionality to understand current capabilities",
          "Verify technical claims through actual code execution",
          "Validate complexity assumptions with hands-on investigation",
          "Apply evidence-based decision criteria for research necessity",
          "Document specific research questions if research is needed"
        ],
        "evaluationSteps": [
          "Apply decision matrix criteria to current task requirements",
          "Compare task complexity against verified system capabilities",
          "Assess whether current knowledge is sufficient for implementation",
          "Determine if additional research would provide significant value"
        ],
        "documentationSteps": [
          "Document decision rationale with supporting evidence",
          "Record verification results that influenced the decision",
          "Specify research questions if research is recommended",
          "Prepare context for next role based on decision outcome"
        ]
      },
      "qualityChecklist": [
        "Current state tested and capabilities verified",
        "Technical claims validated through execution",
        "Complexity assumptions tested with evidence",
        "Decision criteria applied with verification evidence",
        "Research decision documented with rationale",
        "Specific research questions provided if research needed"
      ],
      "conditions": [
        {
          "name": "analysis_and_task_creation_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "mandatory_codebase_analysis_and_task_creation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [],
      "triggerReport": true,
      "reportType": "research_decision",
      "reportTemplate": "evidence_based_research_decision"
    },
    {
      "name": "role_delegation_with_task_slug",
      "displayName": "Role Delegation with Task-Slug",
      "description": "Delegate to appropriate role with comprehensive context and human-readable references",
      "sequenceNumber": 4,
      "isRequired": true,
      "estimatedTime": "2-3 minutes",
      "stepType": "ACTION",
      "behavioralContext": {
        "approach": "Context-rich delegation with human-readable task references",
        "principles": [
          "Include task-slug for human-readable reference",
          "Provide comprehensive context handoff",
          "Select appropriate target role based on research decision",
          "Ensure proper workflow continuity"
        ],
        "methodology": "MCP-driven delegation with structured context preservation",
        "delegationStrategy": {
          "roleSelection": "Determine target role based on research decision results (researcher if research needed, architect if direct implementation)",
          "contextPreparation": "Prepare comprehensive delegation context including task-slug and analysis results",
          "handoffExecution": "Execute workflow delegation through MCP operations with full context",
          "continuityEnsurance": "Ensure proper context handoff and workflow continuity"
        }
      },
      "approachGuidance": {
        "stepByStep": [
          "Determine target role based on research decision results",
          "Prepare comprehensive delegation context including task-slug",
          "Execute workflow delegation through MCP operations",
          "Ensure proper context handoff and documentation"
        ],
        "roleSelectionSteps": [
          "Review research decision outcome from previous step",
          "Select researcher role if research is needed",
          "Select architect role if implementation can proceed directly",
          "Prepare role-specific delegation message and context"
        ],
        "delegationSteps": [
          "Call WorkflowOperations.delegate with target role",
          "Include task-slug for human-readable reference",
          "Provide comprehensive handoff message with context",
          "Ensure all analysis results are available to next role"
        ]
      },
      "qualityChecklist": [
        "Target role selected based on evidence-based research decision",
        "Task-slug included for human-readable reference",
        "Comprehensive context prepared for handoff",
        "Delegation executed successfully through MCP",
        "Workflow continuity ensured"
      ],
      "conditions": [
        {
          "name": "research_decision_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "research_decision_framework_with_validation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "execute_role_delegation",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "WorkflowOperations",
            "operation": "delegate"
          },
          "sequenceOrder": 1
        }
      ],
      "triggerReport": true,
      "reportType": "delegation",
      "reportTemplate": "role_delegation_with_context"
    }
  ]
}
