{
  "workflowSteps": [
    {
      "name": "git_setup_and_memory_analysis",
      "description": "Establish git workflow foundation and extract comprehensive project context from memory bank and project documentation.",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Strategic git setup with comprehensive project context extraction to establish implementation foundation - NO TASK CREATION",
      "approachGuidance": {
        "stepByStep": [
          "‚ö†Ô∏è CRITICAL PROTOCOL: DO NOT CREATE ANY TASKS IN THIS STEP - Task creation is reserved exclusively for Step 3",
          "üîß GIT WORKFLOW ESTABLISHMENT:",
          "Check current git status and repository state:",
          "  - Execute: 'git status --porcelain' to identify any uncommitted changes",
          "  - Execute: 'git branch' to identify current branch and available branches",
          "  - Execute: 'git log --oneline -5' to understand recent commit history",
          "  - Assess repository cleanliness and identify any conflicts or issues",
          "ASK USER for branch strategy decision:",
          "  - Present clear options: 'Continue on current branch [branch-name] or create new feature branch?'",
          "  - If new branch requested: 'What should the new branch be named? (e.g., feature/user-auth, fix/payment-bug)'",
          "  - Wait for user response before proceeding",
          "Execute user's branch decision systematically:",
          "  - If continuing on current branch: Verify it's not main/master branch for safety",
          "  - If creating new branch: Execute 'git checkout -b [user-specified-name]'",
          "  - Confirm branch switch successful with 'git branch' verification",
          "Handle any pending changes professionally:",
          "  - If uncommitted changes exist: Commit with 'git add . && git commit -m \"WIP: Preparing for [task-description]\"'",
          "  - If no changes: Document clean working directory status",
          "  - Ensure repository is in stable state for development work",
          "üìö COMPREHENSIVE PROJECT CONTEXT EXTRACTION:",
          "IF memory-bank folder exists, perform systematic analysis:",
          "  - Read and analyze ProjectOverview.md for business context, goals, and strategic direction",
          "  - Read and analyze TechnicalArchitecture.md for system design, patterns, and constraints",
          "  - Read and analyze DeveloperGuide.md for development practices, conventions, and workflows",
          "  - Identify key stakeholders, target users, and business objectives",
          "  - Extract technical debt, known issues, and architectural decisions",
          "IF memory-bank folder doesn't exist:",
          "  - Scan for README.md, package.json, requirements.txt, or similar project files",
          "  - Extract basic project information from available documentation",
          "  - Note absence of memory bank for future documentation creation",
          "üìã STRATEGIC CONTEXT DOCUMENTATION:",
          "Document key context points with strategic focus (3-5 bullet points maximum):",
          "  - Business objective and user value proposition",
          "  - Technical architecture pattern and key constraints",
          "  - Development workflow and quality standards",
          "  - Critical dependencies and integration points",
          "  - Known risks or technical debt affecting implementation",
          "‚úÖ COMPLETION VERIFICATION:",
          "COMPLETE STEP without deviation - NO task creation, NO extended analysis loops",
          "Prepare strategic foundation for subsequent codebase analysis phase"
        ]
      },
      "qualityChecklist": [
        "‚úÖ GIT STATUS COMPREHENSIVELY CHECKED: Repository state, branch information, and commit history analyzed",
        "‚úÖ USER CONSULTED ON BRANCH STRATEGY: Clear options presented and user decision implemented",
        "‚úÖ BRANCH DECISION EXECUTED CORRECTLY: New branch created or current branch confirmed as appropriate",
        "‚úÖ PENDING CHANGES HANDLED PROFESSIONALLY: Any uncommitted work properly committed or resolved",
        "‚úÖ REPOSITORY STATE STABILIZED: Working directory clean and ready for development work",
        "‚úÖ MEMORY BANK CONTEXT EXTRACTED: ProjectOverview, TechnicalArchitecture, and DeveloperGuide analyzed",
        "‚úÖ PROJECT DOCUMENTATION REVIEWED: Available project files and documentation systematically examined",
        "‚úÖ STRATEGIC CONTEXT DOCUMENTED: Key business and technical context captured concisely",
        "‚úÖ BUSINESS OBJECTIVES IDENTIFIED: User value proposition and strategic goals understood",
        "‚úÖ TECHNICAL CONSTRAINTS NOTED: Architecture patterns and limitations documented",
        "‚úÖ NO TASK CREATED: Step completed without violating task creation protocol (reserved for Step 3)",
        "‚úÖ NO ANALYSIS LOOPS: Step completed efficiently without excessive investigation",
        "‚úÖ FOUNDATION ESTABLISHED: Strategic context prepared for subsequent analysis phases"
      ]
    },
    {
      "name": "codebase_analysis",
      "description": "Perform comprehensive high-level codebase analysis to understand architecture, patterns, and implementation landscape.",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Strategic codebase analysis focusing on architecture patterns, technology stack, and integration landscape to inform implementation planning.",
      "approachGuidance": {
        "stepByStep": [
          "üîç STRATEGIC CODEBASE ANALYSIS - Comprehensive architectural understanding:",
          "üèóÔ∏è ARCHITECTURE PATTERN IDENTIFICATION:",
          "Use semantic search and file analysis to identify core architectural patterns:",
          "  - Execute semantic searches for: 'controller', 'service', 'repository', 'model', 'component'",
          "  - Analyze directory structure to understand organizational patterns (MVC, Clean, Layered, etc.)",
          "  - Identify design patterns in use (Factory, Observer, Strategy, etc.)",
          "  - Document architectural style: Monolithic, Microservices, Modular Monolith",
          "  - Understand data flow patterns and communication boundaries",
          "üíª TECHNOLOGY STACK ANALYSIS:",
          "Identify and document the complete technology landscape:",
          "  - Primary language and version (JavaScript/TypeScript, Python, Java, etc.)",
          "  - Framework identification (React, Angular, Vue, Express, Django, Spring, etc.)",
          "  - Database technologies (PostgreSQL, MongoDB, Redis, etc.)",
          "  - Build tools and package managers (Webpack, Vite, npm, yarn, Maven, etc.)",
          "  - Testing frameworks (Jest, Cypress, pytest, JUnit, etc.)",
          "  - Deployment and infrastructure tools (Docker, Kubernetes, AWS, etc.)",
          "üîå INTEGRATION POINTS MAPPING:",
          "Analyze external integrations and system boundaries:",
          "  - API endpoints and external service integrations",
          "  - Database connection patterns and ORM usage",
          "  - Authentication and authorization mechanisms",
          "  - File storage and media handling approaches",
          "  - Logging, monitoring, and observability setup",
          "  - Message queues, event systems, or pub/sub patterns",
          "üìä CODE QUALITY AND CONVENTIONS ASSESSMENT:",
          "Understand established development practices:",
          "  - Code formatting and linting configuration",
          "  - Naming conventions for files, functions, and variables",
          "  - Testing coverage and testing strategy",
          "  - Documentation standards and API documentation",
          "  - Error handling patterns and logging practices",
          "  - Performance optimization approaches",
          "‚ö†Ô∏è CONSTRAINTS AND LIMITATIONS IDENTIFICATION:",
          "Document technical constraints that will impact implementation:",
          "  - Legacy code dependencies and technical debt",
          "  - Performance bottlenecks or scalability concerns",
          "  - Security requirements and compliance constraints",
          "  - Browser compatibility or platform limitations",
          "  - Third-party service limitations or API rate limits",
          "  - Development environment or deployment constraints",
          "üìã ANALYSIS DOCUMENTATION:",
          "Document findings in structured format (5-10 bullet points maximum):",
          "  - Primary architecture pattern and technology stack",
          "  - Key integration points and external dependencies",
          "  - Development conventions and quality standards",
          "  - Critical constraints and implementation considerations",
          "  - Recommended implementation approach based on analysis",
          "‚úÖ ANALYSIS COMPLETION:",
          "Complete analysis phase without task creation - strategic understanding established"
        ]
      },
      "qualityChecklist": [
        "‚úÖ ARCHITECTURE PATTERNS IDENTIFIED: Core architectural style and design patterns documented",
        "‚úÖ TECHNOLOGY STACK MAPPED: Complete technology landscape including languages, frameworks, and tools",
        "‚úÖ INTEGRATION POINTS ANALYZED: External services, APIs, and system boundaries understood",
        "‚úÖ CODE CONVENTIONS DOCUMENTED: Naming standards, formatting rules, and development practices identified",
        "‚úÖ QUALITY STANDARDS ASSESSED: Testing strategies, documentation standards, and quality gates understood",
        "‚úÖ PERFORMANCE PATTERNS NOTED: Optimization approaches and performance considerations documented",
        "‚úÖ SECURITY MEASURES IDENTIFIED: Authentication, authorization, and security practices understood",
        "‚úÖ CONSTRAINTS AND LIMITATIONS DOCUMENTED: Technical debt, legacy dependencies, and implementation constraints noted",
        "‚úÖ DATABASE PATTERNS ANALYZED: Data access patterns, ORM usage, and database architecture understood",
        "‚úÖ BUILD AND DEPLOYMENT PROCESSES UNDERSTOOD: Development workflow and deployment pipeline documented",
        "‚úÖ FINDINGS SYSTEMATICALLY DOCUMENTED: Analysis results organized in structured, actionable format",
        "‚úÖ IMPLEMENTATION APPROACH INFORMED: Strategic understanding established for subsequent planning phases",
        "‚úÖ NO TASK CREATION: Analysis completed without violating task creation protocol"
      ]
    },
    {
      "name": "task_creation_with_gathered_context",
      "description": "‚ö†Ô∏è MANDATORY: Create comprehensive task using validated requirements and comprehensive analysis findings with strategic context integration.",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Strategic task creation incorporating all gathered context, analysis findings, and business requirements into a comprehensive, actionable task definition.",
      "approachGuidance": {
        "stepByStep": [
          "üö® MANDATORY TASK CREATION PROTOCOL - This is the exclusive step for task creation in the workflow",
          "üìä PRE-CREATION CONTEXT SYNTHESIS:",
          "Synthesize all gathered context from previous steps:",
          "  - Integrate business objectives from memory bank analysis",
          "  - Incorporate technical architecture findings from codebase analysis",
          "  - Combine user requirements with technical constraints",
          "  - Align implementation approach with established patterns",
          "  - Consider performance, security, and scalability implications",
          "üéØ BUSINESS REQUIREMENTS STRUCTURING:",
          "Structure comprehensive business requirements:",
          "  - Primary business objective and user value proposition",
          "  - Target user personas and use cases",
          "  - Success metrics and acceptance criteria",
          "  - Business constraints and regulatory requirements",
          "  - Integration requirements with existing business processes",
          "üèóÔ∏è TECHNICAL REQUIREMENTS DEFINITION:",
          "Define detailed technical requirements based on analysis:",
          "  - Specific technical components to be implemented",
          "  - Integration points with existing architecture",
          "  - Performance requirements and scalability needs",
          "  - Security requirements and compliance standards",
          "  - Testing requirements and quality assurance needs",
          "üìã COMPREHENSIVE TASK DATA PREPARATION:",
          "Prepare comprehensive task data structure:",
          "  - Task title: Clear, descriptive, action-oriented",
          "  - Task description: Comprehensive business context and technical scope",
          "  - Acceptance criteria: Specific, measurable, testable outcomes",
          "  - Priority level: HIGH/MEDIUM/LOW based on business impact",
          "  - Estimated complexity: 1-10 scale with justification",
          "üîó MCP TASK CREATION EXECUTION:",
          "MUST execute TaskOperations.create operation with comprehensive parameters:",
          "  - Use serviceName: 'TaskOperations', operation: 'create'",
          "  - MANDATORY: Include executionId parameter: '{{ executionIdValue }}' for workflow linkage",
          "  - Include comprehensive taskData object with business and technical requirements",
          "  - Include detailed codebaseAnalysis object with findings from Step 2",
          "  - Include structured description object with user requirements and business context",
          "  - Include priority, complexity, and risk assessment",
          "üìä CODEBASE ANALYSIS INTEGRATION:",
          "Include comprehensive codebaseAnalysis object:",
          "  - Architecture patterns and design decisions",
          "  - Technology stack and framework details",
          "  - Integration points and external dependencies",
          "  - Code conventions and quality standards",
          "  - Performance and security considerations",
          "üéØ BUSINESS CONTEXT INTEGRATION:",
          "Include detailed description object with business context:",
          "  - User requirements and acceptance criteria",
          "  - Business objectives and success metrics",
          "  - Stakeholder expectations and constraints",
          "  - Timeline and delivery requirements",
          "  - Risk assessment and mitigation strategies",
          "‚úÖ TASK CREATION VERIFICATION:",
          "Verify successful task creation with proper execution linkage:",
          "  - Confirm MCP operation completed successfully",
          "  - Verify executionId linkage is properly established",
          "  - Validate task data is complete and accurate",
          "  - Ensure all context is properly integrated",
          "COMPLETE STEP - NO FURTHER ANALYSIS beyond task creation verification"
        ]
      },
      "qualityChecklist": [
        "‚úÖ CONTEXT SYNTHESIS COMPLETED: All previous analysis and context integrated comprehensively",
        "‚úÖ BUSINESS REQUIREMENTS STRUCTURED: User value, objectives, and success metrics clearly defined",
        "‚úÖ TECHNICAL REQUIREMENTS DEFINED: Implementation scope and technical specifications documented",
        "‚úÖ TASK DATA COMPREHENSIVELY PREPARED: Complete task structure with all necessary details",
        "‚úÖ üö® TASK CREATED WITH TASKOOPERATIONS.CREATE: MCP operation executed successfully",
        "‚úÖ üö® EXECUTION ID LINKAGE VERIFIED: executionId parameter '{{ executionIdValue }}' included and confirmed",
        "‚úÖ CODEBASE ANALYSIS INTEGRATED: Step 2 findings properly included in task creation",
        "‚úÖ BUSINESS CONTEXT INTEGRATED: User requirements and business objectives comprehensively documented",
        "‚úÖ ACCEPTANCE CRITERIA DEFINED: Specific, measurable, testable success criteria established",
        "‚úÖ PRIORITY AND COMPLEXITY ASSESSED: Task prioritization and complexity estimation completed",
        "‚úÖ RISK ASSESSMENT INCLUDED: Potential risks and mitigation strategies documented",
        "‚úÖ ARCHITECTURE ALIGNMENT VERIFIED: Task approach aligns with identified architecture patterns",
        "‚úÖ INTEGRATION REQUIREMENTS DOCUMENTED: External dependencies and integration points specified",
        "‚úÖ QUALITY STANDARDS INCORPORATED: Testing, security, and performance requirements included",
        "‚úÖ TASK CREATION SUCCESS CONFIRMED: Successful MCP operation completion verified with proper linkage"
      ],
      "conditions": [
        {
          "name": "validation_and_analysis_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "codebase_analysis"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "research_evaluation_and_persistence",
      "description": "Evaluate research requirements strategically and persist findings to support informed implementation decisions.",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Strategic research assessment with focused investigation and systematic persistence of findings to inform implementation strategy.",
      "approachGuidance": {
        "stepByStep": [
          "üîç STRATEGIC RESEARCH REQUIREMENTS ASSESSMENT:",
          "Systematically evaluate task requirements for critical knowledge gaps:",
          "  - Analyze technical requirements for unknown technologies or patterns",
          "  - Identify integration challenges requiring external documentation",
          "  - Assess security or compliance requirements needing research",
          "  - Evaluate performance optimization opportunities requiring investigation",
          "  - Consider emerging best practices or framework updates",
          "üìä RESEARCH PRIORITIZATION AND SCOPING:",
          "IF critical research gaps exist, prioritize and scope investigation (maximum 30 minutes):",
          "  - Rank research questions by implementation impact and risk",
          "  - Focus on authoritative sources and official documentation",
          "  - Limit scope to critical decisions affecting architecture or implementation",
          "  - Avoid research rabbit holes that don't directly impact delivery",
          "IF no critical gaps exist:",
          "  - Document 'No critical research required' with justification",
          "  - Focus on leveraging existing knowledge and established patterns",
          "  - Proceed with confidence based on codebase analysis and experience",
          "üî¨ FOCUSED RESEARCH EXECUTION (IF REQUIRED):",
          "Conduct strategic research using systematic approach:",
          "  - PRIMARY SOURCES: Use web_search for official documentation and authoritative sources",
          "  - OFFICIAL REPOSITORIES: Check GitHub repositories for framework/library documentation",
          "  - PACKAGE REGISTRIES: Analyze NPM, PyPI, or relevant package registries for version compatibility",
          "  - TECHNICAL ARTICLES: Review recent blog posts and technical articles from reputable sources",
          "  - COMMUNITY INSIGHTS: Analyze community discussions, Stack Overflow, and technical forums",
          "  - BEST PRACTICES: Research current best practices and industry standards",
          "üìö RESEARCH VALIDATION AND SYNTHESIS:",
          "Validate findings through multiple sources and synthesize insights:",
          "  - Cross-reference information across multiple authoritative sources",
          "  - Verify compatibility with existing technology stack",
          "  - Validate security implications and compliance requirements",
          "  - Assess performance implications and optimization opportunities",
          "  - Document evidence with links, citations, and source credibility",
          "üìã FINDINGS ORGANIZATION AND DOCUMENTATION:",
          "Organize research findings by implementation priority:",
          "  - CRITICAL DECISIONS: Framework choices, architecture patterns, security approaches",
          "  - IMPLEMENTATION GUIDANCE: Best practices, code patterns, configuration approaches",
          "  - RISK MITIGATION: Security considerations, performance implications, compatibility issues",
          "  - OPTIMIZATION OPPORTUNITIES: Performance improvements, scalability enhancements",
          "  - FUTURE CONSIDERATIONS: Upgrade paths, technical debt prevention, maintainability",
          "üí° ACTIONABLE RECOMMENDATIONS DEVELOPMENT:",
          "Provide clear, implementable recommendations for implementation strategy:",
          "  - Specific technology choices with justification",
          "  - Recommended implementation patterns and approaches",
          "  - Risk assessment and mitigation strategies",
          "  - Performance optimization strategies",
          "  - Security implementation guidelines",
          "üíæ RESEARCH PERSISTENCE WITH MCP OPERATION:",
          "Execute ResearchOperations.create_research to persist findings systematically:",
          "  - Use serviceName: 'ResearchOperations', operation: 'create_research'",
          "  - MANDATORY: Include taskId parameter linking to task created in Step 3",
          "  - Include comprehensive research findings with sources and citations",
          "  - Document research methodology and validation approach",
          "  - Include actionable recommendations and implementation guidance",
          "  - Specify risk assessments and mitigation strategies",
          "‚úÖ RESEARCH COMPLETION AND TRANSITION PREPARATION:",
          "Complete research phase and prepare for architect transition:",
          "  - Verify research persistence successful with proper task linkage",
          "  - Ensure all critical questions answered or acknowledged as acceptable risks",
          "  - Prepare comprehensive context for architect role transition",
          "COMPLETE STEP - Move to strategic transition phase"
        ]
      },
      "qualityChecklist": [
        "‚úÖ RESEARCH REQUIREMENTS SYSTEMATICALLY EVALUATED: Critical knowledge gaps identified and prioritized",
        "‚úÖ RESEARCH SCOPE APPROPRIATELY LIMITED: Investigation focused on implementation-critical decisions only",
        "‚úÖ AUTHORITATIVE SOURCES PRIORITIZED: Official documentation and reputable sources used consistently",
        "‚úÖ MULTIPLE SOURCE VALIDATION: Research findings cross-referenced and validated across sources",
        "‚úÖ TECHNOLOGY COMPATIBILITY VERIFIED: Findings validated against existing technology stack",
        "‚úÖ SECURITY IMPLICATIONS ASSESSED: Security considerations and compliance requirements researched",
        "‚úÖ PERFORMANCE IMPLICATIONS ANALYZED: Performance impact and optimization opportunities investigated",
        "‚úÖ EVIDENCE DOCUMENTATION COMPREHENSIVE: Sources, citations, and credibility properly documented",
        "‚úÖ ACTIONABLE RECOMMENDATIONS PROVIDED: Clear, implementable guidance for architecture and implementation",
        "‚úÖ RISK ASSESSMENT COMPLETED: Potential risks identified with mitigation strategies developed",
        "‚úÖ RESEARCH FINDINGS SYSTEMATICALLY ORGANIZED: Results structured by implementation priority and impact",
        "‚úÖ MCP PERSISTENCE EXECUTED: ResearchOperations.create_research operation completed successfully",
        "‚úÖ TASK LINKAGE VERIFIED: Research properly linked to task created in Step 3 via taskId parameter",
        "‚úÖ NO ANALYSIS LOOPS: Research completed efficiently without excessive investigation depth",
        "‚úÖ TRANSITION READINESS ACHIEVED: Comprehensive context prepared for architect role handoff"
      ]
    },
    {
      "name": "strategic_decision_and_architect_transition",
      "description": "Transition to architect role",
      "sequenceNumber": 5,
      "isRequired": true,
      "stepType": "TRANSITION",
      "approach": "Execute role transition with context handoff",
      "approachGuidance": {
        "stepByStep": [
          "Prepare context summary (5 bullet points max)",
          "Execute transition to architect role",
          "Verify transition succeeded"
        ]
      },
      "qualityChecklist": [
        "Context summarized efficiently",
        "Role transition executed successfully"
      ]
    }
  ]
}
