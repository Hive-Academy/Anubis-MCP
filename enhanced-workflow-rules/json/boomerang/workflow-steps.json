{
  "workflowSteps": [
    {
      "name": "git_setup_and_memory_analysis",
      "description": "Establish git workflow foundation and extract comprehensive project context from memory bank and repository state.",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Systematic git environment setup and intelligent project context extraction to establish solid foundation for strategic analysis.",
      "approachGuidance": {
        "stepByStep": [
          "‚ö†Ô∏è CRITICAL PROTOCOL: DO NOT CREATE ANY TASKS IN THIS STEP - Task creation is exclusively reserved for Step 3",
          "üîç GIT REPOSITORY STATE ANALYSIS:",
          "Check current git status with detailed analysis:",
          "  - Execute: 'git status --porcelain' to check for uncommitted changes",
          "  - Execute: 'git branch' to identify current branch and available branches",
          "  - Execute: 'git log --oneline -10' to understand recent commit history",
          "  - Assess repository cleanliness and potential conflicts",
          "üåø STRATEGIC BRANCH DECISION:",
          "Engage user for informed branch strategy decision:",
          "  - ASK USER: 'I can see we're on [current branch]. For this task, would you prefer to:",
          "  - Option A: Continue on current branch [current-branch-name]",
          "  - Option B: Create new feature branch (please provide branch name)",
          "  - Option C: Switch to existing branch (I can show available branches)'",
          "  - Wait for user decision before proceeding",
          "  - Execute user's branch decision with proper git commands",
          "üîß REPOSITORY PREPARATION:",
          "Prepare clean working environment:",
          "  - If uncommitted changes exist: 'git add . && git commit -m \"Pre-task cleanup: preparing for [task-description]\"'",
          "  - If creating new branch: 'git checkout -b [user-specified-branch-name]'",
          "  - If switching branch: 'git checkout [selected-branch]'",
          "  - Verify branch state: 'git status' to confirm clean working directory",
          "üìö COMPREHENSIVE MEMORY BANK EXTRACTION:",
          "Extract project intelligence from memory bank (IF memory-bank folder exists):",
          "  - Read ProjectOverview.md: Extract business context, project goals, and stakeholder requirements",
          "  - Read TechnicalArchitecture.md: Analyze system architecture, technology stack, and design patterns",
          "  - Read DeveloperGuide.md: Understand development workflows, conventions, and best practices",
          "  - Read any additional documentation: API docs, deployment guides, troubleshooting guides",
          "üìä STRATEGIC CONTEXT SYNTHESIS:",
          "Document key strategic insights (3-5 bullet points maximum):",
          "  - Business Context: Core business objectives and user value propositions",
          "  - Technical Landscape: Architecture patterns, technology stack, and integration points",
          "  - Development Constraints: Known limitations, technical debt, and compliance requirements",
          "  - Quality Standards: Testing requirements, performance benchmarks, and security considerations",
          "  - Stakeholder Considerations: Key stakeholders, approval processes, and communication needs",
          "‚úÖ STEP COMPLETION VERIFICATION:",
          "COMPLETE STEP - NO FURTHER ANALYSIS OR TASK CREATION:",
          "  - Verify git environment is properly configured",
          "  - Confirm project context is documented and understood",
          "  - Ensure NO tasks have been created (reserved for Step 3 only)",
          "  - Prepare for transition to codebase analysis phase"
        ]
      },
      "qualityChecklist": [
        "‚úÖ GIT STATUS COMPREHENSIVELY ANALYZED: Repository state, branch status, and commit history reviewed",
        "‚úÖ USER BRANCH DECISION OBTAINED: Clear user preference for branch strategy confirmed",
        "‚úÖ BRANCH STRATEGY EXECUTED: User's branch decision implemented with proper git commands",
        "‚úÖ REPOSITORY PREPARED: Clean working directory established with proper branch setup",
        "‚úÖ MEMORY BANK EXTRACTION COMPLETED: All available project documentation analyzed and synthesized",
        "‚úÖ STRATEGIC CONTEXT DOCUMENTED: Key business, technical, and constraint insights captured",
        "‚úÖ PROJECT INTELLIGENCE GATHERED: Comprehensive understanding of project context established",
        "‚úÖ DEVELOPMENT ENVIRONMENT READY: Git workflow properly configured for task execution",
        "‚úÖ NO TASK CREATION VIOLATION: Step completed without creating any tasks (reserved for Step 3 only)",
        "‚úÖ FOUNDATION ESTABLISHED: Solid foundation for strategic analysis and codebase investigation prepared"
      ]
    },
    {
      "name": "codebase_analysis",
      "description": "Perform comprehensive high-level codebase analysis to understand architecture, patterns, and implementation landscape.",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Strategic codebase investigation using semantic search and architectural pattern recognition to establish implementation context.",
      "approachGuidance": {
        "stepByStep": [
          "üö® STRATEGIC CODEBASE ANALYSIS - Focus on architectural understanding and implementation context",
          "üîç SEMANTIC ARCHITECTURE DISCOVERY:",
          "Use semantic_search to identify core architectural patterns:",
          "  - Search for architectural patterns: 'MVC', 'MVP', 'MVVM', 'Clean Architecture', 'Hexagonal'",
          "  - Identify design patterns: 'Factory', 'Strategy', 'Observer', 'Repository', 'Dependency Injection'",
          "  - Locate configuration files: 'package.json', 'tsconfig.json', '.env', 'docker-compose.yml'",
          "  - Find routing patterns: 'routes', 'controllers', 'handlers', 'middleware'",
          "üìä TECHNOLOGY STACK IDENTIFICATION:",
          "Analyze and document the complete technology ecosystem:",
          "  - Frontend Technologies: React, Vue, Angular, TypeScript, JavaScript frameworks",
          "  - Backend Technologies: Node.js, Python, Java, .NET, database systems",
          "  - Infrastructure: Docker, Kubernetes, cloud providers, CI/CD pipelines",
          "  - Testing Frameworks: Jest, Mocha, Cypress, testing utilities and patterns",
          "  - Build Tools: Webpack, Vite, Rollup, bundling and optimization tools",
          "üîó INTEGRATION POINTS MAPPING:",
          "Identify critical system integration points and boundaries:",
          "  - External APIs: REST endpoints, GraphQL schemas, third-party integrations",
          "  - Database Connections: ORM patterns, query builders, database migrations",
          "  - Authentication Systems: JWT, OAuth, session management, security middleware",
          "  - Message Queues: Redis, RabbitMQ, event-driven architecture components",
          "  - File Storage: Cloud storage, local file systems, CDN integrations",
          "‚ö†Ô∏è CONSTRAINT IDENTIFICATION:",
          "Document technical constraints and limitations:",
          "  - Performance Requirements: Response time limits, throughput expectations",
          "  - Security Constraints: Authentication requirements, data protection standards",
          "  - Scalability Limitations: Database constraints, resource limitations",
          "  - Legacy System Dependencies: Older technologies, migration considerations",
          "  - Compliance Requirements: GDPR, HIPAA, industry-specific regulations",
          "üìà QUALITY PATTERNS ASSESSMENT:",
          "Evaluate existing quality and testing patterns:",
          "  - Code Quality Standards: Linting rules, formatting conventions, code review processes",
          "  - Testing Strategies: Unit testing coverage, integration testing approaches",
          "  - Documentation Standards: Code comments, API documentation, README quality",
          "  - Error Handling Patterns: Exception handling, logging, monitoring integrations",
          "üìã STRATEGIC ANALYSIS SYNTHESIS:",
          "Document findings in 5-10 bullet points maximum:",
          "  - Architecture Pattern: [Primary architectural approach used]",
          "  - Technology Stack: [Core technologies and frameworks]",
          "  - Integration Landscape: [Key external dependencies and connections]",
          "  - Quality Standards: [Testing, documentation, and code quality approaches]",
          "  - Constraints: [Key limitations and requirements to consider]",
          "  - Development Patterns: [Established conventions and best practices]",
          "üéØ IMPLEMENTATION READINESS ASSESSMENT:",
          "Evaluate codebase readiness for new feature implementation:",
          "  - Assess modularity and extensibility of existing code",
          "  - Identify potential refactoring needs or technical debt",
          "  - Evaluate testing infrastructure adequacy",
          "  - Consider performance and scalability implications"
        ]
      },
      "qualityChecklist": [
        "‚úÖ SEMANTIC SEARCH EXECUTED: Comprehensive architectural pattern discovery completed",
        "‚úÖ TECHNOLOGY STACK IDENTIFIED: Complete technology ecosystem documented",
        "‚úÖ ARCHITECTURAL PATTERNS RECOGNIZED: Core design and architectural patterns identified",
        "‚úÖ INTEGRATION POINTS MAPPED: External dependencies and system boundaries understood",
        "‚úÖ TECHNICAL CONSTRAINTS DOCUMENTED: Limitations, requirements, and compliance needs identified"
      ]
    },
    {
      "name": "task_creation_with_gathered_context",
      "description": "‚ö†Ô∏è MANDATORY: Create a new task using the validated requirements and analysis findings.",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Use the context from the previous step to create a well-defined task linked to the current workflow execution.",
      "approachGuidance": {
        "stepByStep": [
          "üö® MANDATORY TASK CREATION",
          "- MUST use TaskOperations.create operation",
          "- MUST include executionId parameter: '{{ executionIdValue }}'",
          "- Include codebaseAnalysis object with findings from the previous step",
          "- Include description object with user requirements from the previous step",
          "- Execute MCP call with serviceName: 'TaskOperations', operation: 'create'",
          "- Ensure required parameters include executionId, taskData, codebaseAnalysis, and description",
          "- Verify task creation succeeded with executionId linkage",
          "COMPLETE STEP - NO FURTHER ANALYSIS"
        ]
      },
      "qualityChecklist": [
        "Context from previous step (validation and analysis) is used.",
        "üö® TASK CREATED with TaskOperations.create operation",
        "üö® EXECUTION ID LINKAGE VERIFIED (executionId: '{{ executionIdValue }}')",
        "Task creation success confirmed"
      ],
      "conditions": [
        {
          "name": "validation_and_analysis_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "user_validation_and_codebase_analysis"
            }
          },
          "isRequired": true
        }
      ]
    },
    {
      "name": "research_evaluation_and_persistence",
      "description": "Evaluate if research needed and persist findings",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Quick research assessment and database persistence",
      "approachGuidance": {
        "stepByStep": [
          "Review task requirements for critical unknowns",
          "IF critical research gaps exist: Conduct focused research (30 min max)",
          "IF no critical gaps: Document 'No critical research required'",
          "  - Use web_search if available to find authoritative documentation",
          "  - Check official GitHub repositories and documentation",
          "  - Analyze NPM or relevant package registries",
          "  - Look for recent blog posts and technical articles",
          "  - Review community discussions and best practices",
          "  - Validate findings through multiple sources",
          "  - Document evidence with links and citations",
          "  - Organize findings by research question priority",
          "  - Provide clear recommendations for implementation",
          "  - Include risk assessment and mitigation strategies",
          "  - Synthesize information into clear, actionable insights",
          "Document all findings in structured format for task creation",
          "Use ResearchOperations.create_research to persist findings",
          "Execute MCP call with serviceName: 'ResearchOperations', operation: 'create_research'",
          "Ensure taskId parameter links to task created in Step 3",
          "COMPLETE STEP - Move to transition"
        ]
      },
      "qualityChecklist": [
        "Research requirements evaluated",
        "Findings persisted via ResearchOperations.create_research",
        "No analysis loops or excessive investigation"
      ]
    },
    {
      "name": "strategic_decision_and_architect_transition",
      "description": "Transition to architect role",
      "sequenceNumber": 5,
      "isRequired": true,
      "stepType": "TRANSITION",
      "approach": "Execute role transition with context handoff",
      "approachGuidance": {
        "stepByStep": [
          "Prepare context summary (5 bullet points max)",
          "Execute transition to architect role",
          "Verify transition succeeded"
        ]
      },
      "qualityChecklist": [
        "Context summarized efficiently",
        "Role transition executed successfully"
      ]
    }
  ]
}
