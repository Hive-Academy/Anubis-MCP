{
  "workflowSteps": [
    {
      "name": "get_task_context",
      "description": "Retrieve task context and existing analysis",
      "sequenceNumber": 1,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Intelligently assess task context availability and retrieve if needed",
      "approachGuidance": {
        "stepByStep": [
          "Check if task context is already available in current execution history",
          "If context is available, analyze and validate its completeness",
          "Only if context is missing or incomplete, execute TaskOperations.get",
          "Review business and technical requirements",
          "Identify quality baselines and constraints"
        ]
      },
      "qualityChecklist": [
        "Task context availability intelligently assessed",
        "Existing context validated for completeness",
        "Requirements and constraints documented",
        "Quality baselines identified"
      ],
      "conditions": [],
      "actions": []
    },
    {
      "name": "analyze_codebase_foundation",
      "description": "Use existing codebase analysis as research foundation",
      "sequenceNumber": 2,
      "isRequired": true,
      "stepType": "ANALYSIS",
      "approach": "Extract patterns and identify research needs from codebase analysis",
      "approachGuidance": {
        "stepByStep": [
          "Extract current architecture patterns from analysis",
          "Identify technical debt requiring research",
          "Review tech stack for compatibility needs",
          "Document integration constraints and quality standards"
        ]
      },
      "qualityChecklist": [
        "Architecture patterns extracted and analyzed",
        "Technical debt and quality issues identified",
        "Technology stack compatibility documented",
        "Integration constraints understood"
      ],
      "conditions": [
        {
          "name": "task_context_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "get_task_context"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    },
    {
      "name": "identify_research_questions",
      "description": "Extract and prioritize research questions",
      "sequenceNumber": 3,
      "isRequired": true,
      "stepType": "ANALYSIS",
      "approach": "Systematic question extraction with priority classification",
      "approachGuidance": {
        "stepByStep": [
          "Identify technical unknowns requiring investigation",
          "Extract implementation options needing comparison",
          "Document integration challenges requiring research",
          "Classify questions by priority: Critical, Important, Nice-to-have",
          "Prioritize based on blocking impact on implementation"
        ]
      },
      "qualityChecklist": [
        "Technical unknowns identified and documented",
        "Implementation options extracted",
        "Integration challenges documented",
        "Questions classified by priority",
        "Critical blocking questions clearly identified"
      ],
      "conditions": [
        {
          "name": "codebase_analysis_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "analyze_codebase_foundation"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    },
    {
      "name": "conduct_research_and_report",
      "description": "Research critical questions and generate comprehensive findings report",
      "sequenceNumber": 4,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Comprehensive research and structured report generation with actionable insights",
      "approachGuidance": {
        "stepByStep": [
          "For each critical question:",
          "- Use web_search if available to find authoritative documentation",
          "- Check official GitHub repositories and documentation",
          "- Analyze NPM or relevant package registries",
          "- Look for recent blog posts and technical articles",
          "- Review community discussions and best practices",
          "- Validate findings through multiple sources",
          "- Document evidence with links and citations",
          "- Organize findings by research question priority",
          "- Provide clear recommendations for implementation",
          "- Include risk assessment and mitigation strategies",
          "- Synthesize information into clear, actionable insights",
          "- Prepare comprehensive handoff for architect role"
        ]
      },
      "qualityChecklist": [
        "Multiple authoritative sources consulted per question",
        "Latest information validated and cross-referenced",
        "Technical claims supported by documentation",
        "Implementation examples and patterns collected",
        "Community best practices and recommendations gathered",
        "All findings properly cited and linked",
        "Findings organized by priority and impact",
        "Clear implementation recommendations provided",
        "Risk assessment and mitigation included",
        "Report prepared for architect handoff"
      ],
      "conditions": [
        {
          "name": "research_questions_identified",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "identify_research_questions"
            }
          },
          "isRequired": true
        }
      ],
      "actions": [
        {
          "name": "create_comprehensive_research_report",
          "actionType": "MCP_CALL",
          "actionData": {
            "serviceName": "ResearchOperations",
            "operation": "create_research"
          },
          "sequenceOrder": 1
        }
      ]
    },
    {
      "name": "role_transition",
      "description": "Transition to architect role with research findings",
      "sequenceNumber": 5,
      "isRequired": true,
      "stepType": "ACTION",
      "approach": "Execute transition to architect with comprehensive research handoff",
      "approachGuidance": {
        "stepByStep": [
          "Execute get_role_transitions with fromRoleName: 'researcher'",
          "Extract transitionId for researcher to architect transition",
          "Execute execute_transition with research findings in handoff",
          "Verify transition success and delegation confirmation"
        ]
      },
      "qualityChecklist": [
        "get_role_transitions executed with correct parameters",
        "Correct transitionId obtained for architect transition",
        "execute_transition executed with research findings",
        "Transition success verified and delegation confirmed"
      ],
      "conditions": [
        {
          "name": "research_report_completed",
          "conditionType": "PREVIOUS_STEP_COMPLETED",
          "logic": {
            "check": "step_completed",
            "parameters": {
              "stepName": "conduct_research_and_report"
            }
          },
          "isRequired": true
        }
      ],
      "actions": []
    }
  ]
}