{
  "serviceOrchestrationProtocols": {
    "description": "Internal service orchestration protocols for research operations replacing direct MCP calls",
    "coreOrchestrator": "CoreServiceOrchestrator",
    "supportedServices": {
      "TaskOperations": {
        "service": "TaskOperationsService",
        "operations": ["get", "update", "list"],
        "description": "Task context acquisition and updates",
        "usageContext": "Research context acquisition, progress updates, findings storage"
      },
      "ResearchOperations": {
        "service": "ResearchOperationsService",
        "operations": [
          "create_research",
          "update_research",
          "get_research",
          "add_comment",
          "get_comments"
        ],
        "description": "Research coordination and knowledge management",
        "usageContext": "Research report creation, findings management, evidence documentation"
      },
      "WorkflowOperations": {
        "service": "WorkflowOperationsService",
        "operations": ["delegate", "escalate", "complete"],
        "description": "Workflow coordination and role delegation",
        "usageContext": "Research completion delegation, escalation to boomerang, workflow transitions"
      },
      "ReviewOperations": {
        "service": "ReviewOperationsService",
        "operations": ["create_review", "update_review", "get_review"],
        "description": "Quality review and validation",
        "usageContext": "Research quality validation, evidence review, findings verification"
      },
      "PlanningOperations": {
        "service": "PlanningOperationsService",
        "operations": ["get_plan", "update_plan"],
        "description": "Implementation planning context",
        "usageContext": "Research integration with planning, context acquisition for research scope"
      }
    },
    "orchestrationPatterns": {
      "contextAcquisition": {
        "pattern": "TaskOperations.get → PlanningOperations.get_plan → ResearchOperations.get_research",
        "description": "Comprehensive context acquisition including task, planning, and existing research",
        "services": [
          "TaskOperations",
          "PlanningOperations",
          "ResearchOperations"
        ],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "researchInitiation": {
        "pattern": "TaskOperations.get → ResearchOperations.create_research",
        "description": "Initialize research with complete task context",
        "services": ["TaskOperations", "ResearchOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      },
      "findingsDocumentation": {
        "pattern": "ResearchOperations.update_research → ResearchOperations.add_comment → TaskOperations.update",
        "description": "Document research findings with commentary and task updates",
        "services": ["ResearchOperations", "TaskOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "qualityValidation": {
        "pattern": "ReviewOperations.create_review → ResearchOperations.update_research",
        "description": "Validate research quality and update findings",
        "services": ["ReviewOperations", "ResearchOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "continue_on_failure"
      },
      "researchCompletion": {
        "pattern": "ResearchOperations.update_research → WorkflowOperations.delegate",
        "description": "Complete research and delegate to next role",
        "services": ["ResearchOperations", "WorkflowOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      },
      "escalationHandling": {
        "pattern": "ResearchOperations.add_comment → WorkflowOperations.escalate",
        "description": "Document research blockage and escalate to boomerang",
        "services": ["ResearchOperations", "WorkflowOperations"],
        "sequenceMode": "sequential",
        "errorHandling": "stop_on_failure"
      }
    },
    "actionTypeMapping": {
      "MCP_CALL": {
        "executor": "StepActionExecutor.executeServiceCall",
        "orchestrator": "CoreServiceOrchestrator.executeServiceCall",
        "validation": "CoreServiceOrchestrator.validateServiceCall",
        "errorHandling": "ServiceCallResult with success/error status"
      },
      "RESEARCH_ANALYSIS": {
        "executor": "StepActionExecutor.executeResearchAnalysis",
        "description": "Execute research analysis with evidence collection",
        "errorHandling": "ActionExecutionResult with analysis results"
      },
      "EVIDENCE_VALIDATION": {
        "executor": "StepActionExecutor.executeEvidenceValidation",
        "description": "Validate research evidence quality and authority",
        "errorHandling": "ActionExecutionResult with validation results"
      },
      "FINDINGS_SYNTHESIS": {
        "executor": "StepActionExecutor.executeFindingsSynthesis",
        "description": "Synthesize research findings into recommendations",
        "errorHandling": "ActionExecutionResult with synthesis results"
      },
      "COMPATIBILITY_CHECK": {
        "executor": "StepActionExecutor.executeCompatibilityCheck",
        "description": "Check compatibility with existing MCP context",
        "errorHandling": "ActionExecutionResult with compatibility assessment"
      },
      "PERFORMANCE_BENCHMARK": {
        "executor": "StepActionExecutor.executePerformanceBenchmark",
        "description": "Execute performance benchmarking analysis",
        "errorHandling": "ActionExecutionResult with benchmark results"
      },
      "SECURITY_ANALYSIS": {
        "executor": "StepActionExecutor.executeSecurityAnalysis",
        "description": "Execute security analysis and compliance validation",
        "errorHandling": "ActionExecutionResult with security assessment"
      },
      "INTEGRATION_VALIDATION": {
        "executor": "StepActionExecutor.executeIntegrationValidation",
        "description": "Validate integration compatibility and requirements",
        "errorHandling": "ActionExecutionResult with integration assessment"
      },
      "RISK_ASSESSMENT": {
        "executor": "StepActionExecutor.executeRiskAssessment",
        "description": "Execute comprehensive risk assessment with mitigation",
        "errorHandling": "ActionExecutionResult with risk analysis"
      },
      "COMMAND": {
        "executor": "StepActionExecutor.executeCommand",
        "description": "Shell command execution for research tools",
        "errorHandling": "ActionExecutionResult with command results"
      },
      "VALIDATION": {
        "executor": "StepActionExecutor.executeValidation",
        "description": "Validation logic execution for research quality",
        "errorHandling": "ActionExecutionResult with validation results"
      },
      "REMINDER": {
        "executor": "StepActionExecutor.executeReminder",
        "description": "Research milestone reminders and notifications",
        "errorHandling": "Always successful"
      }
    },
    "serviceCallProtocol": {
      "validation": {
        "step1": "CoreServiceOrchestrator.validateServiceCall(serviceName, operation, parameters)",
        "step2": "Validate research-specific parameters and context requirements",
        "step3": "Ensure evidence quality standards and validation criteria",
        "step4": "Return validation result with research-specific checks"
      },
      "execution": {
        "step1": "CoreServiceOrchestrator.executeServiceCall(serviceName, operation, parameters)",
        "step2": "Delegate to appropriate research service through delegateServiceCall()",
        "step3": "Handle research-specific response processing and evidence validation",
        "step4": "Return ServiceCallResult with research metrics and quality assessment"
      },
      "errorHandling": {
        "serviceNotFound": "Return error with research service availability message",
        "operationFailed": "Return ServiceCallResult with research-specific error details",
        "validationFailed": "Return research validation error before execution",
        "evidenceQualityFailed": "Handle evidence quality validation failures",
        "compatibilityCheckFailed": "Handle MCP compatibility validation failures",
        "timeout": "Handle research service call timeouts with partial results"
      }
    },
    "qualityStandards": {
      "researchValidation": [
        "All research findings must be validated against authoritative sources",
        "Evidence quality must meet established standards for peer review",
        "Technical compatibility must be verified with existing MCP context",
        "Performance benchmarks must be quantitative and reproducible"
      ],
      "serviceCallValidation": [
        "All service calls must include research context and validation criteria",
        "Parameters must include evidence quality requirements",
        "Error handling must preserve research progress and partial findings",
        "Service responses must be validated for research quality standards"
      ],
      "orchestrationPrinciples": [
        "Use CoreServiceOrchestrator for all research service coordination",
        "Implement comprehensive error handling with research context preservation",
        "Maintain research quality metrics and evidence validation tracking",
        "Ensure proper context preservation across research service calls"
      ],
      "evidenceStandards": [
        "Primary sources required for all technical recommendations",
        "Peer-reviewed content preferred for methodology and best practices",
        "Real-world validation required for performance and compatibility claims",
        "Security assessments must reference industry standards and compliance"
      ],
      "errorRecovery": [
        "Implement graceful degradation for research service failures",
        "Preserve partial research findings and evidence for recovery",
        "Provide meaningful error messages with research continuation guidance",
        "Support retry mechanisms for transient research service failures"
      ]
    },
    "researchSpecificProtocols": {
      "evidenceCollection": {
        "authorityValidation": "Validate source authority and credibility",
        "currencyCheck": "Ensure information currency and relevance",
        "peerReviewVerification": "Verify peer review status for academic sources",
        "industryStandardsAlignment": "Align with established industry standards"
      },
      "compatibilityValidation": {
        "mcpContextAlignment": "Validate alignment with existing MCP context",
        "architecturalCompatibility": "Check compatibility with current architecture",
        "performanceBaseline": "Compare against current performance baseline",
        "integrationFeasibility": "Validate integration with existing systems"
      },
      "qualityAssurance": {
        "comprehensivenessCheck": "Ensure comprehensive coverage of research scope",
        "accuracyValidation": "Validate accuracy through multiple source verification",
        "relevanceAssessment": "Assess direct relevance to task requirements",
        "feasibilityValidation": "Validate technical and practical feasibility"
      },
      "riskManagement": {
        "riskIdentification": "Identify technical, security, and implementation risks",
        "mitigationStrategies": "Develop comprehensive mitigation strategies",
        "contingencyPlanning": "Create contingency plans for identified risks",
        "monitoringFramework": "Establish risk monitoring and early warning systems"
      }
    }
  }
}
